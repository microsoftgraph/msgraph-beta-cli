// <auto-generated/>
#pragma warning disable CS0618
using ApiSdk.Models.ODataErrors;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.Reports.GetApiUsageserviceAreaServiceAreaPeriodPeriodAppIdAppId
{
    /// <summary>
    /// Provides operations to call the getApiUsage method.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class GetApiUsageserviceAreaServiceAreaPeriodPeriodAppIdAppIdRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// Get the tenant and app API usage for Microsoft Graph services.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCommand()
        {
            var command = new Command("get");
            command.Description = "Get the tenant and app API usage for Microsoft Graph services.";
            var serviceAreaOption = new Option<string>("--service-area", description: "Usage: serviceArea='@serviceArea'") {
            };
            serviceAreaOption.IsRequired = false;
            command.AddOption(serviceAreaOption);
            var periodOption = new Option<string>("--period", description: "Usage: period='@period'") {
            };
            periodOption.IsRequired = false;
            command.AddOption(periodOption);
            var appIdOption = new Option<string>("--app-id", description: "Usage: appId='@appId'") {
            };
            appIdOption.IsRequired = false;
            command.AddOption(appIdOption);
            var outputFileOption = new Option<FileInfo>("--output-file");
            command.AddOption(outputFileOption);
            command.SetHandler(async (invocationContext) => {
                var serviceArea = invocationContext.ParseResult.GetValueForOption(serviceAreaOption);
                var period = invocationContext.ParseResult.GetValueForOption(periodOption);
                var appId = invocationContext.ParseResult.GetValueForOption(appIdOption);
                var outputFile = invocationContext.ParseResult.GetValueForOption(outputFileOption);
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                    if (!string.IsNullOrEmpty(serviceArea)) q.QueryParameters.ServiceArea = serviceArea;
                    if (!string.IsNullOrEmpty(period)) q.QueryParameters.Period = period;
                    if (!string.IsNullOrEmpty(appId)) q.QueryParameters.AppId = appId;
                });
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                if (outputFile == null) {
                    using var reader = new StreamReader(response);
                    var strContent = reader.ReadToEnd();
                    Console.Write(strContent);
                }
                else {
                    using var writeStream = outputFile.OpenWrite();
                    await response.CopyToAsync(writeStream);
                    Console.WriteLine($"Content written to {outputFile.FullName}.");
                }
            });
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Reports.GetApiUsageserviceAreaServiceAreaPeriodPeriodAppIdAppId.GetApiUsageserviceAreaServiceAreaPeriodPeriodAppIdAppIdRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public GetApiUsageserviceAreaServiceAreaPeriodPeriodAppIdAppIdRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/reports/getApiUsage(serviceArea='@serviceArea',period='@period',appId='@appId'){?appId*,period*,serviceArea*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Reports.GetApiUsageserviceAreaServiceAreaPeriodPeriodAppIdAppId.GetApiUsageserviceAreaServiceAreaPeriodPeriodAppIdAppIdRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public GetApiUsageserviceAreaServiceAreaPeriodPeriodAppIdAppIdRequestBuilder(string rawUrl) : base("{+baseurl}/reports/getApiUsage(serviceArea='@serviceArea',period='@period',appId='@appId'){?appId*,period*,serviceArea*}", rawUrl)
        {
        }
        /// <summary>
        /// Get the tenant and app API usage for Microsoft Graph services.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.Reports.GetApiUsageserviceAreaServiceAreaPeriodPeriodAppIdAppId.GetApiUsageserviceAreaServiceAreaPeriodPeriodAppIdAppIdRequestBuilder.GetApiUsageserviceAreaServiceAreaPeriodPeriodAppIdAppIdRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.Reports.GetApiUsageserviceAreaServiceAreaPeriodPeriodAppIdAppId.GetApiUsageserviceAreaServiceAreaPeriodPeriodAppIdAppIdRequestBuilder.GetApiUsageserviceAreaServiceAreaPeriodPeriodAppIdAppIdRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/octet-stream");
            return requestInfo;
        }
        /// <summary>
        /// Get the tenant and app API usage for Microsoft Graph services.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class GetApiUsageserviceAreaServiceAreaPeriodPeriodAppIdAppIdRequestBuilderGetQueryParameters 
        {
            /// <summary>Usage: appId=&apos;@appId&apos;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("appId")]
            public string? AppId { get; set; }
#nullable restore
#else
            [QueryParameter("appId")]
            public string AppId { get; set; }
#endif
            /// <summary>Usage: period=&apos;@period&apos;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("period")]
            public string? Period { get; set; }
#nullable restore
#else
            [QueryParameter("period")]
            public string Period { get; set; }
#endif
            /// <summary>Usage: serviceArea=&apos;@serviceArea&apos;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("serviceArea")]
            public string? ServiceArea { get; set; }
#nullable restore
#else
            [QueryParameter("serviceArea")]
            public string ServiceArea { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
