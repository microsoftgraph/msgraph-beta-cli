// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Mac OS SCEP certificate profile.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MacOSScepCertificateProfile : global::ApiSdk.Models.MacOSCertificateProfileBase, IParsable
    {
        /// <summary>AllowAllAppsAccess setting</summary>
        public bool? AllowAllAppsAccess { get; set; }
        /// <summary>Target store certificate. Possible values are: user, machine.</summary>
        public global::ApiSdk.Models.CertificateStore? CertificateStore { get; set; }
        /// <summary>Custom Subject Alternative Name Settings. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.CustomSubjectAlternativeName>? CustomSubjectAlternativeNames { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.CustomSubjectAlternativeName> CustomSubjectAlternativeNames { get; set; }
#endif
        /// <summary>Indicates the deployment channel type used to deploy the configuration profile. Possible values are deviceChannel, userChannel. Possible values are: deviceChannel, userChannel, unknownFutureValue.</summary>
        public global::ApiSdk.Models.AppleDeploymentChannel? DeploymentChannel { get; set; }
        /// <summary>Extended Key Usage (EKU) settings. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.ExtendedKeyUsage>? ExtendedKeyUsages { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.ExtendedKeyUsage> ExtendedKeyUsages { get; set; }
#endif
        /// <summary>SCEP Hash Algorithm. Possible values are: sha1, sha2.</summary>
        public global::ApiSdk.Models.HashAlgorithms? HashAlgorithm { get; set; }
        /// <summary>Key Size Options.</summary>
        public global::ApiSdk.Models.KeySize? KeySize { get; set; }
        /// <summary>Key Usage Options.</summary>
        public global::ApiSdk.Models.KeyUsages? KeyUsage { get; set; }
        /// <summary>Certificate state for devices. This collection can contain a maximum of 2147483647 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.ManagedDeviceCertificateState>? ManagedDeviceCertificateStates { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.ManagedDeviceCertificateState> ManagedDeviceCertificateStates { get; set; }
#endif
        /// <summary>Trusted Root Certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.MacOSTrustedRootCertificate? RootCertificate { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.MacOSTrustedRootCertificate RootCertificate { get; set; }
#endif
        /// <summary>SCEP Server Url(s).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ScepServerUrls { get; set; }
#nullable restore
#else
        public List<string> ScepServerUrls { get; set; }
#endif
        /// <summary>Custom String that defines the AAD Attribute.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubjectAlternativeNameFormatString { get; set; }
#nullable restore
#else
        public string SubjectAlternativeNameFormatString { get; set; }
#endif
        /// <summary>Custom format to use with SubjectNameFormat = Custom. Example: CN={{EmailAddress}},E={{EmailAddress}},OU=Enterprise Users,O=Contoso Corporation,L=Redmond,ST=WA,C=US</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubjectNameFormatString { get; set; }
#nullable restore
#else
        public string SubjectNameFormatString { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.MacOSScepCertificateProfile"/> and sets the default values.
        /// </summary>
        public MacOSScepCertificateProfile() : base()
        {
            OdataType = "#microsoft.graph.macOSScepCertificateProfile";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.MacOSScepCertificateProfile"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.MacOSScepCertificateProfile CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.MacOSScepCertificateProfile();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "allowAllAppsAccess", n => { AllowAllAppsAccess = n.GetBoolValue(); } },
                { "certificateStore", n => { CertificateStore = n.GetEnumValue<global::ApiSdk.Models.CertificateStore>(); } },
                { "customSubjectAlternativeNames", n => { CustomSubjectAlternativeNames = n.GetCollectionOfObjectValues<global::ApiSdk.Models.CustomSubjectAlternativeName>(global::ApiSdk.Models.CustomSubjectAlternativeName.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deploymentChannel", n => { DeploymentChannel = n.GetEnumValue<global::ApiSdk.Models.AppleDeploymentChannel>(); } },
                { "extendedKeyUsages", n => { ExtendedKeyUsages = n.GetCollectionOfObjectValues<global::ApiSdk.Models.ExtendedKeyUsage>(global::ApiSdk.Models.ExtendedKeyUsage.CreateFromDiscriminatorValue)?.AsList(); } },
                { "hashAlgorithm", n => { HashAlgorithm = n.GetEnumValue<global::ApiSdk.Models.HashAlgorithms>(); } },
                { "keySize", n => { KeySize = n.GetEnumValue<global::ApiSdk.Models.KeySize>(); } },
                { "keyUsage", n => { KeyUsage = n.GetEnumValue<global::ApiSdk.Models.KeyUsages>(); } },
                { "managedDeviceCertificateStates", n => { ManagedDeviceCertificateStates = n.GetCollectionOfObjectValues<global::ApiSdk.Models.ManagedDeviceCertificateState>(global::ApiSdk.Models.ManagedDeviceCertificateState.CreateFromDiscriminatorValue)?.AsList(); } },
                { "rootCertificate", n => { RootCertificate = n.GetObjectValue<global::ApiSdk.Models.MacOSTrustedRootCertificate>(global::ApiSdk.Models.MacOSTrustedRootCertificate.CreateFromDiscriminatorValue); } },
                { "scepServerUrls", n => { ScepServerUrls = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "subjectAlternativeNameFormatString", n => { SubjectAlternativeNameFormatString = n.GetStringValue(); } },
                { "subjectNameFormatString", n => { SubjectNameFormatString = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("allowAllAppsAccess", AllowAllAppsAccess);
            writer.WriteEnumValue<global::ApiSdk.Models.CertificateStore>("certificateStore", CertificateStore);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.CustomSubjectAlternativeName>("customSubjectAlternativeNames", CustomSubjectAlternativeNames);
            writer.WriteEnumValue<global::ApiSdk.Models.AppleDeploymentChannel>("deploymentChannel", DeploymentChannel);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.ExtendedKeyUsage>("extendedKeyUsages", ExtendedKeyUsages);
            writer.WriteEnumValue<global::ApiSdk.Models.HashAlgorithms>("hashAlgorithm", HashAlgorithm);
            writer.WriteEnumValue<global::ApiSdk.Models.KeySize>("keySize", KeySize);
            writer.WriteEnumValue<global::ApiSdk.Models.KeyUsages>("keyUsage", KeyUsage);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.ManagedDeviceCertificateState>("managedDeviceCertificateStates", ManagedDeviceCertificateStates);
            writer.WriteObjectValue<global::ApiSdk.Models.MacOSTrustedRootCertificate>("rootCertificate", RootCertificate);
            writer.WriteCollectionOfPrimitiveValues<string>("scepServerUrls", ScepServerUrls);
            writer.WriteStringValue("subjectAlternativeNameFormatString", SubjectAlternativeNameFormatString);
            writer.WriteStringValue("subjectNameFormatString", SubjectNameFormatString);
        }
    }
}
#pragma warning restore CS0618
