// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models.Networkaccess {
    public class ConnectivityConfigurationLink : ApiSdk.Models.Entity, IParsable 
    {
        /// <summary>Specifies the name of the link.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Specifies Microsoft&apos;s end of the tunnel configuration for a device link.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<LocalConnectivityConfiguration>? LocalConfigurations { get; set; }
#nullable restore
#else
        public List<LocalConnectivityConfiguration> LocalConfigurations { get; set; }
#endif
        /// <summary>The peerConfiguration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PeerConnectivityConfiguration? PeerConfiguration { get; set; }
#nullable restore
#else
        public PeerConnectivityConfiguration PeerConfiguration { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ConnectivityConfigurationLink"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new ConnectivityConfigurationLink CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ConnectivityConfigurationLink();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"displayName", n => { DisplayName = n.GetStringValue(); } },
                {"localConfigurations", n => { LocalConfigurations = n.GetCollectionOfObjectValues<LocalConnectivityConfiguration>(LocalConnectivityConfiguration.CreateFromDiscriminatorValue)?.ToList(); } },
                {"peerConfiguration", n => { PeerConfiguration = n.GetObjectValue<PeerConnectivityConfiguration>(PeerConnectivityConfiguration.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteCollectionOfObjectValues<LocalConnectivityConfiguration>("localConfigurations", LocalConfigurations);
            writer.WriteObjectValue<PeerConnectivityConfiguration>("peerConfiguration", PeerConfiguration);
        }
    }
}
