// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models.Networkaccess {
    public class WebCategoriesSummary : IAdditionalDataHolder, IParsable 
    {
        /// <summary>The action property</summary>
        public FilteringPolicyAction? Action { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The number of unique devices that were seen.</summary>
        public long? DeviceCount { get; set; }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType { get; set; }
#nullable restore
#else
        public string OdataType { get; set; }
#endif
        /// <summary>The number of transactions that were seen.</summary>
        public long? TransactionCount { get; set; }
        /// <summary>The number of unique Microsoft Entra ID users that were seen.</summary>
        public long? UserCount { get; set; }
        /// <summary>The webCategory property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ApiSdk.Models.Networkaccess.WebCategory? WebCategory { get; set; }
#nullable restore
#else
        public ApiSdk.Models.Networkaccess.WebCategory WebCategory { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="WebCategoriesSummary"/> and sets the default values.
        /// </summary>
        public WebCategoriesSummary()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="WebCategoriesSummary"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WebCategoriesSummary CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WebCategoriesSummary();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"action", n => { Action = n.GetEnumValue<FilteringPolicyAction>(); } },
                {"deviceCount", n => { DeviceCount = n.GetLongValue(); } },
                {"@odata.type", n => { OdataType = n.GetStringValue(); } },
                {"transactionCount", n => { TransactionCount = n.GetLongValue(); } },
                {"userCount", n => { UserCount = n.GetLongValue(); } },
                {"webCategory", n => { WebCategory = n.GetObjectValue<ApiSdk.Models.Networkaccess.WebCategory>(ApiSdk.Models.Networkaccess.WebCategory.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<FilteringPolicyAction>("action", Action);
            writer.WriteLongValue("deviceCount", DeviceCount);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteLongValue("transactionCount", TransactionCount);
            writer.WriteLongValue("userCount", UserCount);
            writer.WriteObjectValue<ApiSdk.Models.Networkaccess.WebCategory>("webCategory", WebCategory);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
