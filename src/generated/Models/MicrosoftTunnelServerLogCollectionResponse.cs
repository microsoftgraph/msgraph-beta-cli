// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Entity that stores the server log collection status.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MicrosoftTunnelServerLogCollectionResponse : global::ApiSdk.Models.Entity, IParsable
    {
        /// <summary>The end time of the logs collected</summary>
        public DateTimeOffset? EndDateTime { get; set; }
        /// <summary>The time when the log collection is expired</summary>
        public DateTimeOffset? ExpiryDateTime { get; set; }
        /// <summary>The time when the log collection was requested</summary>
        public DateTimeOffset? RequestDateTime { get; set; }
        /// <summary>ID of the server the log collection is requested upon</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServerId { get; set; }
#nullable restore
#else
        public string ServerId { get; set; }
#endif
        /// <summary>The size of the logs in bytes</summary>
        public long? SizeInBytes { get; set; }
        /// <summary>The start time of the logs collected</summary>
        public DateTimeOffset? StartDateTime { get; set; }
        /// <summary>Enum type that represent the status of log collection</summary>
        public global::ApiSdk.Models.MicrosoftTunnelLogCollectionStatus? Status { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.MicrosoftTunnelServerLogCollectionResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.MicrosoftTunnelServerLogCollectionResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.MicrosoftTunnelServerLogCollectionResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "endDateTime", n => { EndDateTime = n.GetDateTimeOffsetValue(); } },
                { "expiryDateTime", n => { ExpiryDateTime = n.GetDateTimeOffsetValue(); } },
                { "requestDateTime", n => { RequestDateTime = n.GetDateTimeOffsetValue(); } },
                { "serverId", n => { ServerId = n.GetStringValue(); } },
                { "sizeInBytes", n => { SizeInBytes = n.GetLongValue(); } },
                { "startDateTime", n => { StartDateTime = n.GetDateTimeOffsetValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::ApiSdk.Models.MicrosoftTunnelLogCollectionStatus>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteDateTimeOffsetValue("endDateTime", EndDateTime);
            writer.WriteDateTimeOffsetValue("expiryDateTime", ExpiryDateTime);
            writer.WriteDateTimeOffsetValue("requestDateTime", RequestDateTime);
            writer.WriteStringValue("serverId", ServerId);
            writer.WriteLongValue("sizeInBytes", SizeInBytes);
            writer.WriteDateTimeOffsetValue("startDateTime", StartDateTime);
            writer.WriteEnumValue<global::ApiSdk.Models.MicrosoftTunnelLogCollectionStatus>("status", Status);
        }
    }
}
#pragma warning restore CS0618
