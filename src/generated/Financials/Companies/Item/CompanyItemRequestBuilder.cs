// <auto-generated/>
using ApiSdk.Financials.Companies.Item.Accounts;
using ApiSdk.Financials.Companies.Item.AgedAccountsPayable;
using ApiSdk.Financials.Companies.Item.AgedAccountsReceivable;
using ApiSdk.Financials.Companies.Item.CompanyInformation;
using ApiSdk.Financials.Companies.Item.CountriesRegions;
using ApiSdk.Financials.Companies.Item.Currencies;
using ApiSdk.Financials.Companies.Item.CustomerPaymentJournals;
using ApiSdk.Financials.Companies.Item.CustomerPayments;
using ApiSdk.Financials.Companies.Item.Customers;
using ApiSdk.Financials.Companies.Item.DimensionValues;
using ApiSdk.Financials.Companies.Item.Dimensions;
using ApiSdk.Financials.Companies.Item.Employees;
using ApiSdk.Financials.Companies.Item.GeneralLedgerEntries;
using ApiSdk.Financials.Companies.Item.ItemCategories;
using ApiSdk.Financials.Companies.Item.Items;
using ApiSdk.Financials.Companies.Item.JournalLines;
using ApiSdk.Financials.Companies.Item.Journals;
using ApiSdk.Financials.Companies.Item.PaymentMethods;
using ApiSdk.Financials.Companies.Item.PaymentTerms;
using ApiSdk.Financials.Companies.Item.Picture;
using ApiSdk.Financials.Companies.Item.PurchaseInvoiceLines;
using ApiSdk.Financials.Companies.Item.PurchaseInvoices;
using ApiSdk.Financials.Companies.Item.SalesCreditMemoLines;
using ApiSdk.Financials.Companies.Item.SalesCreditMemos;
using ApiSdk.Financials.Companies.Item.SalesInvoiceLines;
using ApiSdk.Financials.Companies.Item.SalesInvoices;
using ApiSdk.Financials.Companies.Item.SalesOrderLines;
using ApiSdk.Financials.Companies.Item.SalesOrders;
using ApiSdk.Financials.Companies.Item.SalesQuoteLines;
using ApiSdk.Financials.Companies.Item.SalesQuotes;
using ApiSdk.Financials.Companies.Item.ShipmentMethods;
using ApiSdk.Financials.Companies.Item.TaxAreas;
using ApiSdk.Financials.Companies.Item.TaxGroups;
using ApiSdk.Financials.Companies.Item.UnitsOfMeasure;
using ApiSdk.Financials.Companies.Item.Vendors;
using ApiSdk.Models.ODataErrors;
using ApiSdk.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.Financials.Companies.Item {
    /// <summary>
    /// Provides operations to manage the companies property of the microsoft.graph.financials entity.
    /// </summary>
    public class CompanyItemRequestBuilder : BaseCliRequestBuilder 
    {
        /// <summary>
        /// Provides operations to manage the accounts property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAccountsNavCommand()
        {
            var command = new Command("accounts");
            command.Description = "Provides operations to manage the accounts property of the microsoft.graph.company entity.";
            var builder = new AccountsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the agedAccountsPayable property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAgedAccountsPayableNavCommand()
        {
            var command = new Command("aged-accounts-payable");
            command.Description = "Provides operations to manage the agedAccountsPayable property of the microsoft.graph.company entity.";
            var builder = new AgedAccountsPayableRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the agedAccountsReceivable property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAgedAccountsReceivableNavCommand()
        {
            var command = new Command("aged-accounts-receivable");
            command.Description = "Provides operations to manage the agedAccountsReceivable property of the microsoft.graph.company entity.";
            var builder = new AgedAccountsReceivableRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the companyInformation property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCompanyInformationNavCommand()
        {
            var command = new Command("company-information");
            command.Description = "Provides operations to manage the companyInformation property of the microsoft.graph.company entity.";
            var builder = new CompanyInformationRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the countriesRegions property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCountriesRegionsNavCommand()
        {
            var command = new Command("countries-regions");
            command.Description = "Provides operations to manage the countriesRegions property of the microsoft.graph.company entity.";
            var builder = new CountriesRegionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the currencies property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCurrenciesNavCommand()
        {
            var command = new Command("currencies");
            command.Description = "Provides operations to manage the currencies property of the microsoft.graph.company entity.";
            var builder = new CurrenciesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the customerPaymentJournals property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCustomerPaymentJournalsNavCommand()
        {
            var command = new Command("customer-payment-journals");
            command.Description = "Provides operations to manage the customerPaymentJournals property of the microsoft.graph.company entity.";
            var builder = new CustomerPaymentJournalsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the customerPayments property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCustomerPaymentsNavCommand()
        {
            var command = new Command("customer-payments");
            command.Description = "Provides operations to manage the customerPayments property of the microsoft.graph.company entity.";
            var builder = new CustomerPaymentsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the customers property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCustomersNavCommand()
        {
            var command = new Command("customers");
            command.Description = "Provides operations to manage the customers property of the microsoft.graph.company entity.";
            var builder = new CustomersRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the dimensions property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDimensionsNavCommand()
        {
            var command = new Command("dimensions");
            command.Description = "Provides operations to manage the dimensions property of the microsoft.graph.company entity.";
            var builder = new DimensionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the dimensionValues property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDimensionValuesNavCommand()
        {
            var command = new Command("dimension-values");
            command.Description = "Provides operations to manage the dimensionValues property of the microsoft.graph.company entity.";
            var builder = new DimensionValuesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the employees property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEmployeesNavCommand()
        {
            var command = new Command("employees");
            command.Description = "Provides operations to manage the employees property of the microsoft.graph.company entity.";
            var builder = new EmployeesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the generalLedgerEntries property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGeneralLedgerEntriesNavCommand()
        {
            var command = new Command("general-ledger-entries");
            command.Description = "Provides operations to manage the generalLedgerEntries property of the microsoft.graph.company entity.";
            var builder = new GeneralLedgerEntriesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Get companies from financials
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCommand()
        {
            var command = new Command("get");
            command.Description = "Get companies from financials";
            var companyIdOption = new Option<string>("--company-id", description: "The unique identifier of company") {
            };
            companyIdOption.IsRequired = true;
            command.AddOption(companyIdOption);
            var selectOption = new Option<string[]>("--select", description: "Select properties to be returned") {
                Arity = ArgumentArity.ZeroOrMore
            };
            selectOption.IsRequired = false;
            command.AddOption(selectOption);
            var expandOption = new Option<string[]>("--expand", description: "Expand related entities") {
                Arity = ArgumentArity.ZeroOrMore
            };
            expandOption.IsRequired = false;
            command.AddOption(expandOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var companyId = invocationContext.ParseResult.GetValueForOption(companyIdOption);
                var select = invocationContext.ParseResult.GetValueForOption(selectOption);
                var expand = invocationContext.ParseResult.GetValueForOption(expandOption);
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                    q.QueryParameters.Select = select;
                    q.QueryParameters.Expand = expand;
                });
                if (companyId is not null) requestInfo.PathParameters.Add("company%2Did", companyId);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Provides operations to manage the itemCategories property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildItemCategoriesNavCommand()
        {
            var command = new Command("item-categories");
            command.Description = "Provides operations to manage the itemCategories property of the microsoft.graph.company entity.";
            var builder = new ItemCategoriesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the items property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildItemsNavCommand()
        {
            var command = new Command("items");
            command.Description = "Provides operations to manage the items property of the microsoft.graph.company entity.";
            var builder = new ItemsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the journalLines property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildJournalLinesNavCommand()
        {
            var command = new Command("journal-lines");
            command.Description = "Provides operations to manage the journalLines property of the microsoft.graph.company entity.";
            var builder = new JournalLinesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the journals property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildJournalsNavCommand()
        {
            var command = new Command("journals");
            command.Description = "Provides operations to manage the journals property of the microsoft.graph.company entity.";
            var builder = new JournalsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the paymentMethods property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPaymentMethodsNavCommand()
        {
            var command = new Command("payment-methods");
            command.Description = "Provides operations to manage the paymentMethods property of the microsoft.graph.company entity.";
            var builder = new PaymentMethodsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the paymentTerms property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPaymentTermsNavCommand()
        {
            var command = new Command("payment-terms");
            command.Description = "Provides operations to manage the paymentTerms property of the microsoft.graph.company entity.";
            var builder = new PaymentTermsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the picture property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPictureNavCommand()
        {
            var command = new Command("picture");
            command.Description = "Provides operations to manage the picture property of the microsoft.graph.company entity.";
            var builder = new PictureRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the purchaseInvoiceLines property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPurchaseInvoiceLinesNavCommand()
        {
            var command = new Command("purchase-invoice-lines");
            command.Description = "Provides operations to manage the purchaseInvoiceLines property of the microsoft.graph.company entity.";
            var builder = new PurchaseInvoiceLinesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the purchaseInvoices property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPurchaseInvoicesNavCommand()
        {
            var command = new Command("purchase-invoices");
            command.Description = "Provides operations to manage the purchaseInvoices property of the microsoft.graph.company entity.";
            var builder = new PurchaseInvoicesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the salesCreditMemoLines property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSalesCreditMemoLinesNavCommand()
        {
            var command = new Command("sales-credit-memo-lines");
            command.Description = "Provides operations to manage the salesCreditMemoLines property of the microsoft.graph.company entity.";
            var builder = new SalesCreditMemoLinesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the salesCreditMemos property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSalesCreditMemosNavCommand()
        {
            var command = new Command("sales-credit-memos");
            command.Description = "Provides operations to manage the salesCreditMemos property of the microsoft.graph.company entity.";
            var builder = new SalesCreditMemosRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the salesInvoiceLines property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSalesInvoiceLinesNavCommand()
        {
            var command = new Command("sales-invoice-lines");
            command.Description = "Provides operations to manage the salesInvoiceLines property of the microsoft.graph.company entity.";
            var builder = new SalesInvoiceLinesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the salesInvoices property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSalesInvoicesNavCommand()
        {
            var command = new Command("sales-invoices");
            command.Description = "Provides operations to manage the salesInvoices property of the microsoft.graph.company entity.";
            var builder = new SalesInvoicesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the salesOrderLines property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSalesOrderLinesNavCommand()
        {
            var command = new Command("sales-order-lines");
            command.Description = "Provides operations to manage the salesOrderLines property of the microsoft.graph.company entity.";
            var builder = new SalesOrderLinesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the salesOrders property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSalesOrdersNavCommand()
        {
            var command = new Command("sales-orders");
            command.Description = "Provides operations to manage the salesOrders property of the microsoft.graph.company entity.";
            var builder = new SalesOrdersRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the salesQuoteLines property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSalesQuoteLinesNavCommand()
        {
            var command = new Command("sales-quote-lines");
            command.Description = "Provides operations to manage the salesQuoteLines property of the microsoft.graph.company entity.";
            var builder = new SalesQuoteLinesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the salesQuotes property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSalesQuotesNavCommand()
        {
            var command = new Command("sales-quotes");
            command.Description = "Provides operations to manage the salesQuotes property of the microsoft.graph.company entity.";
            var builder = new SalesQuotesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the shipmentMethods property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildShipmentMethodsNavCommand()
        {
            var command = new Command("shipment-methods");
            command.Description = "Provides operations to manage the shipmentMethods property of the microsoft.graph.company entity.";
            var builder = new ShipmentMethodsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the taxAreas property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTaxAreasNavCommand()
        {
            var command = new Command("tax-areas");
            command.Description = "Provides operations to manage the taxAreas property of the microsoft.graph.company entity.";
            var builder = new TaxAreasRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the taxGroups property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTaxGroupsNavCommand()
        {
            var command = new Command("tax-groups");
            command.Description = "Provides operations to manage the taxGroups property of the microsoft.graph.company entity.";
            var builder = new TaxGroupsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the unitsOfMeasure property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUnitsOfMeasureNavCommand()
        {
            var command = new Command("units-of-measure");
            command.Description = "Provides operations to manage the unitsOfMeasure property of the microsoft.graph.company entity.";
            var builder = new UnitsOfMeasureRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the vendors property of the microsoft.graph.company entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildVendorsNavCommand()
        {
            var command = new Command("vendors");
            command.Description = "Provides operations to manage the vendors property of the microsoft.graph.company entity.";
            var builder = new VendorsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="CompanyItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public CompanyItemRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/financials/companies/{company%2Did}{?%24expand,%24select}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="CompanyItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public CompanyItemRequestBuilder(string rawUrl) : base("{+baseurl}/financials/companies/{company%2Did}{?%24expand,%24select}", rawUrl)
        {
        }
        /// <summary>
        /// Get companies from financials
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<CompanyItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<CompanyItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Get companies from financials
        /// </summary>
        public class CompanyItemRequestBuilderGetQueryParameters 
        {
            /// <summary>Expand related entities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("%24expand")]
            public string[] Expand { get; set; }
#endif
            /// <summary>Select properties to be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24select")]
            public string[]? Select { get; set; }
#nullable restore
#else
            [QueryParameter("%24select")]
            public string[] Select { get; set; }
#endif
        }
    }
}
