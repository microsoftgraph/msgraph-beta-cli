// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    #pragma warning disable CS1591
    public class DirectSharingAbilities : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Indicates whether the current user can add existing guest recipients to this item using direct sharing.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SharingOperationStatus? AddExistingExternalUsers { get; set; }
#nullable restore
#else
        public SharingOperationStatus AddExistingExternalUsers { get; set; }
#endif
        /// <summary>Indicates whether the current user can add internal recipients to this item using direct sharing.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SharingOperationStatus? AddInternalUsers { get; set; }
#nullable restore
#else
        public SharingOperationStatus AddInternalUsers { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates whether the current user can add new guest recipients to this item using direct sharing.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SharingOperationStatus? AddNewExternalUsers { get; set; }
#nullable restore
#else
        public SharingOperationStatus AddNewExternalUsers { get; set; }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType { get; set; }
#nullable restore
#else
        public string OdataType { get; set; }
#endif
        /// <summary>Indicates whether the user querying this endpoint can request access for the user or on behalf of other users, after which, site admins, can approve or deny the creation of a potential sharing link.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SharingOperationStatus? RequestGrantAccess { get; set; }
#nullable restore
#else
        public SharingOperationStatus RequestGrantAccess { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="DirectSharingAbilities"/> and sets the default values.
        /// </summary>
        public DirectSharingAbilities()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="DirectSharingAbilities"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static DirectSharingAbilities CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new DirectSharingAbilities();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "addExistingExternalUsers", n => { AddExistingExternalUsers = n.GetObjectValue<SharingOperationStatus>(SharingOperationStatus.CreateFromDiscriminatorValue); } },
                { "addInternalUsers", n => { AddInternalUsers = n.GetObjectValue<SharingOperationStatus>(SharingOperationStatus.CreateFromDiscriminatorValue); } },
                { "addNewExternalUsers", n => { AddNewExternalUsers = n.GetObjectValue<SharingOperationStatus>(SharingOperationStatus.CreateFromDiscriminatorValue); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "requestGrantAccess", n => { RequestGrantAccess = n.GetObjectValue<SharingOperationStatus>(SharingOperationStatus.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<SharingOperationStatus>("addExistingExternalUsers", AddExistingExternalUsers);
            writer.WriteObjectValue<SharingOperationStatus>("addInternalUsers", AddInternalUsers);
            writer.WriteObjectValue<SharingOperationStatus>("addNewExternalUsers", AddNewExternalUsers);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteObjectValue<SharingOperationStatus>("requestGrantAccess", RequestGrantAccess);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
