// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models.Networkaccess
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Connection : global::ApiSdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The agentVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AgentVersion { get; set; }
#nullable restore
#else
        public string AgentVersion { get; set; }
#endif
        /// <summary>The applicationSnapshot property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.Networkaccess.ApplicationSnapshot? ApplicationSnapshot { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.Networkaccess.ApplicationSnapshot ApplicationSnapshot { get; set; }
#endif
        /// <summary>The createdDateTime property</summary>
        public DateTimeOffset? CreatedDateTime { get; set; }
        /// <summary>The destinationFqdn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DestinationFqdn { get; set; }
#nullable restore
#else
        public string DestinationFqdn { get; set; }
#endif
        /// <summary>The destinationIp property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DestinationIp { get; set; }
#nullable restore
#else
        public string DestinationIp { get; set; }
#endif
        /// <summary>The destinationPort property</summary>
        public int? DestinationPort { get; set; }
        /// <summary>The deviceCategory property</summary>
        public global::ApiSdk.Models.Networkaccess.DeviceCategory? DeviceCategory { get; set; }
        /// <summary>The deviceId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceId { get; set; }
#nullable restore
#else
        public string DeviceId { get; set; }
#endif
        /// <summary>The deviceOperatingSystem property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceOperatingSystem { get; set; }
#nullable restore
#else
        public string DeviceOperatingSystem { get; set; }
#endif
        /// <summary>The deviceOperatingSystemVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceOperatingSystemVersion { get; set; }
#nullable restore
#else
        public string DeviceOperatingSystemVersion { get; set; }
#endif
        /// <summary>The endDateTime property</summary>
        public DateTimeOffset? EndDateTime { get; set; }
        /// <summary>The initiatingProcessName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InitiatingProcessName { get; set; }
#nullable restore
#else
        public string InitiatingProcessName { get; set; }
#endif
        /// <summary>The lastUpdateDateTime property</summary>
        public DateTimeOffset? LastUpdateDateTime { get; set; }
        /// <summary>The networkProtocol property</summary>
        public global::ApiSdk.Models.Networkaccess.NetworkingProtocol? NetworkProtocol { get; set; }
        /// <summary>The popProcessingRegion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PopProcessingRegion { get; set; }
#nullable restore
#else
        public string PopProcessingRegion { get; set; }
#endif
        /// <summary>The privateAccessDetails property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.Networkaccess.PrivateAccessDetails? PrivateAccessDetails { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.Networkaccess.PrivateAccessDetails PrivateAccessDetails { get; set; }
#endif
        /// <summary>The receivedBytes property</summary>
        public long? ReceivedBytes { get; set; }
        /// <summary>The sentBytes property</summary>
        public long? SentBytes { get; set; }
        /// <summary>The sourceIp property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceIp { get; set; }
#nullable restore
#else
        public string SourceIp { get; set; }
#endif
        /// <summary>The sourcePort property</summary>
        public int? SourcePort { get; set; }
        /// <summary>The status property</summary>
        public global::ApiSdk.Models.Networkaccess.ConnectionStatus? Status { get; set; }
        /// <summary>The tenantId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantId { get; set; }
#nullable restore
#else
        public string TenantId { get; set; }
#endif
        /// <summary>The trafficType property</summary>
        public global::ApiSdk.Models.Networkaccess.TrafficType? TrafficType { get; set; }
        /// <summary>The transactionBlockCount property</summary>
        public int? TransactionBlockCount { get; set; }
        /// <summary>The transactionCount property</summary>
        public int? TransactionCount { get; set; }
        /// <summary>The transportProtocol property</summary>
        public global::ApiSdk.Models.Networkaccess.NetworkingProtocol? TransportProtocol { get; set; }
        /// <summary>The userId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>The userPrincipalName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserPrincipalName { get; set; }
#nullable restore
#else
        public string UserPrincipalName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.Networkaccess.Connection"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.Networkaccess.Connection CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.Networkaccess.Connection();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "agentVersion", n => { AgentVersion = n.GetStringValue(); } },
                { "applicationSnapshot", n => { ApplicationSnapshot = n.GetObjectValue<global::ApiSdk.Models.Networkaccess.ApplicationSnapshot>(global::ApiSdk.Models.Networkaccess.ApplicationSnapshot.CreateFromDiscriminatorValue); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "destinationFqdn", n => { DestinationFqdn = n.GetStringValue(); } },
                { "destinationIp", n => { DestinationIp = n.GetStringValue(); } },
                { "destinationPort", n => { DestinationPort = n.GetIntValue(); } },
                { "deviceCategory", n => { DeviceCategory = n.GetEnumValue<global::ApiSdk.Models.Networkaccess.DeviceCategory>(); } },
                { "deviceId", n => { DeviceId = n.GetStringValue(); } },
                { "deviceOperatingSystem", n => { DeviceOperatingSystem = n.GetStringValue(); } },
                { "deviceOperatingSystemVersion", n => { DeviceOperatingSystemVersion = n.GetStringValue(); } },
                { "endDateTime", n => { EndDateTime = n.GetDateTimeOffsetValue(); } },
                { "initiatingProcessName", n => { InitiatingProcessName = n.GetStringValue(); } },
                { "lastUpdateDateTime", n => { LastUpdateDateTime = n.GetDateTimeOffsetValue(); } },
                { "networkProtocol", n => { NetworkProtocol = n.GetEnumValue<global::ApiSdk.Models.Networkaccess.NetworkingProtocol>(); } },
                { "popProcessingRegion", n => { PopProcessingRegion = n.GetStringValue(); } },
                { "privateAccessDetails", n => { PrivateAccessDetails = n.GetObjectValue<global::ApiSdk.Models.Networkaccess.PrivateAccessDetails>(global::ApiSdk.Models.Networkaccess.PrivateAccessDetails.CreateFromDiscriminatorValue); } },
                { "receivedBytes", n => { ReceivedBytes = n.GetLongValue(); } },
                { "sentBytes", n => { SentBytes = n.GetLongValue(); } },
                { "sourceIp", n => { SourceIp = n.GetStringValue(); } },
                { "sourcePort", n => { SourcePort = n.GetIntValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::ApiSdk.Models.Networkaccess.ConnectionStatus>(); } },
                { "tenantId", n => { TenantId = n.GetStringValue(); } },
                { "trafficType", n => { TrafficType = n.GetEnumValue<global::ApiSdk.Models.Networkaccess.TrafficType>(); } },
                { "transactionBlockCount", n => { TransactionBlockCount = n.GetIntValue(); } },
                { "transactionCount", n => { TransactionCount = n.GetIntValue(); } },
                { "transportProtocol", n => { TransportProtocol = n.GetEnumValue<global::ApiSdk.Models.Networkaccess.NetworkingProtocol>(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "userPrincipalName", n => { UserPrincipalName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("agentVersion", AgentVersion);
            writer.WriteObjectValue<global::ApiSdk.Models.Networkaccess.ApplicationSnapshot>("applicationSnapshot", ApplicationSnapshot);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteStringValue("destinationFqdn", DestinationFqdn);
            writer.WriteStringValue("destinationIp", DestinationIp);
            writer.WriteIntValue("destinationPort", DestinationPort);
            writer.WriteEnumValue<global::ApiSdk.Models.Networkaccess.DeviceCategory>("deviceCategory", DeviceCategory);
            writer.WriteStringValue("deviceId", DeviceId);
            writer.WriteStringValue("deviceOperatingSystem", DeviceOperatingSystem);
            writer.WriteStringValue("deviceOperatingSystemVersion", DeviceOperatingSystemVersion);
            writer.WriteDateTimeOffsetValue("endDateTime", EndDateTime);
            writer.WriteStringValue("initiatingProcessName", InitiatingProcessName);
            writer.WriteDateTimeOffsetValue("lastUpdateDateTime", LastUpdateDateTime);
            writer.WriteEnumValue<global::ApiSdk.Models.Networkaccess.NetworkingProtocol>("networkProtocol", NetworkProtocol);
            writer.WriteStringValue("popProcessingRegion", PopProcessingRegion);
            writer.WriteObjectValue<global::ApiSdk.Models.Networkaccess.PrivateAccessDetails>("privateAccessDetails", PrivateAccessDetails);
            writer.WriteLongValue("receivedBytes", ReceivedBytes);
            writer.WriteLongValue("sentBytes", SentBytes);
            writer.WriteStringValue("sourceIp", SourceIp);
            writer.WriteIntValue("sourcePort", SourcePort);
            writer.WriteEnumValue<global::ApiSdk.Models.Networkaccess.ConnectionStatus>("status", Status);
            writer.WriteStringValue("tenantId", TenantId);
            writer.WriteEnumValue<global::ApiSdk.Models.Networkaccess.TrafficType>("trafficType", TrafficType);
            writer.WriteIntValue("transactionBlockCount", TransactionBlockCount);
            writer.WriteIntValue("transactionCount", TransactionCount);
            writer.WriteEnumValue<global::ApiSdk.Models.Networkaccess.NetworkingProtocol>("transportProtocol", TransportProtocol);
            writer.WriteStringValue("userId", UserId);
            writer.WriteStringValue("userPrincipalName", UserPrincipalName);
        }
    }
}
#pragma warning restore CS0618
