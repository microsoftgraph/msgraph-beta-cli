// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models.Security
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class EdiscoveryHoldPolicy : global::ApiSdk.Models.Security.PolicyBase, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>KQL query that specifies content to be held in the specified locations. To learn more, see Keyword queries and search conditions for Content Search and eDiscovery.  To hold all content in the specified locations, leave contentQuery blank.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContentQuery { get; set; }
#nullable restore
#else
        public string ContentQuery { get; set; }
#endif
        /// <summary>Lists any errors that happened while placing the hold.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Errors { get; set; }
#nullable restore
#else
        public List<string> Errors { get; set; }
#endif
        /// <summary>Indicates whether the hold is enabled and actively holding content.</summary>
        public bool? IsEnabled { get; set; }
        /// <summary>Data sources that represent SharePoint sites.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.Security.SiteSource>? SiteSources { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.Security.SiteSource> SiteSources { get; set; }
#endif
        /// <summary>Data sources that represent Exchange mailboxes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.Security.UserSource>? UserSources { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.Security.UserSource> UserSources { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.Security.EdiscoveryHoldPolicy"/> and sets the default values.
        /// </summary>
        public EdiscoveryHoldPolicy() : base()
        {
            OdataType = "#microsoft.graph.security.ediscoveryHoldPolicy";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.Security.EdiscoveryHoldPolicy"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.Security.EdiscoveryHoldPolicy CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.Security.EdiscoveryHoldPolicy();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "contentQuery", n => { ContentQuery = n.GetStringValue(); } },
                { "errors", n => { Errors = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "isEnabled", n => { IsEnabled = n.GetBoolValue(); } },
                { "siteSources", n => { SiteSources = n.GetCollectionOfObjectValues<global::ApiSdk.Models.Security.SiteSource>(global::ApiSdk.Models.Security.SiteSource.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userSources", n => { UserSources = n.GetCollectionOfObjectValues<global::ApiSdk.Models.Security.UserSource>(global::ApiSdk.Models.Security.UserSource.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("contentQuery", ContentQuery);
            writer.WriteCollectionOfPrimitiveValues<string>("errors", Errors);
            writer.WriteBoolValue("isEnabled", IsEnabled);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.Security.SiteSource>("siteSources", SiteSources);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.Security.UserSource>("userSources", UserSources);
        }
    }
}
#pragma warning restore CS0618
