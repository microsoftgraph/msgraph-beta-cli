// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Entity that represents a defined collection of device settings
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DeviceManagementTemplate : global::ApiSdk.Models.Entity, IParsable
    {
        /// <summary>Collection of setting categories within the template</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.DeviceManagementTemplateSettingCategory>? Categories { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.DeviceManagementTemplateSettingCategory> Categories { get; set; }
#endif
        /// <summary>The template&apos;s description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The template&apos;s display name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Number of Intents created from this template.</summary>
        public int? IntentCount { get; set; }
        /// <summary>The template is deprecated or not. Intents cannot be created from a deprecated template.</summary>
        public bool? IsDeprecated { get; set; }
        /// <summary>Collection of templates this template can migrate to</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.DeviceManagementTemplate>? MigratableTo { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.DeviceManagementTemplate> MigratableTo { get; set; }
#endif
        /// <summary>Supported platform types for policies.</summary>
        public global::ApiSdk.Models.PolicyPlatformType? PlatformType { get; set; }
        /// <summary>When the template was published</summary>
        public DateTimeOffset? PublishedDateTime { get; set; }
        /// <summary>Collection of all settings this template has</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.DeviceManagementSettingInstance>? Settings { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.DeviceManagementSettingInstance> Settings { get; set; }
#endif
        /// <summary>Template subtype</summary>
        public global::ApiSdk.Models.DeviceManagementTemplateSubtype? TemplateSubtype { get; set; }
        /// <summary>Template type</summary>
        public global::ApiSdk.Models.DeviceManagementTemplateType? TemplateType { get; set; }
        /// <summary>The template&apos;s version information</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VersionInfo { get; set; }
#nullable restore
#else
        public string VersionInfo { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.DeviceManagementTemplate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.DeviceManagementTemplate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.securityBaselineTemplate" => new global::ApiSdk.Models.SecurityBaselineTemplate(),
                _ => new global::ApiSdk.Models.DeviceManagementTemplate(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "categories", n => { Categories = n.GetCollectionOfObjectValues<global::ApiSdk.Models.DeviceManagementTemplateSettingCategory>(global::ApiSdk.Models.DeviceManagementTemplateSettingCategory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "intentCount", n => { IntentCount = n.GetIntValue(); } },
                { "isDeprecated", n => { IsDeprecated = n.GetBoolValue(); } },
                { "migratableTo", n => { MigratableTo = n.GetCollectionOfObjectValues<global::ApiSdk.Models.DeviceManagementTemplate>(global::ApiSdk.Models.DeviceManagementTemplate.CreateFromDiscriminatorValue)?.AsList(); } },
                { "platformType", n => { PlatformType = n.GetEnumValue<global::ApiSdk.Models.PolicyPlatformType>(); } },
                { "publishedDateTime", n => { PublishedDateTime = n.GetDateTimeOffsetValue(); } },
                { "settings", n => { Settings = n.GetCollectionOfObjectValues<global::ApiSdk.Models.DeviceManagementSettingInstance>(global::ApiSdk.Models.DeviceManagementSettingInstance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "templateSubtype", n => { TemplateSubtype = n.GetEnumValue<global::ApiSdk.Models.DeviceManagementTemplateSubtype>(); } },
                { "templateType", n => { TemplateType = n.GetEnumValue<global::ApiSdk.Models.DeviceManagementTemplateType>(); } },
                { "versionInfo", n => { VersionInfo = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.DeviceManagementTemplateSettingCategory>("categories", Categories);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteIntValue("intentCount", IntentCount);
            writer.WriteBoolValue("isDeprecated", IsDeprecated);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.DeviceManagementTemplate>("migratableTo", MigratableTo);
            writer.WriteEnumValue<global::ApiSdk.Models.PolicyPlatformType>("platformType", PlatformType);
            writer.WriteDateTimeOffsetValue("publishedDateTime", PublishedDateTime);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.DeviceManagementSettingInstance>("settings", Settings);
            writer.WriteEnumValue<global::ApiSdk.Models.DeviceManagementTemplateSubtype>("templateSubtype", TemplateSubtype);
            writer.WriteEnumValue<global::ApiSdk.Models.DeviceManagementTemplateType>("templateType", TemplateType);
            writer.WriteStringValue("versionInfo", VersionInfo);
        }
    }
}
#pragma warning restore CS0618
