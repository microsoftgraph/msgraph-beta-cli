// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// iOS Device Features Configuration Profile.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class IosDeviceFeaturesConfiguration : global::ApiSdk.Models.AppleDeviceFeaturesConfigurationBase, IParsable
    {
        /// <summary>Asset tag information for the device, displayed on the login window and lock screen.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssetTagTemplate { get; set; }
#nullable restore
#else
        public string AssetTagTemplate { get; set; }
#endif
        /// <summary>Gets or sets iOS Web Content Filter settings, supervised mode only</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.IosWebContentFilterBase? ContentFilterSettings { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.IosWebContentFilterBase ContentFilterSettings { get; set; }
#endif
        /// <summary>A list of app and folders to appear on the Home Screen Dock. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.IosHomeScreenItem>? HomeScreenDockIcons { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.IosHomeScreenItem> HomeScreenDockIcons { get; set; }
#endif
        /// <summary>Gets or sets the number of rows to render when configuring iOS home screen layout settings. If this value is configured, homeScreenGridWidth must be configured as well.</summary>
        public int? HomeScreenGridHeight { get; set; }
        /// <summary>Gets or sets the number of columns to render when configuring iOS home screen layout settings. If this value is configured, homeScreenGridHeight must be configured as well.</summary>
        public int? HomeScreenGridWidth { get; set; }
        /// <summary>A list of pages on the Home Screen. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.IosHomeScreenPage>? HomeScreenPages { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.IosHomeScreenPage> HomeScreenPages { get; set; }
#endif
        /// <summary>Identity Certificate for the renewal of Kerberos ticket used in single sign-on settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.IosCertificateProfileBase? IdentityCertificateForClientAuthentication { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.IosCertificateProfileBase IdentityCertificateForClientAuthentication { get; set; }
#endif
        /// <summary>Gets or sets a single sign-on extension profile.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.IosSingleSignOnExtension? IosSingleSignOnExtension { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.IosSingleSignOnExtension IosSingleSignOnExtension { get; set; }
#endif
        /// <summary>A footnote displayed on the login window and lock screen. Available in iOS 9.3.1 and later.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LockScreenFootnote { get; set; }
#nullable restore
#else
        public string LockScreenFootnote { get; set; }
#endif
        /// <summary>Notification settings for each bundle id. Applicable to devices in supervised mode only (iOS 9.3 and later). This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.IosNotificationSettings>? NotificationSettings { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.IosNotificationSettings> NotificationSettings { get; set; }
#endif
        /// <summary>Gets or sets a single sign-on extension profile. Deprecated: use IOSSingleSignOnExtension instead.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.SingleSignOnExtension? SingleSignOnExtension { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.SingleSignOnExtension SingleSignOnExtension { get; set; }
#endif
        /// <summary>PKINIT Certificate for the authentication with single sign-on extension settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.IosCertificateProfileBase? SingleSignOnExtensionPkinitCertificate { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.IosCertificateProfileBase SingleSignOnExtensionPkinitCertificate { get; set; }
#endif
        /// <summary>The Kerberos login settings that enable apps on receiving devices to authenticate smoothly.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.IosSingleSignOnSettings? SingleSignOnSettings { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.IosSingleSignOnSettings SingleSignOnSettings { get; set; }
#endif
        /// <summary>An enum type for wallpaper display location specifier.</summary>
        public global::ApiSdk.Models.IosWallpaperDisplayLocation? WallpaperDisplayLocation { get; set; }
        /// <summary>A wallpaper image must be in either PNG or JPEG format. It requires a supervised device with iOS 8 or later version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.MimeContent? WallpaperImage { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.MimeContent WallpaperImage { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.IosDeviceFeaturesConfiguration"/> and sets the default values.
        /// </summary>
        public IosDeviceFeaturesConfiguration() : base()
        {
            OdataType = "#microsoft.graph.iosDeviceFeaturesConfiguration";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.IosDeviceFeaturesConfiguration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.IosDeviceFeaturesConfiguration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.IosDeviceFeaturesConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "assetTagTemplate", n => { AssetTagTemplate = n.GetStringValue(); } },
                { "contentFilterSettings", n => { ContentFilterSettings = n.GetObjectValue<global::ApiSdk.Models.IosWebContentFilterBase>(global::ApiSdk.Models.IosWebContentFilterBase.CreateFromDiscriminatorValue); } },
                { "homeScreenDockIcons", n => { HomeScreenDockIcons = n.GetCollectionOfObjectValues<global::ApiSdk.Models.IosHomeScreenItem>(global::ApiSdk.Models.IosHomeScreenItem.CreateFromDiscriminatorValue)?.AsList(); } },
                { "homeScreenGridHeight", n => { HomeScreenGridHeight = n.GetIntValue(); } },
                { "homeScreenGridWidth", n => { HomeScreenGridWidth = n.GetIntValue(); } },
                { "homeScreenPages", n => { HomeScreenPages = n.GetCollectionOfObjectValues<global::ApiSdk.Models.IosHomeScreenPage>(global::ApiSdk.Models.IosHomeScreenPage.CreateFromDiscriminatorValue)?.AsList(); } },
                { "identityCertificateForClientAuthentication", n => { IdentityCertificateForClientAuthentication = n.GetObjectValue<global::ApiSdk.Models.IosCertificateProfileBase>(global::ApiSdk.Models.IosCertificateProfileBase.CreateFromDiscriminatorValue); } },
                { "iosSingleSignOnExtension", n => { IosSingleSignOnExtension = n.GetObjectValue<global::ApiSdk.Models.IosSingleSignOnExtension>(global::ApiSdk.Models.IosSingleSignOnExtension.CreateFromDiscriminatorValue); } },
                { "lockScreenFootnote", n => { LockScreenFootnote = n.GetStringValue(); } },
                { "notificationSettings", n => { NotificationSettings = n.GetCollectionOfObjectValues<global::ApiSdk.Models.IosNotificationSettings>(global::ApiSdk.Models.IosNotificationSettings.CreateFromDiscriminatorValue)?.AsList(); } },
                { "singleSignOnExtension", n => { SingleSignOnExtension = n.GetObjectValue<global::ApiSdk.Models.SingleSignOnExtension>(global::ApiSdk.Models.SingleSignOnExtension.CreateFromDiscriminatorValue); } },
                { "singleSignOnExtensionPkinitCertificate", n => { SingleSignOnExtensionPkinitCertificate = n.GetObjectValue<global::ApiSdk.Models.IosCertificateProfileBase>(global::ApiSdk.Models.IosCertificateProfileBase.CreateFromDiscriminatorValue); } },
                { "singleSignOnSettings", n => { SingleSignOnSettings = n.GetObjectValue<global::ApiSdk.Models.IosSingleSignOnSettings>(global::ApiSdk.Models.IosSingleSignOnSettings.CreateFromDiscriminatorValue); } },
                { "wallpaperDisplayLocation", n => { WallpaperDisplayLocation = n.GetEnumValue<global::ApiSdk.Models.IosWallpaperDisplayLocation>(); } },
                { "wallpaperImage", n => { WallpaperImage = n.GetObjectValue<global::ApiSdk.Models.MimeContent>(global::ApiSdk.Models.MimeContent.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("assetTagTemplate", AssetTagTemplate);
            writer.WriteObjectValue<global::ApiSdk.Models.IosWebContentFilterBase>("contentFilterSettings", ContentFilterSettings);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.IosHomeScreenItem>("homeScreenDockIcons", HomeScreenDockIcons);
            writer.WriteIntValue("homeScreenGridHeight", HomeScreenGridHeight);
            writer.WriteIntValue("homeScreenGridWidth", HomeScreenGridWidth);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.IosHomeScreenPage>("homeScreenPages", HomeScreenPages);
            writer.WriteObjectValue<global::ApiSdk.Models.IosCertificateProfileBase>("identityCertificateForClientAuthentication", IdentityCertificateForClientAuthentication);
            writer.WriteObjectValue<global::ApiSdk.Models.IosSingleSignOnExtension>("iosSingleSignOnExtension", IosSingleSignOnExtension);
            writer.WriteStringValue("lockScreenFootnote", LockScreenFootnote);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.IosNotificationSettings>("notificationSettings", NotificationSettings);
            writer.WriteObjectValue<global::ApiSdk.Models.SingleSignOnExtension>("singleSignOnExtension", SingleSignOnExtension);
            writer.WriteObjectValue<global::ApiSdk.Models.IosCertificateProfileBase>("singleSignOnExtensionPkinitCertificate", SingleSignOnExtensionPkinitCertificate);
            writer.WriteObjectValue<global::ApiSdk.Models.IosSingleSignOnSettings>("singleSignOnSettings", SingleSignOnSettings);
            writer.WriteEnumValue<global::ApiSdk.Models.IosWallpaperDisplayLocation>("wallpaperDisplayLocation", WallpaperDisplayLocation);
            writer.WriteObjectValue<global::ApiSdk.Models.MimeContent>("wallpaperImage", WallpaperImage);
        }
    }
}
#pragma warning restore CS0618
