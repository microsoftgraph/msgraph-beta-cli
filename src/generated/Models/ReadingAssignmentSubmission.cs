// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ReadingAssignmentSubmission : global::ApiSdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Accuracy score of the reading progress.</summary>
        public double? AccuracyScore { get; set; }
        /// <summary>Indicates whether the submission is an attempt by the student or a miscue edit done by the educator. The possible values are Attempt and EditMiscue.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Action { get; set; }
#nullable restore
#else
        public string Action { get; set; }
#endif
        /// <summary>ID of the assignment with which this submission is associated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssignmentId { get; set; }
#nullable restore
#else
        public string AssignmentId { get; set; }
#endif
        /// <summary>List of words that the student found challenging during the reading session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.ChallengingWord>? ChallengingWords { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.ChallengingWord> ChallengingWords { get; set; }
#endif
        /// <summary>ID of the class this reading progress is associated with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClassId { get; set; }
#nullable restore
#else
        public string ClassId { get; set; }
#endif
        /// <summary>Insertions of the reading progress.</summary>
        public long? Insertions { get; set; }
        /// <summary>Mispronunciations of the reading progress.</summary>
        public long? Mispronunciations { get; set; }
        /// <summary>Number of exclamation marks missed in the reading passage.</summary>
        public long? MissedExclamationMarks { get; set; }
        /// <summary>Number of periods missed in the reading passage.</summary>
        public long? MissedPeriods { get; set; }
        /// <summary>Number of question marks missed in the reading passage.</summary>
        public long? MissedQuestionMarks { get; set; }
        /// <summary>Number of short words missed during the reading session.</summary>
        public long? MissedShorts { get; set; }
        /// <summary>Score that reflects the student&apos;s use of intonation and expression. Lower scores indicate more monotone reading.</summary>
        public double? MonotoneScore { get; set; }
        /// <summary>Omissions of the reading progress.</summary>
        public long? Omissions { get; set; }
        /// <summary>Number of times the student repeated words or phrases during the reading session.</summary>
        public long? Repetitions { get; set; }
        /// <summary>Number of times the student self-corrected their reading errors.</summary>
        public long? SelfCorrections { get; set; }
        /// <summary>ID of the user this reading progress is associated with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StudentId { get; set; }
#nullable restore
#else
        public string StudentId { get; set; }
#endif
        /// <summary>Date and time of the submission this reading progress is associated with. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? SubmissionDateTime { get; set; }
        /// <summary>ID of the submission this reading progress is associated with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubmissionId { get; set; }
#nullable restore
#else
        public string SubmissionId { get; set; }
#endif
        /// <summary>Number of unexpected pauses made during the reading session.</summary>
        public long? UnexpectedPauses { get; set; }
        /// <summary>Words count of the reading progress.</summary>
        public long? WordCount { get; set; }
        /// <summary>Words per minute of the reading progress.</summary>
        public double? WordsPerMinute { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.ReadingAssignmentSubmission"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.ReadingAssignmentSubmission CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.ReadingAssignmentSubmission();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "accuracyScore", n => { AccuracyScore = n.GetDoubleValue(); } },
                { "action", n => { Action = n.GetStringValue(); } },
                { "assignmentId", n => { AssignmentId = n.GetStringValue(); } },
                { "challengingWords", n => { ChallengingWords = n.GetCollectionOfObjectValues<global::ApiSdk.Models.ChallengingWord>(global::ApiSdk.Models.ChallengingWord.CreateFromDiscriminatorValue)?.AsList(); } },
                { "classId", n => { ClassId = n.GetStringValue(); } },
                { "insertions", n => { Insertions = n.GetLongValue(); } },
                { "mispronunciations", n => { Mispronunciations = n.GetLongValue(); } },
                { "missedExclamationMarks", n => { MissedExclamationMarks = n.GetLongValue(); } },
                { "missedPeriods", n => { MissedPeriods = n.GetLongValue(); } },
                { "missedQuestionMarks", n => { MissedQuestionMarks = n.GetLongValue(); } },
                { "missedShorts", n => { MissedShorts = n.GetLongValue(); } },
                { "monotoneScore", n => { MonotoneScore = n.GetDoubleValue(); } },
                { "omissions", n => { Omissions = n.GetLongValue(); } },
                { "repetitions", n => { Repetitions = n.GetLongValue(); } },
                { "selfCorrections", n => { SelfCorrections = n.GetLongValue(); } },
                { "studentId", n => { StudentId = n.GetStringValue(); } },
                { "submissionDateTime", n => { SubmissionDateTime = n.GetDateTimeOffsetValue(); } },
                { "submissionId", n => { SubmissionId = n.GetStringValue(); } },
                { "unexpectedPauses", n => { UnexpectedPauses = n.GetLongValue(); } },
                { "wordCount", n => { WordCount = n.GetLongValue(); } },
                { "wordsPerMinute", n => { WordsPerMinute = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteDoubleValue("accuracyScore", AccuracyScore);
            writer.WriteStringValue("action", Action);
            writer.WriteStringValue("assignmentId", AssignmentId);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.ChallengingWord>("challengingWords", ChallengingWords);
            writer.WriteStringValue("classId", ClassId);
            writer.WriteLongValue("insertions", Insertions);
            writer.WriteLongValue("mispronunciations", Mispronunciations);
            writer.WriteLongValue("missedExclamationMarks", MissedExclamationMarks);
            writer.WriteLongValue("missedPeriods", MissedPeriods);
            writer.WriteLongValue("missedQuestionMarks", MissedQuestionMarks);
            writer.WriteLongValue("missedShorts", MissedShorts);
            writer.WriteDoubleValue("monotoneScore", MonotoneScore);
            writer.WriteLongValue("omissions", Omissions);
            writer.WriteLongValue("repetitions", Repetitions);
            writer.WriteLongValue("selfCorrections", SelfCorrections);
            writer.WriteStringValue("studentId", StudentId);
            writer.WriteDateTimeOffsetValue("submissionDateTime", SubmissionDateTime);
            writer.WriteStringValue("submissionId", SubmissionId);
            writer.WriteLongValue("unexpectedPauses", UnexpectedPauses);
            writer.WriteLongValue("wordCount", WordCount);
            writer.WriteDoubleValue("wordsPerMinute", WordsPerMinute);
        }
    }
}
#pragma warning restore CS0618
