// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// MacOS wired network configuration profile.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MacOSWiredNetworkConfiguration : global::ApiSdk.Models.DeviceConfiguration, IParsable
    {
        /// <summary>Authentication Method when EAP Type is configured to PEAP or EAP-TTLS. Possible values are: certificate, usernameAndPassword, derivedCredential.</summary>
        public global::ApiSdk.Models.WiFiAuthenticationMethod? AuthenticationMethod { get; set; }
        /// <summary>Indicates the deployment channel type used to deploy the configuration profile. Possible values are deviceChannel, userChannel. Possible values are: deviceChannel, userChannel, unknownFutureValue.</summary>
        public global::ApiSdk.Models.AppleDeploymentChannel? DeploymentChannel { get; set; }
        /// <summary>EAP-FAST Configuration Option when EAP-FAST is the selected EAP Type. Possible values are: noProtectedAccessCredential, useProtectedAccessCredential, useProtectedAccessCredentialAndProvision, useProtectedAccessCredentialAndProvisionAnonymously.</summary>
        public global::ApiSdk.Models.EapFastConfiguration? EapFastConfiguration { get; set; }
        /// <summary>Extensible Authentication Protocol (EAP) configuration types.</summary>
        public global::ApiSdk.Models.EapType? EapType { get; set; }
        /// <summary>Enable identity privacy (Outer Identity) when EAP Type is configured to EAP-TTLS, EAP-FAST or PEAP. This property masks usernames with the text you enter. For example, if you use &apos;anonymous&apos;, each user that authenticates with this wired network using their real username is displayed as &apos;anonymous&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EnableOuterIdentityPrivacy { get; set; }
#nullable restore
#else
        public string EnableOuterIdentityPrivacy { get; set; }
#endif
        /// <summary>Identity Certificate for client authentication when EAP Type is configured to EAP-TLS, EAP-TTLS (with Certificate Authentication), or PEAP (with Certificate Authentication).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.MacOSCertificateProfileBase? IdentityCertificateForClientAuthentication { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.MacOSCertificateProfileBase IdentityCertificateForClientAuthentication { get; set; }
#endif
        /// <summary>Apple network interface type.</summary>
        public global::ApiSdk.Models.WiredNetworkInterface? NetworkInterface { get; set; }
        /// <summary>Network Name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetworkName { get; set; }
#nullable restore
#else
        public string NetworkName { get; set; }
#endif
        /// <summary>Non-EAP Method for Authentication (Inner Identity) when EAP Type is EAP-TTLS and Authenticationmethod is Username and Password. Possible values are: unencryptedPassword, challengeHandshakeAuthenticationProtocol, microsoftChap, microsoftChapVersionTwo.</summary>
        public global::ApiSdk.Models.NonEapAuthenticationMethodForEapTtlsType? NonEapAuthenticationMethodForEapTtls { get; set; }
        /// <summary>Trusted Root Certificate for Server Validation when EAP Type is configured to EAP-TLS/TTLS/FAST or PEAP.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.MacOSTrustedRootCertificate? RootCertificateForServerValidation { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.MacOSTrustedRootCertificate RootCertificateForServerValidation { get; set; }
#endif
        /// <summary>Trusted server certificate names when EAP Type is configured to EAP-TLS/TTLS/FAST or PEAP. This is the common name used in the certificates issued by your trusted certificate authority (CA). If you provide this information, you can bypass the dynamic trust dialog that is displayed on end users devices when they connect to this wired network.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? TrustedServerCertificateNames { get; set; }
#nullable restore
#else
        public List<string> TrustedServerCertificateNames { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.MacOSWiredNetworkConfiguration"/> and sets the default values.
        /// </summary>
        public MacOSWiredNetworkConfiguration() : base()
        {
            OdataType = "#microsoft.graph.macOSWiredNetworkConfiguration";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.MacOSWiredNetworkConfiguration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.MacOSWiredNetworkConfiguration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.MacOSWiredNetworkConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "authenticationMethod", n => { AuthenticationMethod = n.GetEnumValue<global::ApiSdk.Models.WiFiAuthenticationMethod>(); } },
                { "deploymentChannel", n => { DeploymentChannel = n.GetEnumValue<global::ApiSdk.Models.AppleDeploymentChannel>(); } },
                { "eapFastConfiguration", n => { EapFastConfiguration = n.GetEnumValue<global::ApiSdk.Models.EapFastConfiguration>(); } },
                { "eapType", n => { EapType = n.GetEnumValue<global::ApiSdk.Models.EapType>(); } },
                { "enableOuterIdentityPrivacy", n => { EnableOuterIdentityPrivacy = n.GetStringValue(); } },
                { "identityCertificateForClientAuthentication", n => { IdentityCertificateForClientAuthentication = n.GetObjectValue<global::ApiSdk.Models.MacOSCertificateProfileBase>(global::ApiSdk.Models.MacOSCertificateProfileBase.CreateFromDiscriminatorValue); } },
                { "networkInterface", n => { NetworkInterface = n.GetEnumValue<global::ApiSdk.Models.WiredNetworkInterface>(); } },
                { "networkName", n => { NetworkName = n.GetStringValue(); } },
                { "nonEapAuthenticationMethodForEapTtls", n => { NonEapAuthenticationMethodForEapTtls = n.GetEnumValue<global::ApiSdk.Models.NonEapAuthenticationMethodForEapTtlsType>(); } },
                { "rootCertificateForServerValidation", n => { RootCertificateForServerValidation = n.GetObjectValue<global::ApiSdk.Models.MacOSTrustedRootCertificate>(global::ApiSdk.Models.MacOSTrustedRootCertificate.CreateFromDiscriminatorValue); } },
                { "trustedServerCertificateNames", n => { TrustedServerCertificateNames = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::ApiSdk.Models.WiFiAuthenticationMethod>("authenticationMethod", AuthenticationMethod);
            writer.WriteEnumValue<global::ApiSdk.Models.AppleDeploymentChannel>("deploymentChannel", DeploymentChannel);
            writer.WriteEnumValue<global::ApiSdk.Models.EapFastConfiguration>("eapFastConfiguration", EapFastConfiguration);
            writer.WriteEnumValue<global::ApiSdk.Models.EapType>("eapType", EapType);
            writer.WriteStringValue("enableOuterIdentityPrivacy", EnableOuterIdentityPrivacy);
            writer.WriteObjectValue<global::ApiSdk.Models.MacOSCertificateProfileBase>("identityCertificateForClientAuthentication", IdentityCertificateForClientAuthentication);
            writer.WriteEnumValue<global::ApiSdk.Models.WiredNetworkInterface>("networkInterface", NetworkInterface);
            writer.WriteStringValue("networkName", NetworkName);
            writer.WriteEnumValue<global::ApiSdk.Models.NonEapAuthenticationMethodForEapTtlsType>("nonEapAuthenticationMethodForEapTtls", NonEapAuthenticationMethodForEapTtls);
            writer.WriteObjectValue<global::ApiSdk.Models.MacOSTrustedRootCertificate>("rootCertificateForServerValidation", RootCertificateForServerValidation);
            writer.WriteCollectionOfPrimitiveValues<string>("trustedServerCertificateNames", TrustedServerCertificateNames);
        }
    }
}
#pragma warning restore CS0618
