// <auto-generated/>
#pragma warning disable CS0618
using ApiSdk.DeviceManagement.ComanagedDevices.Item.ActivateDeviceEsim;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.AssignmentFilterEvaluationStatusDetails;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.BypassActivationLock;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.ChangeAssignments;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.CleanWindowsDevice;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.CreateDeviceLogCollectionRequest;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.DeleteUserFromSharedAppleDevice;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.Deprovision;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.DetectedApps;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.DeviceCategory;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.DeviceCompliancePolicyStates;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.DeviceConfigurationStates;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.DeviceHealthScriptStates;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.Disable;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.DisableLostMode;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.EnableLostMode;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.EnrollNowAction;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.GetFileVaultKey;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.GetNonCompliantSettings;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.InitiateDeviceAttestation;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.InitiateMobileDeviceManagementKeyRecovery;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.InitiateOnDemandProactiveRemediation;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.LocateDevice;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.LogCollectionRequests;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.LogoutSharedAppleDeviceActiveUser;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.ManagedDeviceMobileAppConfigurationStates;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.OverrideComplianceState;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.PauseConfigurationRefresh;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.PlayLostModeSound;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.RebootNow;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.RecoverPasscode;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.Reenable;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.RemoteLock;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.RemoveDeviceFirmwareConfigurationInterfaceManagement;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.RequestRemoteAssistance;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.ResetPasscode;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.Retire;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.RevokeAppleVppLicenses;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.RotateBitLockerKeys;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.RotateFileVaultKey;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.RotateLocalAdminPassword;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.SecurityBaselineStates;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.SendCustomNotificationToCompanyPortal;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.SetDeviceName;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.ShutDown;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.SyncDevice;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.TriggerConfigurationManagerAction;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.UpdateWindowsDeviceAccount;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.Users;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.WindowsDefenderScan;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.WindowsDefenderUpdateSignatures;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.WindowsProtectionState;
using ApiSdk.DeviceManagement.ComanagedDevices.Item.Wipe;
using ApiSdk.Models.ODataErrors;
using ApiSdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.DeviceManagement.ComanagedDevices.Item
{
    /// <summary>
    /// Provides operations to manage the comanagedDevices property of the microsoft.graph.deviceManagement entity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ManagedDeviceItemRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// Provides operations to call the activateDeviceEsim method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildActivateDeviceEsimNavCommand()
        {
            var command = new Command("activate-device-esim");
            command.Description = "Provides operations to call the activateDeviceEsim method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.ActivateDeviceEsim.ActivateDeviceEsimRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the assignmentFilterEvaluationStatusDetails property of the microsoft.graph.managedDevice entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAssignmentFilterEvaluationStatusDetailsNavCommand()
        {
            var command = new Command("assignment-filter-evaluation-status-details");
            command.Description = "Provides operations to manage the assignmentFilterEvaluationStatusDetails property of the microsoft.graph.managedDevice entity.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.AssignmentFilterEvaluationStatusDetails.AssignmentFilterEvaluationStatusDetailsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the bypassActivationLock method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBypassActivationLockNavCommand()
        {
            var command = new Command("bypass-activation-lock");
            command.Description = "Provides operations to call the bypassActivationLock method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.BypassActivationLock.BypassActivationLockRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the changeAssignments method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildChangeAssignmentsNavCommand()
        {
            var command = new Command("change-assignments");
            command.Description = "Provides operations to call the changeAssignments method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.ChangeAssignments.ChangeAssignmentsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the cleanWindowsDevice method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCleanWindowsDeviceNavCommand()
        {
            var command = new Command("clean-windows-device");
            command.Description = "Provides operations to call the cleanWindowsDevice method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.CleanWindowsDevice.CleanWindowsDeviceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the createDeviceLogCollectionRequest method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCreateDeviceLogCollectionRequestNavCommand()
        {
            var command = new Command("create-device-log-collection-request");
            command.Description = "Provides operations to call the createDeviceLogCollectionRequest method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.CreateDeviceLogCollectionRequest.CreateDeviceLogCollectionRequestRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Delete navigation property comanagedDevices for deviceManagement
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeleteCommand()
        {
            var command = new Command("delete");
            command.Description = "Delete navigation property comanagedDevices for deviceManagement";
            var managedDeviceIdOption = new Option<string>("--managed-device-id", description: "The unique identifier of managedDevice") {
            };
            managedDeviceIdOption.IsRequired = true;
            command.AddOption(managedDeviceIdOption);
            var ifMatchOption = new Option<string[]>("--if-match", description: "ETag") {
                Arity = ArgumentArity.ZeroOrMore
            };
            ifMatchOption.IsRequired = false;
            command.AddOption(ifMatchOption);
            command.SetHandler(async (invocationContext) => {
                var managedDeviceId = invocationContext.ParseResult.GetValueForOption(managedDeviceIdOption);
                var ifMatch = invocationContext.ParseResult.GetValueForOption(ifMatchOption);
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToDeleteRequestInformation(q => {
                });
                if (managedDeviceId is not null) requestInfo.PathParameters.Add("managedDevice%2Did", managedDeviceId);
                if (ifMatch is not null) requestInfo.Headers.Add("If-Match", ifMatch);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                await reqAdapter.SendNoContentAsync(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken);
                Console.WriteLine("Success");
            });
            return command;
        }
        /// <summary>
        /// Provides operations to call the deleteUserFromSharedAppleDevice method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeleteUserFromSharedAppleDeviceNavCommand()
        {
            var command = new Command("delete-user-from-shared-apple-device");
            command.Description = "Provides operations to call the deleteUserFromSharedAppleDevice method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.DeleteUserFromSharedAppleDevice.DeleteUserFromSharedAppleDeviceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the deprovision method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeprovisionNavCommand()
        {
            var command = new Command("deprovision");
            command.Description = "Provides operations to call the deprovision method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.Deprovision.DeprovisionRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the detectedApps property of the microsoft.graph.managedDevice entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDetectedAppsNavCommand()
        {
            var command = new Command("detected-apps");
            command.Description = "Provides operations to manage the detectedApps property of the microsoft.graph.managedDevice entity.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.DetectedApps.DetectedAppsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceCategory property of the microsoft.graph.managedDevice entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceCategoryNavCommand()
        {
            var command = new Command("device-category");
            command.Description = "Provides operations to manage the deviceCategory property of the microsoft.graph.managedDevice entity.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.DeviceCategory.DeviceCategoryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildRefNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceCompliancePolicyStates property of the microsoft.graph.managedDevice entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceCompliancePolicyStatesNavCommand()
        {
            var command = new Command("device-compliance-policy-states");
            command.Description = "Provides operations to manage the deviceCompliancePolicyStates property of the microsoft.graph.managedDevice entity.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.DeviceCompliancePolicyStates.DeviceCompliancePolicyStatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceConfigurationStates property of the microsoft.graph.managedDevice entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceConfigurationStatesNavCommand()
        {
            var command = new Command("device-configuration-states");
            command.Description = "Provides operations to manage the deviceConfigurationStates property of the microsoft.graph.managedDevice entity.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.DeviceConfigurationStates.DeviceConfigurationStatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceHealthScriptStates property of the microsoft.graph.managedDevice entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceHealthScriptStatesNavCommand()
        {
            var command = new Command("device-health-script-states");
            command.Description = "Provides operations to manage the deviceHealthScriptStates property of the microsoft.graph.managedDevice entity.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.DeviceHealthScriptStates.DeviceHealthScriptStatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPostCommand());
            nonExecCommands.Add(builder.BuildWithIdWithPolicyIdWithDeviceIdRbCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the disableLostMode method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDisableLostModeNavCommand()
        {
            var command = new Command("disable-lost-mode");
            command.Description = "Provides operations to call the disableLostMode method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.DisableLostMode.DisableLostModeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the disable method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDisableNavCommand()
        {
            var command = new Command("disable");
            command.Description = "Provides operations to call the disable method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.Disable.DisableRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the enableLostMode method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEnableLostModeNavCommand()
        {
            var command = new Command("enable-lost-mode");
            command.Description = "Provides operations to call the enableLostMode method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.EnableLostMode.EnableLostModeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the enrollNowAction method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEnrollNowActionNavCommand()
        {
            var command = new Command("enroll-now-action");
            command.Description = "Provides operations to call the enrollNowAction method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.EnrollNowAction.EnrollNowActionRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The list of co-managed devices report
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCommand()
        {
            var command = new Command("get");
            command.Description = "The list of co-managed devices report";
            var managedDeviceIdOption = new Option<string>("--managed-device-id", description: "The unique identifier of managedDevice") {
            };
            managedDeviceIdOption.IsRequired = true;
            command.AddOption(managedDeviceIdOption);
            var selectOption = new Option<string[]>("--select", description: "Select properties to be returned") {
                Arity = ArgumentArity.ZeroOrMore
            };
            selectOption.IsRequired = false;
            command.AddOption(selectOption);
            var expandOption = new Option<string[]>("--expand", description: "Expand related entities") {
                Arity = ArgumentArity.ZeroOrMore
            };
            expandOption.IsRequired = false;
            command.AddOption(expandOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var managedDeviceId = invocationContext.ParseResult.GetValueForOption(managedDeviceIdOption);
                var select = invocationContext.ParseResult.GetValueForOption(selectOption);
                var expand = invocationContext.ParseResult.GetValueForOption(expandOption);
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                    q.QueryParameters.Select = select;
                    q.QueryParameters.Expand = expand;
                });
                if (managedDeviceId is not null) requestInfo.PathParameters.Add("managedDevice%2Did", managedDeviceId);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Provides operations to call the getFileVaultKey method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetFileVaultKeyNavCommand()
        {
            var command = new Command("get-file-vault-key");
            command.Description = "Provides operations to call the getFileVaultKey method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.GetFileVaultKey.GetFileVaultKeyRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getNonCompliantSettings method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetNonCompliantSettingsNavCommand()
        {
            var command = new Command("get-non-compliant-settings");
            command.Description = "Provides operations to call the getNonCompliantSettings method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.GetNonCompliantSettings.GetNonCompliantSettingsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the initiateDeviceAttestation method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildInitiateDeviceAttestationNavCommand()
        {
            var command = new Command("initiate-device-attestation");
            command.Description = "Provides operations to call the initiateDeviceAttestation method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.InitiateDeviceAttestation.InitiateDeviceAttestationRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the initiateMobileDeviceManagementKeyRecovery method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildInitiateMobileDeviceManagementKeyRecoveryNavCommand()
        {
            var command = new Command("initiate-mobile-device-management-key-recovery");
            command.Description = "Provides operations to call the initiateMobileDeviceManagementKeyRecovery method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.InitiateMobileDeviceManagementKeyRecovery.InitiateMobileDeviceManagementKeyRecoveryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the initiateOnDemandProactiveRemediation method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildInitiateOnDemandProactiveRemediationNavCommand()
        {
            var command = new Command("initiate-on-demand-proactive-remediation");
            command.Description = "Provides operations to call the initiateOnDemandProactiveRemediation method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.InitiateOnDemandProactiveRemediation.InitiateOnDemandProactiveRemediationRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the locateDevice method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLocateDeviceNavCommand()
        {
            var command = new Command("locate-device");
            command.Description = "Provides operations to call the locateDevice method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.LocateDevice.LocateDeviceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the logCollectionRequests property of the microsoft.graph.managedDevice entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLogCollectionRequestsNavCommand()
        {
            var command = new Command("log-collection-requests");
            command.Description = "Provides operations to manage the logCollectionRequests property of the microsoft.graph.managedDevice entity.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.LogCollectionRequests.LogCollectionRequestsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the logoutSharedAppleDeviceActiveUser method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLogoutSharedAppleDeviceActiveUserNavCommand()
        {
            var command = new Command("logout-shared-apple-device-active-user");
            command.Description = "Provides operations to call the logoutSharedAppleDeviceActiveUser method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.LogoutSharedAppleDeviceActiveUser.LogoutSharedAppleDeviceActiveUserRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the managedDeviceMobileAppConfigurationStates property of the microsoft.graph.managedDevice entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildManagedDeviceMobileAppConfigurationStatesNavCommand()
        {
            var command = new Command("managed-device-mobile-app-configuration-states");
            command.Description = "Provides operations to manage the managedDeviceMobileAppConfigurationStates property of the microsoft.graph.managedDevice entity.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.ManagedDeviceMobileAppConfigurationStates.ManagedDeviceMobileAppConfigurationStatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the overrideComplianceState method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOverrideComplianceStateNavCommand()
        {
            var command = new Command("override-compliance-state");
            command.Description = "Provides operations to call the overrideComplianceState method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.OverrideComplianceState.OverrideComplianceStateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Update the navigation property comanagedDevices in deviceManagement
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPatchCommand()
        {
            var command = new Command("patch");
            command.Description = "Update the navigation property comanagedDevices in deviceManagement";
            var managedDeviceIdOption = new Option<string>("--managed-device-id", description: "The unique identifier of managedDevice") {
            };
            managedDeviceIdOption.IsRequired = true;
            command.AddOption(managedDeviceIdOption);
            var bodyOption = new Option<string>("--body", description: "The request body") {
            };
            bodyOption.IsRequired = true;
            command.AddOption(bodyOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var managedDeviceId = invocationContext.ParseResult.GetValueForOption(managedDeviceIdOption);
                var body = invocationContext.ParseResult.GetValueForOption(bodyOption) ?? string.Empty;
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                using var stream = new MemoryStream(Encoding.UTF8.GetBytes(body));
                var parseNode = await ParseNodeFactoryRegistry.DefaultInstance.GetRootParseNodeAsync("application/json", stream, cancellationToken);
                var model = parseNode.GetObjectValue<global::ApiSdk.Models.ManagedDevice>(global::ApiSdk.Models.ManagedDevice.CreateFromDiscriminatorValue);
                if (model is null) {
                    Console.Error.WriteLine("No model data to send.");
                    return;
                }
                var requestInfo = ToPatchRequestInformation(model, q => {
                });
                if (managedDeviceId is not null) requestInfo.PathParameters.Add("managedDevice%2Did", managedDeviceId);
                requestInfo.SetContentFromParsable(reqAdapter, "application/json", model);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Provides operations to call the pauseConfigurationRefresh method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPauseConfigurationRefreshNavCommand()
        {
            var command = new Command("pause-configuration-refresh");
            command.Description = "Provides operations to call the pauseConfigurationRefresh method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.PauseConfigurationRefresh.PauseConfigurationRefreshRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the playLostModeSound method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPlayLostModeSoundNavCommand()
        {
            var command = new Command("play-lost-mode-sound");
            command.Description = "Provides operations to call the playLostModeSound method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.PlayLostModeSound.PlayLostModeSoundRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the rebootNow method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRebootNowNavCommand()
        {
            var command = new Command("reboot-now");
            command.Description = "Provides operations to call the rebootNow method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.RebootNow.RebootNowRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the recoverPasscode method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRecoverPasscodeNavCommand()
        {
            var command = new Command("recover-passcode");
            command.Description = "Provides operations to call the recoverPasscode method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.RecoverPasscode.RecoverPasscodeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the reenable method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildReenableNavCommand()
        {
            var command = new Command("reenable");
            command.Description = "Provides operations to call the reenable method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.Reenable.ReenableRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the remoteLock method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRemoteLockNavCommand()
        {
            var command = new Command("remote-lock");
            command.Description = "Provides operations to call the remoteLock method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.RemoteLock.RemoteLockRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the removeDeviceFirmwareConfigurationInterfaceManagement method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRemoveDeviceFirmwareConfigurationInterfaceManagementNavCommand()
        {
            var command = new Command("remove-device-firmware-configuration-interface-management");
            command.Description = "Provides operations to call the removeDeviceFirmwareConfigurationInterfaceManagement method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.RemoveDeviceFirmwareConfigurationInterfaceManagement.RemoveDeviceFirmwareConfigurationInterfaceManagementRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the requestRemoteAssistance method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRequestRemoteAssistanceNavCommand()
        {
            var command = new Command("request-remote-assistance");
            command.Description = "Provides operations to call the requestRemoteAssistance method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.RequestRemoteAssistance.RequestRemoteAssistanceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the resetPasscode method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildResetPasscodeNavCommand()
        {
            var command = new Command("reset-passcode");
            command.Description = "Provides operations to call the resetPasscode method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.ResetPasscode.ResetPasscodeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the retire method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRetireNavCommand()
        {
            var command = new Command("retire");
            command.Description = "Provides operations to call the retire method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.Retire.RetireRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the revokeAppleVppLicenses method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRevokeAppleVppLicensesNavCommand()
        {
            var command = new Command("revoke-apple-vpp-licenses");
            command.Description = "Provides operations to call the revokeAppleVppLicenses method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.RevokeAppleVppLicenses.RevokeAppleVppLicensesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the rotateBitLockerKeys method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRotateBitLockerKeysNavCommand()
        {
            var command = new Command("rotate-bit-locker-keys");
            command.Description = "Provides operations to call the rotateBitLockerKeys method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.RotateBitLockerKeys.RotateBitLockerKeysRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the rotateFileVaultKey method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRotateFileVaultKeyNavCommand()
        {
            var command = new Command("rotate-file-vault-key");
            command.Description = "Provides operations to call the rotateFileVaultKey method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.RotateFileVaultKey.RotateFileVaultKeyRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the rotateLocalAdminPassword method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRotateLocalAdminPasswordNavCommand()
        {
            var command = new Command("rotate-local-admin-password");
            command.Description = "Provides operations to call the rotateLocalAdminPassword method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.RotateLocalAdminPassword.RotateLocalAdminPasswordRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the securityBaselineStates property of the microsoft.graph.managedDevice entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSecurityBaselineStatesNavCommand()
        {
            var command = new Command("security-baseline-states");
            command.Description = "Provides operations to manage the securityBaselineStates property of the microsoft.graph.managedDevice entity.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.SecurityBaselineStates.SecurityBaselineStatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sendCustomNotificationToCompanyPortal method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSendCustomNotificationToCompanyPortalNavCommand()
        {
            var command = new Command("send-custom-notification-to-company-portal");
            command.Description = "Provides operations to call the sendCustomNotificationToCompanyPortal method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.SendCustomNotificationToCompanyPortal.SendCustomNotificationToCompanyPortalRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the setDeviceName method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSetDeviceNameNavCommand()
        {
            var command = new Command("set-device-name");
            command.Description = "Provides operations to call the setDeviceName method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.SetDeviceName.SetDeviceNameRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the shutDown method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildShutDownNavCommand()
        {
            var command = new Command("shut-down");
            command.Description = "Provides operations to call the shutDown method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.ShutDown.ShutDownRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the syncDevice method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSyncDeviceNavCommand()
        {
            var command = new Command("sync-device");
            command.Description = "Provides operations to call the syncDevice method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.SyncDevice.SyncDeviceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the triggerConfigurationManagerAction method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTriggerConfigurationManagerActionNavCommand()
        {
            var command = new Command("trigger-configuration-manager-action");
            command.Description = "Provides operations to call the triggerConfigurationManagerAction method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.TriggerConfigurationManagerAction.TriggerConfigurationManagerActionRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the updateWindowsDeviceAccount method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUpdateWindowsDeviceAccountNavCommand()
        {
            var command = new Command("update-windows-device-account");
            command.Description = "Provides operations to call the updateWindowsDeviceAccount method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.UpdateWindowsDeviceAccount.UpdateWindowsDeviceAccountRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the users property of the microsoft.graph.managedDevice entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUsersNavCommand()
        {
            var command = new Command("users");
            command.Description = "Provides operations to manage the users property of the microsoft.graph.managedDevice entity.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.Users.UsersRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the windowsDefenderScan method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWindowsDefenderScanNavCommand()
        {
            var command = new Command("windows-defender-scan");
            command.Description = "Provides operations to call the windowsDefenderScan method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.WindowsDefenderScan.WindowsDefenderScanRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the windowsDefenderUpdateSignatures method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWindowsDefenderUpdateSignaturesNavCommand()
        {
            var command = new Command("windows-defender-update-signatures");
            command.Description = "Provides operations to call the windowsDefenderUpdateSignatures method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.WindowsDefenderUpdateSignatures.WindowsDefenderUpdateSignaturesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the windowsProtectionState property of the microsoft.graph.managedDevice entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWindowsProtectionStateNavCommand()
        {
            var command = new Command("windows-protection-state");
            command.Description = "Provides operations to manage the windowsProtectionState property of the microsoft.graph.managedDevice entity.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.WindowsProtectionState.WindowsProtectionStateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            nonExecCommands.Add(builder.BuildDetectedMalwareStateNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the wipe method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWipeNavCommand()
        {
            var command = new Command("wipe");
            command.Description = "Provides operations to call the wipe method.";
            var builder = new global::ApiSdk.DeviceManagement.ComanagedDevices.Item.Wipe.WipeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.DeviceManagement.ComanagedDevices.Item.ManagedDeviceItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public ManagedDeviceItemRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/deviceManagement/comanagedDevices/{managedDevice%2Did}{?%24expand,%24select}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.DeviceManagement.ComanagedDevices.Item.ManagedDeviceItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public ManagedDeviceItemRequestBuilder(string rawUrl) : base("{+baseurl}/deviceManagement/comanagedDevices/{managedDevice%2Did}{?%24expand,%24select}", rawUrl)
        {
        }
        /// <summary>
        /// Delete navigation property comanagedDevices for deviceManagement
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// The list of co-managed devices report
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.DeviceManagement.ComanagedDevices.Item.ManagedDeviceItemRequestBuilder.ManagedDeviceItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.DeviceManagement.ComanagedDevices.Item.ManagedDeviceItemRequestBuilder.ManagedDeviceItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update the navigation property comanagedDevices in deviceManagement
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::ApiSdk.Models.ManagedDevice body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::ApiSdk.Models.ManagedDevice body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// The list of co-managed devices report
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ManagedDeviceItemRequestBuilderGetQueryParameters 
        {
            /// <summary>Expand related entities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("%24expand")]
            public string[] Expand { get; set; }
#endif
            /// <summary>Select properties to be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24select")]
            public string[]? Select { get; set; }
#nullable restore
#else
            [QueryParameter("%24select")]
            public string[] Select { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
