// <auto-generated/>
using ApiSdk.Models.ODataErrors;
using ApiSdk.Models;
using ApiSdk.Reports.AppCredentialSignInActivities;
using ApiSdk.Reports.ApplicationSignInDetailedSummary;
using ApiSdk.Reports.AuthenticationMethods;
using ApiSdk.Reports.CredentialUserRegistrationDetails;
using ApiSdk.Reports.DailyPrintUsage;
using ApiSdk.Reports.DailyPrintUsageByPrinter;
using ApiSdk.Reports.DailyPrintUsageByUser;
using ApiSdk.Reports.DailyPrintUsageSummariesByPrinter;
using ApiSdk.Reports.DailyPrintUsageSummariesByUser;
using ApiSdk.Reports.DeviceConfigurationDeviceActivity;
using ApiSdk.Reports.DeviceConfigurationUserActivity;
using ApiSdk.Reports.GetAttackSimulationRepeatOffenders;
using ApiSdk.Reports.GetAttackSimulationSimulationUserCoverage;
using ApiSdk.Reports.GetAttackSimulationTrainingUserCoverage;
using ApiSdk.Reports.GetAzureADApplicationSignInSummaryWithPeriod;
using ApiSdk.Reports.GetBrowserDistributionUserCountsWithPeriod;
using ApiSdk.Reports.GetBrowserUserCountsWithPeriod;
using ApiSdk.Reports.GetBrowserUserDetailWithPeriod;
using ApiSdk.Reports.GetCredentialUsageSummaryWithPeriod;
using ApiSdk.Reports.GetCredentialUserRegistrationCount;
using ApiSdk.Reports.GetEmailActivityCountsWithPeriod;
using ApiSdk.Reports.GetEmailActivityUserCountsWithPeriod;
using ApiSdk.Reports.GetEmailActivityUserDetailWithDate;
using ApiSdk.Reports.GetEmailActivityUserDetailWithPeriod;
using ApiSdk.Reports.GetEmailAppUsageAppsUserCountsWithPeriod;
using ApiSdk.Reports.GetEmailAppUsageUserCountsWithPeriod;
using ApiSdk.Reports.GetEmailAppUsageUserDetailWithDate;
using ApiSdk.Reports.GetEmailAppUsageUserDetailWithPeriod;
using ApiSdk.Reports.GetEmailAppUsageVersionsUserCountsWithPeriod;
using ApiSdk.Reports.GetFormsUserActivityCountsWithPeriod;
using ApiSdk.Reports.GetFormsUserActivityUserCountsWithPeriod;
using ApiSdk.Reports.GetFormsUserActivityUserDetailWithDate;
using ApiSdk.Reports.GetFormsUserActivityUserDetailWithPeriod;
using ApiSdk.Reports.GetGroupArchivedPrintJobsWithGroupIdWithStartDateTimeWithEndDateTime;
using ApiSdk.Reports.GetM365AppPlatformUserCountsWithPeriod;
using ApiSdk.Reports.GetM365AppUserCountsWithPeriod;
using ApiSdk.Reports.GetM365AppUserDetailWithDate;
using ApiSdk.Reports.GetM365AppUserDetailWithPeriod;
using ApiSdk.Reports.GetMailboxUsageDetailWithPeriod;
using ApiSdk.Reports.GetMailboxUsageMailboxCountsWithPeriod;
using ApiSdk.Reports.GetMailboxUsageQuotaStatusMailboxCountsWithPeriod;
using ApiSdk.Reports.GetMailboxUsageStorageWithPeriod;
using ApiSdk.Reports.GetOffice365ActivationCounts;
using ApiSdk.Reports.GetOffice365ActivationsUserCounts;
using ApiSdk.Reports.GetOffice365ActivationsUserDetail;
using ApiSdk.Reports.GetOffice365ActiveUserCountsWithPeriod;
using ApiSdk.Reports.GetOffice365ActiveUserDetailWithDate;
using ApiSdk.Reports.GetOffice365ActiveUserDetailWithPeriod;
using ApiSdk.Reports.GetOffice365GroupsActivityCountsWithPeriod;
using ApiSdk.Reports.GetOffice365GroupsActivityDetailWithDate;
using ApiSdk.Reports.GetOffice365GroupsActivityDetailWithPeriod;
using ApiSdk.Reports.GetOffice365GroupsActivityFileCountsWithPeriod;
using ApiSdk.Reports.GetOffice365GroupsActivityGroupCountsWithPeriod;
using ApiSdk.Reports.GetOffice365GroupsActivityStorageWithPeriod;
using ApiSdk.Reports.GetOffice365ServicesUserCountsWithPeriod;
using ApiSdk.Reports.GetOneDriveActivityFileCountsWithPeriod;
using ApiSdk.Reports.GetOneDriveActivityUserCountsWithPeriod;
using ApiSdk.Reports.GetOneDriveActivityUserDetailWithDate;
using ApiSdk.Reports.GetOneDriveActivityUserDetailWithPeriod;
using ApiSdk.Reports.GetOneDriveUsageAccountCountsWithPeriod;
using ApiSdk.Reports.GetOneDriveUsageAccountDetailWithDate;
using ApiSdk.Reports.GetOneDriveUsageAccountDetailWithPeriod;
using ApiSdk.Reports.GetOneDriveUsageFileCountsWithPeriod;
using ApiSdk.Reports.GetOneDriveUsageStorageWithPeriod;
using ApiSdk.Reports.GetPrinterArchivedPrintJobsWithPrinterIdWithStartDateTimeWithEndDateTime;
using ApiSdk.Reports.GetRelyingPartyDetailedSummaryWithPeriod;
using ApiSdk.Reports.GetSharePointActivityFileCountsWithPeriod;
using ApiSdk.Reports.GetSharePointActivityPagesWithPeriod;
using ApiSdk.Reports.GetSharePointActivityUserCountsWithPeriod;
using ApiSdk.Reports.GetSharePointActivityUserDetailWithDate;
using ApiSdk.Reports.GetSharePointActivityUserDetailWithPeriod;
using ApiSdk.Reports.GetSharePointSiteUsageDetailWithDate;
using ApiSdk.Reports.GetSharePointSiteUsageDetailWithPeriod;
using ApiSdk.Reports.GetSharePointSiteUsageFileCountsWithPeriod;
using ApiSdk.Reports.GetSharePointSiteUsagePagesWithPeriod;
using ApiSdk.Reports.GetSharePointSiteUsageSiteCountsWithPeriod;
using ApiSdk.Reports.GetSharePointSiteUsageStorageWithPeriod;
using ApiSdk.Reports.GetSkypeForBusinessActivityCountsWithPeriod;
using ApiSdk.Reports.GetSkypeForBusinessActivityUserCountsWithPeriod;
using ApiSdk.Reports.GetSkypeForBusinessActivityUserDetailWithDate;
using ApiSdk.Reports.GetSkypeForBusinessActivityUserDetailWithPeriod;
using ApiSdk.Reports.GetSkypeForBusinessDeviceUsageDistributionUserCountsWithPeriod;
using ApiSdk.Reports.GetSkypeForBusinessDeviceUsageUserCountsWithPeriod;
using ApiSdk.Reports.GetSkypeForBusinessDeviceUsageUserDetailWithDate;
using ApiSdk.Reports.GetSkypeForBusinessDeviceUsageUserDetailWithPeriod;
using ApiSdk.Reports.GetSkypeForBusinessOrganizerActivityCountsWithPeriod;
using ApiSdk.Reports.GetSkypeForBusinessOrganizerActivityMinuteCountsWithPeriod;
using ApiSdk.Reports.GetSkypeForBusinessOrganizerActivityUserCountsWithPeriod;
using ApiSdk.Reports.GetSkypeForBusinessParticipantActivityCountsWithPeriod;
using ApiSdk.Reports.GetSkypeForBusinessParticipantActivityMinuteCountsWithPeriod;
using ApiSdk.Reports.GetSkypeForBusinessParticipantActivityUserCountsWithPeriod;
using ApiSdk.Reports.GetSkypeForBusinessPeerToPeerActivityCountsWithPeriod;
using ApiSdk.Reports.GetSkypeForBusinessPeerToPeerActivityMinuteCountsWithPeriod;
using ApiSdk.Reports.GetSkypeForBusinessPeerToPeerActivityUserCountsWithPeriod;
using ApiSdk.Reports.GetTeamsDeviceUsageDistributionTotalUserCountsWithPeriod;
using ApiSdk.Reports.GetTeamsDeviceUsageDistributionUserCountsWithPeriod;
using ApiSdk.Reports.GetTeamsDeviceUsageTotalUserCountsWithPeriod;
using ApiSdk.Reports.GetTeamsDeviceUsageUserCountsWithPeriod;
using ApiSdk.Reports.GetTeamsDeviceUsageUserDetailWithDate;
using ApiSdk.Reports.GetTeamsDeviceUsageUserDetailWithPeriod;
using ApiSdk.Reports.GetTeamsTeamActivityCountsWithPeriod;
using ApiSdk.Reports.GetTeamsTeamActivityDetailWithDate;
using ApiSdk.Reports.GetTeamsTeamActivityDetailWithPeriod;
using ApiSdk.Reports.GetTeamsTeamActivityDistributionCountsWithPeriod;
using ApiSdk.Reports.GetTeamsTeamCountsWithPeriod;
using ApiSdk.Reports.GetTeamsUserActivityCountsWithPeriod;
using ApiSdk.Reports.GetTeamsUserActivityDistributionTotalUserCountsWithPeriod;
using ApiSdk.Reports.GetTeamsUserActivityDistributionUserCountsWithPeriod;
using ApiSdk.Reports.GetTeamsUserActivityTotalCountsWithPeriod;
using ApiSdk.Reports.GetTeamsUserActivityTotalDistributionCountsWithPeriod;
using ApiSdk.Reports.GetTeamsUserActivityTotalUserCountsWithPeriod;
using ApiSdk.Reports.GetTeamsUserActivityUserCountsWithPeriod;
using ApiSdk.Reports.GetTeamsUserActivityUserDetailWithDate;
using ApiSdk.Reports.GetTeamsUserActivityUserDetailWithPeriod;
using ApiSdk.Reports.GetUserArchivedPrintJobsWithUserIdWithStartDateTimeWithEndDateTime;
using ApiSdk.Reports.GetYammerActivityCountsWithPeriod;
using ApiSdk.Reports.GetYammerActivityUserCountsWithPeriod;
using ApiSdk.Reports.GetYammerActivityUserDetailWithDate;
using ApiSdk.Reports.GetYammerActivityUserDetailWithPeriod;
using ApiSdk.Reports.GetYammerDeviceUsageDistributionUserCountsWithPeriod;
using ApiSdk.Reports.GetYammerDeviceUsageUserCountsWithPeriod;
using ApiSdk.Reports.GetYammerDeviceUsageUserDetailWithDate;
using ApiSdk.Reports.GetYammerDeviceUsageUserDetailWithPeriod;
using ApiSdk.Reports.GetYammerGroupsActivityCountsWithPeriod;
using ApiSdk.Reports.GetYammerGroupsActivityDetailWithDate;
using ApiSdk.Reports.GetYammerGroupsActivityDetailWithPeriod;
using ApiSdk.Reports.GetYammerGroupsActivityGroupCountsWithPeriod;
using ApiSdk.Reports.ManagedDeviceEnrollmentAbandonmentDetailsWithSkipWithTopWithFilterWithSkipToken;
using ApiSdk.Reports.ManagedDeviceEnrollmentAbandonmentSummaryWithSkipWithTopWithFilterWithSkipToken;
using ApiSdk.Reports.ManagedDeviceEnrollmentFailureDetails;
using ApiSdk.Reports.ManagedDeviceEnrollmentFailureDetailsWithSkipWithTopWithFilterWithSkipToken;
using ApiSdk.Reports.ManagedDeviceEnrollmentFailureTrends;
using ApiSdk.Reports.ManagedDeviceEnrollmentTopFailures;
using ApiSdk.Reports.ManagedDeviceEnrollmentTopFailuresWithPeriod;
using ApiSdk.Reports.MonthlyPrintUsageByPrinter;
using ApiSdk.Reports.MonthlyPrintUsageByUser;
using ApiSdk.Reports.MonthlyPrintUsageSummariesByPrinter;
using ApiSdk.Reports.MonthlyPrintUsageSummariesByUser;
using ApiSdk.Reports.Partners;
using ApiSdk.Reports.Security;
using ApiSdk.Reports.ServiceActivity;
using ApiSdk.Reports.ServicePrincipalSignInActivities;
using ApiSdk.Reports.Sla;
using ApiSdk.Reports.UserCredentialUsageDetails;
using ApiSdk.Reports.UserInsights;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.Reports
{
    /// <summary>
    /// Provides operations to manage the reportRoot singleton.
    /// </summary>
    public class ReportsRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// Provides operations to manage the appCredentialSignInActivities property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAppCredentialSignInActivitiesNavCommand()
        {
            var command = new Command("app-credential-sign-in-activities");
            command.Description = "Provides operations to manage the appCredentialSignInActivities property of the microsoft.graph.reportRoot entity.";
            var builder = new AppCredentialSignInActivitiesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the applicationSignInDetailedSummary property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildApplicationSignInDetailedSummaryNavCommand()
        {
            var command = new Command("application-sign-in-detailed-summary");
            command.Description = "Provides operations to manage the applicationSignInDetailedSummary property of the microsoft.graph.reportRoot entity.";
            var builder = new ApplicationSignInDetailedSummaryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the authenticationMethods property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAuthenticationMethodsNavCommand()
        {
            var command = new Command("authentication-methods");
            command.Description = "Provides operations to manage the authenticationMethods property of the microsoft.graph.reportRoot entity.";
            var builder = new AuthenticationMethodsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildUserRegistrationDetailsNavCommand());
            nonExecCommands.Add(builder.BuildUsersRegisteredByFeatureNavCommand());
            nonExecCommands.Add(builder.BuildUsersRegisteredByFeatureWithIncludedUserTypesWithIncludedUserRolesRbCommand());
            nonExecCommands.Add(builder.BuildUsersRegisteredByMethodNavCommand());
            nonExecCommands.Add(builder.BuildUsersRegisteredByMethodWithIncludedUserTypesWithIncludedUserRolesRbCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the credentialUserRegistrationDetails property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCredentialUserRegistrationDetailsNavCommand()
        {
            var command = new Command("credential-user-registration-details");
            command.Description = "Provides operations to manage the credentialUserRegistrationDetails property of the microsoft.graph.reportRoot entity.";
            var builder = new CredentialUserRegistrationDetailsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the dailyPrintUsageByPrinter property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDailyPrintUsageByPrinterNavCommand()
        {
            var command = new Command("daily-print-usage-by-printer");
            command.Description = "Provides operations to manage the dailyPrintUsageByPrinter property of the microsoft.graph.reportRoot entity.";
            var builder = new DailyPrintUsageByPrinterRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the dailyPrintUsageByUser property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDailyPrintUsageByUserNavCommand()
        {
            var command = new Command("daily-print-usage-by-user");
            command.Description = "Provides operations to manage the dailyPrintUsageByUser property of the microsoft.graph.reportRoot entity.";
            var builder = new DailyPrintUsageByUserRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the dailyPrintUsage property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDailyPrintUsageNavCommand()
        {
            var command = new Command("daily-print-usage");
            command.Description = "Provides operations to manage the dailyPrintUsage property of the microsoft.graph.reportRoot entity.";
            var builder = new DailyPrintUsageRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the dailyPrintUsageSummariesByPrinter property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDailyPrintUsageSummariesByPrinterNavCommand()
        {
            var command = new Command("daily-print-usage-summaries-by-printer");
            command.Description = "Provides operations to manage the dailyPrintUsageSummariesByPrinter property of the microsoft.graph.reportRoot entity.";
            var builder = new DailyPrintUsageSummariesByPrinterRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the dailyPrintUsageSummariesByUser property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDailyPrintUsageSummariesByUserNavCommand()
        {
            var command = new Command("daily-print-usage-summaries-by-user");
            command.Description = "Provides operations to manage the dailyPrintUsageSummariesByUser property of the microsoft.graph.reportRoot entity.";
            var builder = new DailyPrintUsageSummariesByUserRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the deviceConfigurationDeviceActivity method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceConfigurationDeviceActivityNavCommand()
        {
            var command = new Command("device-configuration-device-activity");
            command.Description = "Provides operations to call the deviceConfigurationDeviceActivity method.";
            var builder = new DeviceConfigurationDeviceActivityRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the deviceConfigurationUserActivity method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceConfigurationUserActivityNavCommand()
        {
            var command = new Command("device-configuration-user-activity");
            command.Description = "Provides operations to call the deviceConfigurationUserActivity method.";
            var builder = new DeviceConfigurationUserActivityRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getAttackSimulationRepeatOffenders method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetAttackSimulationRepeatOffendersNavCommand()
        {
            var command = new Command("get-attack-simulation-repeat-offenders");
            command.Description = "Provides operations to call the getAttackSimulationRepeatOffenders method.";
            var builder = new GetAttackSimulationRepeatOffendersRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getAttackSimulationSimulationUserCoverage method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetAttackSimulationSimulationUserCoverageNavCommand()
        {
            var command = new Command("get-attack-simulation-simulation-user-coverage");
            command.Description = "Provides operations to call the getAttackSimulationSimulationUserCoverage method.";
            var builder = new GetAttackSimulationSimulationUserCoverageRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getAttackSimulationTrainingUserCoverage method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetAttackSimulationTrainingUserCoverageNavCommand()
        {
            var command = new Command("get-attack-simulation-training-user-coverage");
            command.Description = "Provides operations to call the getAttackSimulationTrainingUserCoverage method.";
            var builder = new GetAttackSimulationTrainingUserCoverageRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getAzureADApplicationSignInSummary method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetAzureADApplicationSignInSummaryWithPeriodRbCommand()
        {
            var command = new Command("get-azure-a-d-application-sign-in-summary-with-period");
            command.Description = "Provides operations to call the getAzureADApplicationSignInSummary method.";
            var builder = new GetAzureADApplicationSignInSummaryWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getBrowserDistributionUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetBrowserDistributionUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-browser-distribution-user-counts-with-period");
            command.Description = "Provides operations to call the getBrowserDistributionUserCounts method.";
            var builder = new GetBrowserDistributionUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getBrowserUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetBrowserUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-browser-user-counts-with-period");
            command.Description = "Provides operations to call the getBrowserUserCounts method.";
            var builder = new GetBrowserUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getBrowserUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetBrowserUserDetailWithPeriodRbCommand()
        {
            var command = new Command("get-browser-user-detail-with-period");
            command.Description = "Provides operations to call the getBrowserUserDetail method.";
            var builder = new GetBrowserUserDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Get reports
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCommand()
        {
            var command = new Command("get");
            command.Description = "Get reports";
            var selectOption = new Option<string[]>("--select", description: "Select properties to be returned") {
                Arity = ArgumentArity.ZeroOrMore
            };
            selectOption.IsRequired = false;
            command.AddOption(selectOption);
            var expandOption = new Option<string[]>("--expand", description: "Expand related entities") {
                Arity = ArgumentArity.ZeroOrMore
            };
            expandOption.IsRequired = false;
            command.AddOption(expandOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var select = invocationContext.ParseResult.GetValueForOption(selectOption);
                var expand = invocationContext.ParseResult.GetValueForOption(expandOption);
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                    q.QueryParameters.Select = select;
                    q.QueryParameters.Expand = expand;
                });
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Provides operations to call the getCredentialUsageSummary method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCredentialUsageSummaryWithPeriodRbCommand()
        {
            var command = new Command("get-credential-usage-summary-with-period");
            command.Description = "Provides operations to call the getCredentialUsageSummary method.";
            var builder = new GetCredentialUsageSummaryWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getCredentialUserRegistrationCount method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCredentialUserRegistrationCountNavCommand()
        {
            var command = new Command("get-credential-user-registration-count");
            command.Description = "Provides operations to call the getCredentialUserRegistrationCount method.";
            var builder = new GetCredentialUserRegistrationCountRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getEmailActivityCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetEmailActivityCountsWithPeriodRbCommand()
        {
            var command = new Command("get-email-activity-counts-with-period");
            command.Description = "Provides operations to call the getEmailActivityCounts method.";
            var builder = new GetEmailActivityCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getEmailActivityUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetEmailActivityUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-email-activity-user-counts-with-period");
            command.Description = "Provides operations to call the getEmailActivityUserCounts method.";
            var builder = new GetEmailActivityUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getEmailActivityUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetEmailActivityUserDetailWithDateRbCommand()
        {
            var command = new Command("get-email-activity-user-detail-with-date");
            command.Description = "Provides operations to call the getEmailActivityUserDetail method.";
            var builder = new GetEmailActivityUserDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getEmailActivityUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetEmailActivityUserDetailWithPeriodRbCommand()
        {
            var command = new Command("get-email-activity-user-detail-with-period");
            command.Description = "Provides operations to call the getEmailActivityUserDetail method.";
            var builder = new GetEmailActivityUserDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getEmailAppUsageAppsUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetEmailAppUsageAppsUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-email-app-usage-apps-user-counts-with-period");
            command.Description = "Provides operations to call the getEmailAppUsageAppsUserCounts method.";
            var builder = new GetEmailAppUsageAppsUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getEmailAppUsageUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetEmailAppUsageUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-email-app-usage-user-counts-with-period");
            command.Description = "Provides operations to call the getEmailAppUsageUserCounts method.";
            var builder = new GetEmailAppUsageUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getEmailAppUsageUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetEmailAppUsageUserDetailWithDateRbCommand()
        {
            var command = new Command("get-email-app-usage-user-detail-with-date");
            command.Description = "Provides operations to call the getEmailAppUsageUserDetail method.";
            var builder = new GetEmailAppUsageUserDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getEmailAppUsageUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetEmailAppUsageUserDetailWithPeriodRbCommand()
        {
            var command = new Command("get-email-app-usage-user-detail-with-period");
            command.Description = "Provides operations to call the getEmailAppUsageUserDetail method.";
            var builder = new GetEmailAppUsageUserDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getEmailAppUsageVersionsUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetEmailAppUsageVersionsUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-email-app-usage-versions-user-counts-with-period");
            command.Description = "Provides operations to call the getEmailAppUsageVersionsUserCounts method.";
            var builder = new GetEmailAppUsageVersionsUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getFormsUserActivityCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetFormsUserActivityCountsWithPeriodRbCommand()
        {
            var command = new Command("get-forms-user-activity-counts-with-period");
            command.Description = "Provides operations to call the getFormsUserActivityCounts method.";
            var builder = new GetFormsUserActivityCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getFormsUserActivityUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetFormsUserActivityUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-forms-user-activity-user-counts-with-period");
            command.Description = "Provides operations to call the getFormsUserActivityUserCounts method.";
            var builder = new GetFormsUserActivityUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getFormsUserActivityUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetFormsUserActivityUserDetailWithDateRbCommand()
        {
            var command = new Command("get-forms-user-activity-user-detail-with-date");
            command.Description = "Provides operations to call the getFormsUserActivityUserDetail method.";
            var builder = new GetFormsUserActivityUserDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getFormsUserActivityUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetFormsUserActivityUserDetailWithPeriodRbCommand()
        {
            var command = new Command("get-forms-user-activity-user-detail-with-period");
            command.Description = "Provides operations to call the getFormsUserActivityUserDetail method.";
            var builder = new GetFormsUserActivityUserDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getGroupArchivedPrintJobs method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetGroupArchivedPrintJobsWithGroupIdWithStartDateTimeWithEndDateTimeRbCommand()
        {
            var command = new Command("get-group-archived-print-jobs-with-group-id-with-start-date-time-with-end-date-time");
            command.Description = "Provides operations to call the getGroupArchivedPrintJobs method.";
            var builder = new GetGroupArchivedPrintJobsWithGroupIdWithStartDateTimeWithEndDateTimeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getM365AppPlatformUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetM365AppPlatformUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-m365-app-platform-user-counts-with-period");
            command.Description = "Provides operations to call the getM365AppPlatformUserCounts method.";
            var builder = new GetM365AppPlatformUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getM365AppUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetM365AppUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-m365-app-user-counts-with-period");
            command.Description = "Provides operations to call the getM365AppUserCounts method.";
            var builder = new GetM365AppUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getM365AppUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetM365AppUserDetailWithDateRbCommand()
        {
            var command = new Command("get-m365-app-user-detail-with-date");
            command.Description = "Provides operations to call the getM365AppUserDetail method.";
            var builder = new GetM365AppUserDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getM365AppUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetM365AppUserDetailWithPeriodRbCommand()
        {
            var command = new Command("get-m365-app-user-detail-with-period");
            command.Description = "Provides operations to call the getM365AppUserDetail method.";
            var builder = new GetM365AppUserDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getMailboxUsageDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetMailboxUsageDetailWithPeriodRbCommand()
        {
            var command = new Command("get-mailbox-usage-detail-with-period");
            command.Description = "Provides operations to call the getMailboxUsageDetail method.";
            var builder = new GetMailboxUsageDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getMailboxUsageMailboxCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetMailboxUsageMailboxCountsWithPeriodRbCommand()
        {
            var command = new Command("get-mailbox-usage-mailbox-counts-with-period");
            command.Description = "Provides operations to call the getMailboxUsageMailboxCounts method.";
            var builder = new GetMailboxUsageMailboxCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getMailboxUsageQuotaStatusMailboxCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetMailboxUsageQuotaStatusMailboxCountsWithPeriodRbCommand()
        {
            var command = new Command("get-mailbox-usage-quota-status-mailbox-counts-with-period");
            command.Description = "Provides operations to call the getMailboxUsageQuotaStatusMailboxCounts method.";
            var builder = new GetMailboxUsageQuotaStatusMailboxCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getMailboxUsageStorage method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetMailboxUsageStorageWithPeriodRbCommand()
        {
            var command = new Command("get-mailbox-usage-storage-with-period");
            command.Description = "Provides operations to call the getMailboxUsageStorage method.";
            var builder = new GetMailboxUsageStorageWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOffice365ActivationCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOffice365ActivationCountsNavCommand()
        {
            var command = new Command("get-office365-activation-counts");
            command.Description = "Provides operations to call the getOffice365ActivationCounts method.";
            var builder = new GetOffice365ActivationCountsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOffice365ActivationsUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOffice365ActivationsUserCountsNavCommand()
        {
            var command = new Command("get-office365-activations-user-counts");
            command.Description = "Provides operations to call the getOffice365ActivationsUserCounts method.";
            var builder = new GetOffice365ActivationsUserCountsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOffice365ActivationsUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOffice365ActivationsUserDetailNavCommand()
        {
            var command = new Command("get-office365-activations-user-detail");
            command.Description = "Provides operations to call the getOffice365ActivationsUserDetail method.";
            var builder = new GetOffice365ActivationsUserDetailRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOffice365ActiveUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOffice365ActiveUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-office365-active-user-counts-with-period");
            command.Description = "Provides operations to call the getOffice365ActiveUserCounts method.";
            var builder = new GetOffice365ActiveUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOffice365ActiveUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOffice365ActiveUserDetailWithDateRbCommand()
        {
            var command = new Command("get-office365-active-user-detail-with-date");
            command.Description = "Provides operations to call the getOffice365ActiveUserDetail method.";
            var builder = new GetOffice365ActiveUserDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOffice365ActiveUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOffice365ActiveUserDetailWithPeriodRbCommand()
        {
            var command = new Command("get-office365-active-user-detail-with-period");
            command.Description = "Provides operations to call the getOffice365ActiveUserDetail method.";
            var builder = new GetOffice365ActiveUserDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOffice365GroupsActivityCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOffice365GroupsActivityCountsWithPeriodRbCommand()
        {
            var command = new Command("get-office365-groups-activity-counts-with-period");
            command.Description = "Provides operations to call the getOffice365GroupsActivityCounts method.";
            var builder = new GetOffice365GroupsActivityCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOffice365GroupsActivityDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOffice365GroupsActivityDetailWithDateRbCommand()
        {
            var command = new Command("get-office365-groups-activity-detail-with-date");
            command.Description = "Provides operations to call the getOffice365GroupsActivityDetail method.";
            var builder = new GetOffice365GroupsActivityDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOffice365GroupsActivityDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOffice365GroupsActivityDetailWithPeriodRbCommand()
        {
            var command = new Command("get-office365-groups-activity-detail-with-period");
            command.Description = "Provides operations to call the getOffice365GroupsActivityDetail method.";
            var builder = new GetOffice365GroupsActivityDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOffice365GroupsActivityFileCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOffice365GroupsActivityFileCountsWithPeriodRbCommand()
        {
            var command = new Command("get-office365-groups-activity-file-counts-with-period");
            command.Description = "Provides operations to call the getOffice365GroupsActivityFileCounts method.";
            var builder = new GetOffice365GroupsActivityFileCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOffice365GroupsActivityGroupCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOffice365GroupsActivityGroupCountsWithPeriodRbCommand()
        {
            var command = new Command("get-office365-groups-activity-group-counts-with-period");
            command.Description = "Provides operations to call the getOffice365GroupsActivityGroupCounts method.";
            var builder = new GetOffice365GroupsActivityGroupCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOffice365GroupsActivityStorage method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOffice365GroupsActivityStorageWithPeriodRbCommand()
        {
            var command = new Command("get-office365-groups-activity-storage-with-period");
            command.Description = "Provides operations to call the getOffice365GroupsActivityStorage method.";
            var builder = new GetOffice365GroupsActivityStorageWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOffice365ServicesUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOffice365ServicesUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-office365-services-user-counts-with-period");
            command.Description = "Provides operations to call the getOffice365ServicesUserCounts method.";
            var builder = new GetOffice365ServicesUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOneDriveActivityFileCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOneDriveActivityFileCountsWithPeriodRbCommand()
        {
            var command = new Command("get-one-drive-activity-file-counts-with-period");
            command.Description = "Provides operations to call the getOneDriveActivityFileCounts method.";
            var builder = new GetOneDriveActivityFileCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOneDriveActivityUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOneDriveActivityUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-one-drive-activity-user-counts-with-period");
            command.Description = "Provides operations to call the getOneDriveActivityUserCounts method.";
            var builder = new GetOneDriveActivityUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOneDriveActivityUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOneDriveActivityUserDetailWithDateRbCommand()
        {
            var command = new Command("get-one-drive-activity-user-detail-with-date");
            command.Description = "Provides operations to call the getOneDriveActivityUserDetail method.";
            var builder = new GetOneDriveActivityUserDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOneDriveActivityUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOneDriveActivityUserDetailWithPeriodRbCommand()
        {
            var command = new Command("get-one-drive-activity-user-detail-with-period");
            command.Description = "Provides operations to call the getOneDriveActivityUserDetail method.";
            var builder = new GetOneDriveActivityUserDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOneDriveUsageAccountCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOneDriveUsageAccountCountsWithPeriodRbCommand()
        {
            var command = new Command("get-one-drive-usage-account-counts-with-period");
            command.Description = "Provides operations to call the getOneDriveUsageAccountCounts method.";
            var builder = new GetOneDriveUsageAccountCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOneDriveUsageAccountDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOneDriveUsageAccountDetailWithDateRbCommand()
        {
            var command = new Command("get-one-drive-usage-account-detail-with-date");
            command.Description = "Provides operations to call the getOneDriveUsageAccountDetail method.";
            var builder = new GetOneDriveUsageAccountDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOneDriveUsageAccountDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOneDriveUsageAccountDetailWithPeriodRbCommand()
        {
            var command = new Command("get-one-drive-usage-account-detail-with-period");
            command.Description = "Provides operations to call the getOneDriveUsageAccountDetail method.";
            var builder = new GetOneDriveUsageAccountDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOneDriveUsageFileCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOneDriveUsageFileCountsWithPeriodRbCommand()
        {
            var command = new Command("get-one-drive-usage-file-counts-with-period");
            command.Description = "Provides operations to call the getOneDriveUsageFileCounts method.";
            var builder = new GetOneDriveUsageFileCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getOneDriveUsageStorage method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetOneDriveUsageStorageWithPeriodRbCommand()
        {
            var command = new Command("get-one-drive-usage-storage-with-period");
            command.Description = "Provides operations to call the getOneDriveUsageStorage method.";
            var builder = new GetOneDriveUsageStorageWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getPrinterArchivedPrintJobs method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetPrinterArchivedPrintJobsWithPrinterIdWithStartDateTimeWithEndDateTimeRbCommand()
        {
            var command = new Command("get-printer-archived-print-jobs-with-printer-id-with-start-date-time-with-end-date-time");
            command.Description = "Provides operations to call the getPrinterArchivedPrintJobs method.";
            var builder = new GetPrinterArchivedPrintJobsWithPrinterIdWithStartDateTimeWithEndDateTimeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getRelyingPartyDetailedSummary method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetRelyingPartyDetailedSummaryWithPeriodRbCommand()
        {
            var command = new Command("get-relying-party-detailed-summary-with-period");
            command.Description = "Provides operations to call the getRelyingPartyDetailedSummary method.";
            var builder = new GetRelyingPartyDetailedSummaryWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSharePointActivityFileCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSharePointActivityFileCountsWithPeriodRbCommand()
        {
            var command = new Command("get-share-point-activity-file-counts-with-period");
            command.Description = "Provides operations to call the getSharePointActivityFileCounts method.";
            var builder = new GetSharePointActivityFileCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSharePointActivityPages method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSharePointActivityPagesWithPeriodRbCommand()
        {
            var command = new Command("get-share-point-activity-pages-with-period");
            command.Description = "Provides operations to call the getSharePointActivityPages method.";
            var builder = new GetSharePointActivityPagesWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSharePointActivityUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSharePointActivityUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-share-point-activity-user-counts-with-period");
            command.Description = "Provides operations to call the getSharePointActivityUserCounts method.";
            var builder = new GetSharePointActivityUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSharePointActivityUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSharePointActivityUserDetailWithDateRbCommand()
        {
            var command = new Command("get-share-point-activity-user-detail-with-date");
            command.Description = "Provides operations to call the getSharePointActivityUserDetail method.";
            var builder = new GetSharePointActivityUserDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSharePointActivityUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSharePointActivityUserDetailWithPeriodRbCommand()
        {
            var command = new Command("get-share-point-activity-user-detail-with-period");
            command.Description = "Provides operations to call the getSharePointActivityUserDetail method.";
            var builder = new GetSharePointActivityUserDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSharePointSiteUsageDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSharePointSiteUsageDetailWithDateRbCommand()
        {
            var command = new Command("get-share-point-site-usage-detail-with-date");
            command.Description = "Provides operations to call the getSharePointSiteUsageDetail method.";
            var builder = new GetSharePointSiteUsageDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSharePointSiteUsageDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSharePointSiteUsageDetailWithPeriodRbCommand()
        {
            var command = new Command("get-share-point-site-usage-detail-with-period");
            command.Description = "Provides operations to call the getSharePointSiteUsageDetail method.";
            var builder = new GetSharePointSiteUsageDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSharePointSiteUsageFileCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSharePointSiteUsageFileCountsWithPeriodRbCommand()
        {
            var command = new Command("get-share-point-site-usage-file-counts-with-period");
            command.Description = "Provides operations to call the getSharePointSiteUsageFileCounts method.";
            var builder = new GetSharePointSiteUsageFileCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSharePointSiteUsagePages method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSharePointSiteUsagePagesWithPeriodRbCommand()
        {
            var command = new Command("get-share-point-site-usage-pages-with-period");
            command.Description = "Provides operations to call the getSharePointSiteUsagePages method.";
            var builder = new GetSharePointSiteUsagePagesWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSharePointSiteUsageSiteCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSharePointSiteUsageSiteCountsWithPeriodRbCommand()
        {
            var command = new Command("get-share-point-site-usage-site-counts-with-period");
            command.Description = "Provides operations to call the getSharePointSiteUsageSiteCounts method.";
            var builder = new GetSharePointSiteUsageSiteCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSharePointSiteUsageStorage method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSharePointSiteUsageStorageWithPeriodRbCommand()
        {
            var command = new Command("get-share-point-site-usage-storage-with-period");
            command.Description = "Provides operations to call the getSharePointSiteUsageStorage method.";
            var builder = new GetSharePointSiteUsageStorageWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessActivityCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessActivityCountsWithPeriodRbCommand()
        {
            var command = new Command("get-skype-for-business-activity-counts-with-period");
            command.Description = "Provides operations to call the getSkypeForBusinessActivityCounts method.";
            var builder = new GetSkypeForBusinessActivityCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessActivityUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessActivityUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-skype-for-business-activity-user-counts-with-period");
            command.Description = "Provides operations to call the getSkypeForBusinessActivityUserCounts method.";
            var builder = new GetSkypeForBusinessActivityUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessActivityUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessActivityUserDetailWithDateRbCommand()
        {
            var command = new Command("get-skype-for-business-activity-user-detail-with-date");
            command.Description = "Provides operations to call the getSkypeForBusinessActivityUserDetail method.";
            var builder = new GetSkypeForBusinessActivityUserDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessActivityUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessActivityUserDetailWithPeriodRbCommand()
        {
            var command = new Command("get-skype-for-business-activity-user-detail-with-period");
            command.Description = "Provides operations to call the getSkypeForBusinessActivityUserDetail method.";
            var builder = new GetSkypeForBusinessActivityUserDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessDeviceUsageDistributionUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessDeviceUsageDistributionUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-skype-for-business-device-usage-distribution-user-counts-with-period");
            command.Description = "Provides operations to call the getSkypeForBusinessDeviceUsageDistributionUserCounts method.";
            var builder = new GetSkypeForBusinessDeviceUsageDistributionUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessDeviceUsageUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessDeviceUsageUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-skype-for-business-device-usage-user-counts-with-period");
            command.Description = "Provides operations to call the getSkypeForBusinessDeviceUsageUserCounts method.";
            var builder = new GetSkypeForBusinessDeviceUsageUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessDeviceUsageUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessDeviceUsageUserDetailWithDateRbCommand()
        {
            var command = new Command("get-skype-for-business-device-usage-user-detail-with-date");
            command.Description = "Provides operations to call the getSkypeForBusinessDeviceUsageUserDetail method.";
            var builder = new GetSkypeForBusinessDeviceUsageUserDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessDeviceUsageUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessDeviceUsageUserDetailWithPeriodRbCommand()
        {
            var command = new Command("get-skype-for-business-device-usage-user-detail-with-period");
            command.Description = "Provides operations to call the getSkypeForBusinessDeviceUsageUserDetail method.";
            var builder = new GetSkypeForBusinessDeviceUsageUserDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessOrganizerActivityCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessOrganizerActivityCountsWithPeriodRbCommand()
        {
            var command = new Command("get-skype-for-business-organizer-activity-counts-with-period");
            command.Description = "Provides operations to call the getSkypeForBusinessOrganizerActivityCounts method.";
            var builder = new GetSkypeForBusinessOrganizerActivityCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessOrganizerActivityMinuteCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessOrganizerActivityMinuteCountsWithPeriodRbCommand()
        {
            var command = new Command("get-skype-for-business-organizer-activity-minute-counts-with-period");
            command.Description = "Provides operations to call the getSkypeForBusinessOrganizerActivityMinuteCounts method.";
            var builder = new GetSkypeForBusinessOrganizerActivityMinuteCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessOrganizerActivityUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessOrganizerActivityUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-skype-for-business-organizer-activity-user-counts-with-period");
            command.Description = "Provides operations to call the getSkypeForBusinessOrganizerActivityUserCounts method.";
            var builder = new GetSkypeForBusinessOrganizerActivityUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessParticipantActivityCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessParticipantActivityCountsWithPeriodRbCommand()
        {
            var command = new Command("get-skype-for-business-participant-activity-counts-with-period");
            command.Description = "Provides operations to call the getSkypeForBusinessParticipantActivityCounts method.";
            var builder = new GetSkypeForBusinessParticipantActivityCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessParticipantActivityMinuteCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessParticipantActivityMinuteCountsWithPeriodRbCommand()
        {
            var command = new Command("get-skype-for-business-participant-activity-minute-counts-with-period");
            command.Description = "Provides operations to call the getSkypeForBusinessParticipantActivityMinuteCounts method.";
            var builder = new GetSkypeForBusinessParticipantActivityMinuteCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessParticipantActivityUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessParticipantActivityUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-skype-for-business-participant-activity-user-counts-with-period");
            command.Description = "Provides operations to call the getSkypeForBusinessParticipantActivityUserCounts method.";
            var builder = new GetSkypeForBusinessParticipantActivityUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessPeerToPeerActivityCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessPeerToPeerActivityCountsWithPeriodRbCommand()
        {
            var command = new Command("get-skype-for-business-peer-to-peer-activity-counts-with-period");
            command.Description = "Provides operations to call the getSkypeForBusinessPeerToPeerActivityCounts method.";
            var builder = new GetSkypeForBusinessPeerToPeerActivityCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessPeerToPeerActivityMinuteCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessPeerToPeerActivityMinuteCountsWithPeriodRbCommand()
        {
            var command = new Command("get-skype-for-business-peer-to-peer-activity-minute-counts-with-period");
            command.Description = "Provides operations to call the getSkypeForBusinessPeerToPeerActivityMinuteCounts method.";
            var builder = new GetSkypeForBusinessPeerToPeerActivityMinuteCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSkypeForBusinessPeerToPeerActivityUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSkypeForBusinessPeerToPeerActivityUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-skype-for-business-peer-to-peer-activity-user-counts-with-period");
            command.Description = "Provides operations to call the getSkypeForBusinessPeerToPeerActivityUserCounts method.";
            var builder = new GetSkypeForBusinessPeerToPeerActivityUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsDeviceUsageDistributionTotalUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsDeviceUsageDistributionTotalUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-teams-device-usage-distribution-total-user-counts-with-period");
            command.Description = "Provides operations to call the getTeamsDeviceUsageDistributionTotalUserCounts method.";
            var builder = new GetTeamsDeviceUsageDistributionTotalUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsDeviceUsageDistributionUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsDeviceUsageDistributionUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-teams-device-usage-distribution-user-counts-with-period");
            command.Description = "Provides operations to call the getTeamsDeviceUsageDistributionUserCounts method.";
            var builder = new GetTeamsDeviceUsageDistributionUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsDeviceUsageTotalUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsDeviceUsageTotalUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-teams-device-usage-total-user-counts-with-period");
            command.Description = "Provides operations to call the getTeamsDeviceUsageTotalUserCounts method.";
            var builder = new GetTeamsDeviceUsageTotalUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsDeviceUsageUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsDeviceUsageUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-teams-device-usage-user-counts-with-period");
            command.Description = "Provides operations to call the getTeamsDeviceUsageUserCounts method.";
            var builder = new GetTeamsDeviceUsageUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsDeviceUsageUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsDeviceUsageUserDetailWithDateRbCommand()
        {
            var command = new Command("get-teams-device-usage-user-detail-with-date");
            command.Description = "Provides operations to call the getTeamsDeviceUsageUserDetail method.";
            var builder = new GetTeamsDeviceUsageUserDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsDeviceUsageUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsDeviceUsageUserDetailWithPeriodRbCommand()
        {
            var command = new Command("get-teams-device-usage-user-detail-with-period");
            command.Description = "Provides operations to call the getTeamsDeviceUsageUserDetail method.";
            var builder = new GetTeamsDeviceUsageUserDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsTeamActivityCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsTeamActivityCountsWithPeriodRbCommand()
        {
            var command = new Command("get-teams-team-activity-counts-with-period");
            command.Description = "Provides operations to call the getTeamsTeamActivityCounts method.";
            var builder = new GetTeamsTeamActivityCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsTeamActivityDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsTeamActivityDetailWithDateRbCommand()
        {
            var command = new Command("get-teams-team-activity-detail-with-date");
            command.Description = "Provides operations to call the getTeamsTeamActivityDetail method.";
            var builder = new GetTeamsTeamActivityDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsTeamActivityDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsTeamActivityDetailWithPeriodRbCommand()
        {
            var command = new Command("get-teams-team-activity-detail-with-period");
            command.Description = "Provides operations to call the getTeamsTeamActivityDetail method.";
            var builder = new GetTeamsTeamActivityDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsTeamActivityDistributionCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsTeamActivityDistributionCountsWithPeriodRbCommand()
        {
            var command = new Command("get-teams-team-activity-distribution-counts-with-period");
            command.Description = "Provides operations to call the getTeamsTeamActivityDistributionCounts method.";
            var builder = new GetTeamsTeamActivityDistributionCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsTeamCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsTeamCountsWithPeriodRbCommand()
        {
            var command = new Command("get-teams-team-counts-with-period");
            command.Description = "Provides operations to call the getTeamsTeamCounts method.";
            var builder = new GetTeamsTeamCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsUserActivityCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsUserActivityCountsWithPeriodRbCommand()
        {
            var command = new Command("get-teams-user-activity-counts-with-period");
            command.Description = "Provides operations to call the getTeamsUserActivityCounts method.";
            var builder = new GetTeamsUserActivityCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsUserActivityDistributionTotalUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsUserActivityDistributionTotalUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-teams-user-activity-distribution-total-user-counts-with-period");
            command.Description = "Provides operations to call the getTeamsUserActivityDistributionTotalUserCounts method.";
            var builder = new GetTeamsUserActivityDistributionTotalUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsUserActivityDistributionUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsUserActivityDistributionUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-teams-user-activity-distribution-user-counts-with-period");
            command.Description = "Provides operations to call the getTeamsUserActivityDistributionUserCounts method.";
            var builder = new GetTeamsUserActivityDistributionUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsUserActivityTotalCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsUserActivityTotalCountsWithPeriodRbCommand()
        {
            var command = new Command("get-teams-user-activity-total-counts-with-period");
            command.Description = "Provides operations to call the getTeamsUserActivityTotalCounts method.";
            var builder = new GetTeamsUserActivityTotalCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsUserActivityTotalDistributionCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsUserActivityTotalDistributionCountsWithPeriodRbCommand()
        {
            var command = new Command("get-teams-user-activity-total-distribution-counts-with-period");
            command.Description = "Provides operations to call the getTeamsUserActivityTotalDistributionCounts method.";
            var builder = new GetTeamsUserActivityTotalDistributionCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsUserActivityTotalUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsUserActivityTotalUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-teams-user-activity-total-user-counts-with-period");
            command.Description = "Provides operations to call the getTeamsUserActivityTotalUserCounts method.";
            var builder = new GetTeamsUserActivityTotalUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsUserActivityUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsUserActivityUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-teams-user-activity-user-counts-with-period");
            command.Description = "Provides operations to call the getTeamsUserActivityUserCounts method.";
            var builder = new GetTeamsUserActivityUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsUserActivityUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsUserActivityUserDetailWithDateRbCommand()
        {
            var command = new Command("get-teams-user-activity-user-detail-with-date");
            command.Description = "Provides operations to call the getTeamsUserActivityUserDetail method.";
            var builder = new GetTeamsUserActivityUserDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getTeamsUserActivityUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetTeamsUserActivityUserDetailWithPeriodRbCommand()
        {
            var command = new Command("get-teams-user-activity-user-detail-with-period");
            command.Description = "Provides operations to call the getTeamsUserActivityUserDetail method.";
            var builder = new GetTeamsUserActivityUserDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getUserArchivedPrintJobs method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetUserArchivedPrintJobsWithUserIdWithStartDateTimeWithEndDateTimeRbCommand()
        {
            var command = new Command("get-user-archived-print-jobs-with-user-id-with-start-date-time-with-end-date-time");
            command.Description = "Provides operations to call the getUserArchivedPrintJobs method.";
            var builder = new GetUserArchivedPrintJobsWithUserIdWithStartDateTimeWithEndDateTimeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getYammerActivityCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetYammerActivityCountsWithPeriodRbCommand()
        {
            var command = new Command("get-yammer-activity-counts-with-period");
            command.Description = "Provides operations to call the getYammerActivityCounts method.";
            var builder = new GetYammerActivityCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getYammerActivityUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetYammerActivityUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-yammer-activity-user-counts-with-period");
            command.Description = "Provides operations to call the getYammerActivityUserCounts method.";
            var builder = new GetYammerActivityUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getYammerActivityUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetYammerActivityUserDetailWithDateRbCommand()
        {
            var command = new Command("get-yammer-activity-user-detail-with-date");
            command.Description = "Provides operations to call the getYammerActivityUserDetail method.";
            var builder = new GetYammerActivityUserDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getYammerActivityUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetYammerActivityUserDetailWithPeriodRbCommand()
        {
            var command = new Command("get-yammer-activity-user-detail-with-period");
            command.Description = "Provides operations to call the getYammerActivityUserDetail method.";
            var builder = new GetYammerActivityUserDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getYammerDeviceUsageDistributionUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetYammerDeviceUsageDistributionUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-yammer-device-usage-distribution-user-counts-with-period");
            command.Description = "Provides operations to call the getYammerDeviceUsageDistributionUserCounts method.";
            var builder = new GetYammerDeviceUsageDistributionUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getYammerDeviceUsageUserCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetYammerDeviceUsageUserCountsWithPeriodRbCommand()
        {
            var command = new Command("get-yammer-device-usage-user-counts-with-period");
            command.Description = "Provides operations to call the getYammerDeviceUsageUserCounts method.";
            var builder = new GetYammerDeviceUsageUserCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getYammerDeviceUsageUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetYammerDeviceUsageUserDetailWithDateRbCommand()
        {
            var command = new Command("get-yammer-device-usage-user-detail-with-date");
            command.Description = "Provides operations to call the getYammerDeviceUsageUserDetail method.";
            var builder = new GetYammerDeviceUsageUserDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getYammerDeviceUsageUserDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetYammerDeviceUsageUserDetailWithPeriodRbCommand()
        {
            var command = new Command("get-yammer-device-usage-user-detail-with-period");
            command.Description = "Provides operations to call the getYammerDeviceUsageUserDetail method.";
            var builder = new GetYammerDeviceUsageUserDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getYammerGroupsActivityCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetYammerGroupsActivityCountsWithPeriodRbCommand()
        {
            var command = new Command("get-yammer-groups-activity-counts-with-period");
            command.Description = "Provides operations to call the getYammerGroupsActivityCounts method.";
            var builder = new GetYammerGroupsActivityCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getYammerGroupsActivityDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetYammerGroupsActivityDetailWithDateRbCommand()
        {
            var command = new Command("get-yammer-groups-activity-detail-with-date");
            command.Description = "Provides operations to call the getYammerGroupsActivityDetail method.";
            var builder = new GetYammerGroupsActivityDetailWithDateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getYammerGroupsActivityDetail method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetYammerGroupsActivityDetailWithPeriodRbCommand()
        {
            var command = new Command("get-yammer-groups-activity-detail-with-period");
            command.Description = "Provides operations to call the getYammerGroupsActivityDetail method.";
            var builder = new GetYammerGroupsActivityDetailWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getYammerGroupsActivityGroupCounts method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetYammerGroupsActivityGroupCountsWithPeriodRbCommand()
        {
            var command = new Command("get-yammer-groups-activity-group-counts-with-period");
            command.Description = "Provides operations to call the getYammerGroupsActivityGroupCounts method.";
            var builder = new GetYammerGroupsActivityGroupCountsWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the managedDeviceEnrollmentAbandonmentDetails method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildManagedDeviceEnrollmentAbandonmentDetailsWithSkipWithTopWithFilterWithSkipTokenRbCommand()
        {
            var command = new Command("managed-device-enrollment-abandonment-details-with-skip-with-top-with-filter-with-skip-token");
            command.Description = "Provides operations to call the managedDeviceEnrollmentAbandonmentDetails method.";
            var builder = new ManagedDeviceEnrollmentAbandonmentDetailsWithSkipWithTopWithFilterWithSkipTokenRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the managedDeviceEnrollmentAbandonmentSummary method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildManagedDeviceEnrollmentAbandonmentSummaryWithSkipWithTopWithFilterWithSkipTokenRbCommand()
        {
            var command = new Command("managed-device-enrollment-abandonment-summary-with-skip-with-top-with-filter-with-skip-token");
            command.Description = "Provides operations to call the managedDeviceEnrollmentAbandonmentSummary method.";
            var builder = new ManagedDeviceEnrollmentAbandonmentSummaryWithSkipWithTopWithFilterWithSkipTokenRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the managedDeviceEnrollmentFailureDetails method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildManagedDeviceEnrollmentFailureDetailsNavCommand()
        {
            var command = new Command("managed-device-enrollment-failure-details");
            command.Description = "Provides operations to call the managedDeviceEnrollmentFailureDetails method.";
            var builder = new ManagedDeviceEnrollmentFailureDetailsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the managedDeviceEnrollmentFailureDetails method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildManagedDeviceEnrollmentFailureDetailsWithSkipWithTopWithFilterWithSkipTokenRbCommand()
        {
            var command = new Command("managed-device-enrollment-failure-details-with-skip-with-top-with-filter-with-skip-token");
            command.Description = "Provides operations to call the managedDeviceEnrollmentFailureDetails method.";
            var builder = new ManagedDeviceEnrollmentFailureDetailsWithSkipWithTopWithFilterWithSkipTokenRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the managedDeviceEnrollmentFailureTrends method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildManagedDeviceEnrollmentFailureTrendsNavCommand()
        {
            var command = new Command("managed-device-enrollment-failure-trends");
            command.Description = "Provides operations to call the managedDeviceEnrollmentFailureTrends method.";
            var builder = new ManagedDeviceEnrollmentFailureTrendsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the managedDeviceEnrollmentTopFailures method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildManagedDeviceEnrollmentTopFailuresNavCommand()
        {
            var command = new Command("managed-device-enrollment-top-failures");
            command.Description = "Provides operations to call the managedDeviceEnrollmentTopFailures method.";
            var builder = new ManagedDeviceEnrollmentTopFailuresRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the managedDeviceEnrollmentTopFailures method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildManagedDeviceEnrollmentTopFailuresWithPeriodRbCommand()
        {
            var command = new Command("managed-device-enrollment-top-failures-with-period");
            command.Description = "Provides operations to call the managedDeviceEnrollmentTopFailures method.";
            var builder = new ManagedDeviceEnrollmentTopFailuresWithPeriodRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the monthlyPrintUsageByPrinter property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMonthlyPrintUsageByPrinterNavCommand()
        {
            var command = new Command("monthly-print-usage-by-printer");
            command.Description = "Provides operations to manage the monthlyPrintUsageByPrinter property of the microsoft.graph.reportRoot entity.";
            var builder = new MonthlyPrintUsageByPrinterRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the monthlyPrintUsageByUser property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMonthlyPrintUsageByUserNavCommand()
        {
            var command = new Command("monthly-print-usage-by-user");
            command.Description = "Provides operations to manage the monthlyPrintUsageByUser property of the microsoft.graph.reportRoot entity.";
            var builder = new MonthlyPrintUsageByUserRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the monthlyPrintUsageSummariesByPrinter property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMonthlyPrintUsageSummariesByPrinterNavCommand()
        {
            var command = new Command("monthly-print-usage-summaries-by-printer");
            command.Description = "Provides operations to manage the monthlyPrintUsageSummariesByPrinter property of the microsoft.graph.reportRoot entity.";
            var builder = new MonthlyPrintUsageSummariesByPrinterRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the monthlyPrintUsageSummariesByUser property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMonthlyPrintUsageSummariesByUserNavCommand()
        {
            var command = new Command("monthly-print-usage-summaries-by-user");
            command.Description = "Provides operations to manage the monthlyPrintUsageSummariesByUser property of the microsoft.graph.reportRoot entity.";
            var builder = new MonthlyPrintUsageSummariesByUserRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the partners property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPartnersNavCommand()
        {
            var command = new Command("partners");
            command.Description = "Provides operations to manage the partners property of the microsoft.graph.reportRoot entity.";
            var builder = new PartnersRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildBillingNavCommand());
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Update reports
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPatchCommand()
        {
            var command = new Command("patch");
            command.Description = "Update reports";
            var bodyOption = new Option<string>("--body", description: "The request body") {
            };
            bodyOption.IsRequired = true;
            command.AddOption(bodyOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var body = invocationContext.ParseResult.GetValueForOption(bodyOption) ?? string.Empty;
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                using var stream = new MemoryStream(Encoding.UTF8.GetBytes(body));
                var parseNode = ParseNodeFactoryRegistry.DefaultInstance.GetRootParseNode("application/json", stream);
                var model = parseNode.GetObjectValue<ReportRoot>(ReportRoot.CreateFromDiscriminatorValue);
                if (model is null) {
                    Console.Error.WriteLine("No model data to send.");
                    return;
                }
                var requestInfo = ToPatchRequestInformation(model, q => {
                });
                requestInfo.SetContentFromParsable(reqAdapter, "application/json", model);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Provides operations to manage the security property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSecurityNavCommand()
        {
            var command = new Command("security");
            command.Description = "Provides operations to manage the security property of the microsoft.graph.reportRoot entity.";
            var builder = new SecurityRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            nonExecCommands.Add(builder.BuildGetAttackSimulationRepeatOffendersNavCommand());
            nonExecCommands.Add(builder.BuildGetAttackSimulationSimulationUserCoverageNavCommand());
            nonExecCommands.Add(builder.BuildGetAttackSimulationTrainingUserCoverageNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the serviceActivity property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildServiceActivityNavCommand()
        {
            var command = new Command("service-activity");
            command.Description = "Provides operations to manage the serviceActivity property of the microsoft.graph.reportRoot entity.";
            var builder = new ServiceActivityRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildGetMetricsForConditionalAccessCompliantDevicesSignInSuccessWithInclusiveIntervalStartDateTimeWithExclusiveIntervalEndDateTimeWithAggregationIntervalInMinutesRbCommand());
            nonExecCommands.Add(builder.BuildGetMetricsForConditionalAccessManagedDevicesSignInSuccessWithInclusiveIntervalStartDateTimeWithExclusiveIntervalEndDateTimeWithAggregationIntervalInMinutesRbCommand());
            nonExecCommands.Add(builder.BuildGetMetricsForMfaSignInFailureWithInclusiveIntervalStartDateTimeWithExclusiveIntervalEndDateTimeWithAggregationIntervalInMinutesRbCommand());
            nonExecCommands.Add(builder.BuildGetMetricsForMfaSignInSuccessWithInclusiveIntervalStartDateTimeWithExclusiveIntervalEndDateTimeWithAggregationIntervalInMinutesRbCommand());
            nonExecCommands.Add(builder.BuildGetMetricsForSamlSignInSuccessWithInclusiveIntervalStartDateTimeWithExclusiveIntervalEndDateTimeWithAggregationIntervalInMinutesRbCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the servicePrincipalSignInActivities property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildServicePrincipalSignInActivitiesNavCommand()
        {
            var command = new Command("service-principal-sign-in-activities");
            command.Description = "Provides operations to manage the servicePrincipalSignInActivities property of the microsoft.graph.reportRoot entity.";
            var builder = new ServicePrincipalSignInActivitiesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the sla property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSlaNavCommand()
        {
            var command = new Command("sla");
            command.Description = "Provides operations to manage the sla property of the microsoft.graph.reportRoot entity.";
            var builder = new SlaRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAzureADAuthenticationNavCommand());
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userCredentialUsageDetails property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserCredentialUsageDetailsNavCommand()
        {
            var command = new Command("user-credential-usage-details");
            command.Description = "Provides operations to manage the userCredentialUsageDetails property of the microsoft.graph.reportRoot entity.";
            var builder = new UserCredentialUsageDetailsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userInsights property of the microsoft.graph.reportRoot entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserInsightsNavCommand()
        {
            var command = new Command("user-insights");
            command.Description = "Provides operations to manage the userInsights property of the microsoft.graph.reportRoot entity.";
            var builder = new UserInsightsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildDailyNavCommand());
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildMonthlyNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="ReportsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public ReportsRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/reports{?%24expand,%24select}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="ReportsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public ReportsRequestBuilder(string rawUrl) : base("{+baseurl}/reports{?%24expand,%24select}", rawUrl)
        {
        }
        /// <summary>
        /// Get reports
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<ReportsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<ReportsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update reports
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(ReportRoot body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(ReportRoot body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Get reports
        /// </summary>
        public class ReportsRequestBuilderGetQueryParameters 
        {
            /// <summary>Expand related entities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("%24expand")]
            public string[] Expand { get; set; }
#endif
            /// <summary>Select properties to be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24select")]
            public string[]? Select { get; set; }
#nullable restore
#else
            [QueryParameter("%24select")]
            public string[] Select { get; set; }
#endif
        }
    }
}
