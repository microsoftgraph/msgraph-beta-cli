// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Contains properties and inherited properties for Android Managed Store Apps.
    /// </summary>
    public class AndroidManagedStoreApp : MobileApp, IParsable
    {
        /// <summary>The Identity Name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppIdentifier { get; set; }
#nullable restore
#else
        public string AppIdentifier { get; set; }
#endif
        /// <summary>The Play for Work Store app URL. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppStoreUrl { get; private set; }
#nullable restore
#else
        public string AppStoreUrl { get; private set; }
#endif
        /// <summary>The tracks that are visible to this enterprise. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AndroidManagedStoreAppTrack>? AppTracks { get; private set; }
#nullable restore
#else
        public List<AndroidManagedStoreAppTrack> AppTracks { get; private set; }
#endif
        /// <summary>Indicates whether the app is only available to a given enterprise&apos;s users. This property is read-only.</summary>
        public bool? IsPrivate { get; private set; }
        /// <summary>Indicates whether the app is a preinstalled system app.</summary>
        public bool? IsSystemApp { get; set; }
        /// <summary>The package identifier. This property is read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PackageId { get; private set; }
#nullable restore
#else
        public string PackageId { get; private set; }
#endif
        /// <summary>Whether this app supports OEMConfig policy. This property is read-only.</summary>
        public bool? SupportsOemConfig { get; private set; }
        /// <summary>The total number of VPP licenses. This property is read-only.</summary>
        public int? TotalLicenseCount { get; private set; }
        /// <summary>The number of VPP licenses in use. This property is read-only.</summary>
        public int? UsedLicenseCount { get; private set; }
        /// <summary>
        /// Instantiates a new <see cref="AndroidManagedStoreApp"/> and sets the default values.
        /// </summary>
        public AndroidManagedStoreApp() : base()
        {
            OdataType = "#microsoft.graph.androidManagedStoreApp";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="AndroidManagedStoreApp"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new AndroidManagedStoreApp CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.androidManagedStoreWebApp" => new AndroidManagedStoreWebApp(),
                _ => new AndroidManagedStoreApp(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "appIdentifier", n => { AppIdentifier = n.GetStringValue(); } },
                { "appStoreUrl", n => { AppStoreUrl = n.GetStringValue(); } },
                { "appTracks", n => { AppTracks = n.GetCollectionOfObjectValues<AndroidManagedStoreAppTrack>(AndroidManagedStoreAppTrack.CreateFromDiscriminatorValue)?.ToList(); } },
                { "isPrivate", n => { IsPrivate = n.GetBoolValue(); } },
                { "isSystemApp", n => { IsSystemApp = n.GetBoolValue(); } },
                { "packageId", n => { PackageId = n.GetStringValue(); } },
                { "supportsOemConfig", n => { SupportsOemConfig = n.GetBoolValue(); } },
                { "totalLicenseCount", n => { TotalLicenseCount = n.GetIntValue(); } },
                { "usedLicenseCount", n => { UsedLicenseCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("appIdentifier", AppIdentifier);
            writer.WriteBoolValue("isSystemApp", IsSystemApp);
        }
    }
}
