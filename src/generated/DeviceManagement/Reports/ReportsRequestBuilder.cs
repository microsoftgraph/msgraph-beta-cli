// <auto-generated/>
using ApiSdk.DeviceManagement.Reports.CachedReportConfigurations;
using ApiSdk.DeviceManagement.Reports.ExportJobs;
using ApiSdk.DeviceManagement.Reports.GetActiveMalwareReport;
using ApiSdk.DeviceManagement.Reports.GetActiveMalwareSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetAllCertificatesReport;
using ApiSdk.DeviceManagement.Reports.GetAppStatusOverviewReport;
using ApiSdk.DeviceManagement.Reports.GetAppsInstallSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetCachedReport;
using ApiSdk.DeviceManagement.Reports.GetCertificatesReport;
using ApiSdk.DeviceManagement.Reports.GetCompliancePoliciesReportForDevice;
using ApiSdk.DeviceManagement.Reports.GetCompliancePolicyDeviceSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetCompliancePolicyDevicesReport;
using ApiSdk.DeviceManagement.Reports.GetCompliancePolicyNonComplianceReport;
using ApiSdk.DeviceManagement.Reports.GetCompliancePolicyNonComplianceSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetComplianceSettingDetailsReport;
using ApiSdk.DeviceManagement.Reports.GetComplianceSettingNonComplianceReport;
using ApiSdk.DeviceManagement.Reports.GetComplianceSettingsReport;
using ApiSdk.DeviceManagement.Reports.GetConfigManagerDevicePolicyStatusReport;
using ApiSdk.DeviceManagement.Reports.GetConfigurationPoliciesReportForDevice;
using ApiSdk.DeviceManagement.Reports.GetConfigurationPolicyDeviceSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetConfigurationPolicyDevicesReport;
using ApiSdk.DeviceManagement.Reports.GetConfigurationPolicyNonComplianceReport;
using ApiSdk.DeviceManagement.Reports.GetConfigurationPolicyNonComplianceSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetConfigurationPolicySettingsDeviceSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetConfigurationSettingDetailsReport;
using ApiSdk.DeviceManagement.Reports.GetConfigurationSettingNonComplianceReport;
using ApiSdk.DeviceManagement.Reports.GetConfigurationSettingsReport;
using ApiSdk.DeviceManagement.Reports.GetDeviceConfigurationPolicySettingsSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetDeviceConfigurationPolicyStatusSummary;
using ApiSdk.DeviceManagement.Reports.GetDeviceInstallStatusReport;
using ApiSdk.DeviceManagement.Reports.GetDeviceManagementIntentPerSettingContributingProfiles;
using ApiSdk.DeviceManagement.Reports.GetDeviceManagementIntentSettingsReport;
using ApiSdk.DeviceManagement.Reports.GetDeviceNonComplianceReport;
using ApiSdk.DeviceManagement.Reports.GetDevicePoliciesComplianceReport;
using ApiSdk.DeviceManagement.Reports.GetDevicePolicySettingsComplianceReport;
using ApiSdk.DeviceManagement.Reports.GetDeviceStatusByCompliacePolicyReport;
using ApiSdk.DeviceManagement.Reports.GetDeviceStatusByCompliancePolicySettingReport;
using ApiSdk.DeviceManagement.Reports.GetDeviceStatusSummaryByCompliacePolicyReport;
using ApiSdk.DeviceManagement.Reports.GetDeviceStatusSummaryByCompliancePolicySettingsReport;
using ApiSdk.DeviceManagement.Reports.GetDevicesStatusByPolicyPlatformComplianceReport;
using ApiSdk.DeviceManagement.Reports.GetDevicesStatusBySettingReport;
using ApiSdk.DeviceManagement.Reports.GetDevicesWithoutCompliancePolicyReport;
using ApiSdk.DeviceManagement.Reports.GetEncryptionReportForDevices;
using ApiSdk.DeviceManagement.Reports.GetEnrollmentConfigurationPoliciesByDevice;
using ApiSdk.DeviceManagement.Reports.GetFailedMobileAppsReport;
using ApiSdk.DeviceManagement.Reports.GetFailedMobileAppsSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetGroupPolicySettingsDeviceSettingsReport;
using ApiSdk.DeviceManagement.Reports.GetHistoricalReport;
using ApiSdk.DeviceManagement.Reports.GetMalwareSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetMobileApplicationManagementAppConfigurationReport;
using ApiSdk.DeviceManagement.Reports.GetMobileApplicationManagementAppRegistrationSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetNoncompliantDevicesAndSettingsReport;
using ApiSdk.DeviceManagement.Reports.GetPolicyNonComplianceMetadata;
using ApiSdk.DeviceManagement.Reports.GetPolicyNonComplianceReport;
using ApiSdk.DeviceManagement.Reports.GetPolicyNonComplianceSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetQuietTimePolicyUserSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetQuietTimePolicyUsersReport;
using ApiSdk.DeviceManagement.Reports.GetRelatedAppsStatusReport;
using ApiSdk.DeviceManagement.Reports.GetRemoteAssistanceSessionsReport;
using ApiSdk.DeviceManagement.Reports.GetReportFilters;
using ApiSdk.DeviceManagement.Reports.GetSettingNonComplianceReport;
using ApiSdk.DeviceManagement.Reports.GetUnhealthyDefenderAgentsReport;
using ApiSdk.DeviceManagement.Reports.GetUnhealthyFirewallReport;
using ApiSdk.DeviceManagement.Reports.GetUnhealthyFirewallSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetUserInstallStatusReport;
using ApiSdk.DeviceManagement.Reports.GetWindowsDriverUpdateAlertSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetWindowsDriverUpdateAlertsPerPolicyPerDeviceReport;
using ApiSdk.DeviceManagement.Reports.GetWindowsQualityUpdateAlertSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetWindowsQualityUpdateAlertsPerPolicyPerDeviceReport;
using ApiSdk.DeviceManagement.Reports.GetWindowsUpdateAlertSummaryReport;
using ApiSdk.DeviceManagement.Reports.GetWindowsUpdateAlertsPerPolicyPerDeviceReport;
using ApiSdk.DeviceManagement.Reports.GetZebraFotaDeploymentReport;
using ApiSdk.Models.ODataErrors;
using ApiSdk.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.DeviceManagement.Reports
{
    /// <summary>
    /// Provides operations to manage the reports property of the microsoft.graph.deviceManagement entity.
    /// </summary>
    public class ReportsRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// Provides operations to manage the cachedReportConfigurations property of the microsoft.graph.deviceManagementReports entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCachedReportConfigurationsNavCommand()
        {
            var command = new Command("cached-report-configurations");
            command.Description = "Provides operations to manage the cachedReportConfigurations property of the microsoft.graph.deviceManagementReports entity.";
            var builder = new CachedReportConfigurationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Delete navigation property reports for deviceManagement
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeleteCommand()
        {
            var command = new Command("delete");
            command.Description = "Delete navigation property reports for deviceManagement";
            var ifMatchOption = new Option<string[]>("--if-match", description: "ETag") {
                Arity = ArgumentArity.ZeroOrMore
            };
            ifMatchOption.IsRequired = false;
            command.AddOption(ifMatchOption);
            command.SetHandler(async (invocationContext) => {
                var ifMatch = invocationContext.ParseResult.GetValueForOption(ifMatchOption);
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToDeleteRequestInformation(q => {
                });
                if (ifMatch is not null) requestInfo.Headers.Add("If-Match", ifMatch);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                await reqAdapter.SendNoContentAsync(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken);
                Console.WriteLine("Success");
            });
            return command;
        }
        /// <summary>
        /// Provides operations to manage the exportJobs property of the microsoft.graph.deviceManagementReports entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildExportJobsNavCommand()
        {
            var command = new Command("export-jobs");
            command.Description = "Provides operations to manage the exportJobs property of the microsoft.graph.deviceManagementReports entity.";
            var builder = new ExportJobsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getActiveMalwareReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetActiveMalwareReportNavCommand()
        {
            var command = new Command("get-active-malware-report");
            command.Description = "Provides operations to call the getActiveMalwareReport method.";
            var builder = new GetActiveMalwareReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getActiveMalwareSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetActiveMalwareSummaryReportNavCommand()
        {
            var command = new Command("get-active-malware-summary-report");
            command.Description = "Provides operations to call the getActiveMalwareSummaryReport method.";
            var builder = new GetActiveMalwareSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getAllCertificatesReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetAllCertificatesReportNavCommand()
        {
            var command = new Command("get-all-certificates-report");
            command.Description = "Provides operations to call the getAllCertificatesReport method.";
            var builder = new GetAllCertificatesReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getAppsInstallSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetAppsInstallSummaryReportNavCommand()
        {
            var command = new Command("get-apps-install-summary-report");
            command.Description = "Provides operations to call the getAppsInstallSummaryReport method.";
            var builder = new GetAppsInstallSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getAppStatusOverviewReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetAppStatusOverviewReportNavCommand()
        {
            var command = new Command("get-app-status-overview-report");
            command.Description = "Provides operations to call the getAppStatusOverviewReport method.";
            var builder = new GetAppStatusOverviewReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getCachedReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCachedReportNavCommand()
        {
            var command = new Command("get-cached-report");
            command.Description = "Provides operations to call the getCachedReport method.";
            var builder = new GetCachedReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getCertificatesReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCertificatesReportNavCommand()
        {
            var command = new Command("get-certificates-report");
            command.Description = "Provides operations to call the getCertificatesReport method.";
            var builder = new GetCertificatesReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Reports singleton
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCommand()
        {
            var command = new Command("get");
            command.Description = "Reports singleton";
            var selectOption = new Option<string[]>("--select", description: "Select properties to be returned") {
                Arity = ArgumentArity.ZeroOrMore
            };
            selectOption.IsRequired = false;
            command.AddOption(selectOption);
            var expandOption = new Option<string[]>("--expand", description: "Expand related entities") {
                Arity = ArgumentArity.ZeroOrMore
            };
            expandOption.IsRequired = false;
            command.AddOption(expandOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var select = invocationContext.ParseResult.GetValueForOption(selectOption);
                var expand = invocationContext.ParseResult.GetValueForOption(expandOption);
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                    q.QueryParameters.Select = select;
                    q.QueryParameters.Expand = expand;
                });
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Provides operations to call the getCompliancePoliciesReportForDevice method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCompliancePoliciesReportForDeviceNavCommand()
        {
            var command = new Command("get-compliance-policies-report-for-device");
            command.Description = "Provides operations to call the getCompliancePoliciesReportForDevice method.";
            var builder = new GetCompliancePoliciesReportForDeviceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getCompliancePolicyDevicesReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCompliancePolicyDevicesReportNavCommand()
        {
            var command = new Command("get-compliance-policy-devices-report");
            command.Description = "Provides operations to call the getCompliancePolicyDevicesReport method.";
            var builder = new GetCompliancePolicyDevicesReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getCompliancePolicyDeviceSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCompliancePolicyDeviceSummaryReportNavCommand()
        {
            var command = new Command("get-compliance-policy-device-summary-report");
            command.Description = "Provides operations to call the getCompliancePolicyDeviceSummaryReport method.";
            var builder = new GetCompliancePolicyDeviceSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getCompliancePolicyNonComplianceReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCompliancePolicyNonComplianceReportNavCommand()
        {
            var command = new Command("get-compliance-policy-non-compliance-report");
            command.Description = "Provides operations to call the getCompliancePolicyNonComplianceReport method.";
            var builder = new GetCompliancePolicyNonComplianceReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getCompliancePolicyNonComplianceSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCompliancePolicyNonComplianceSummaryReportNavCommand()
        {
            var command = new Command("get-compliance-policy-non-compliance-summary-report");
            command.Description = "Provides operations to call the getCompliancePolicyNonComplianceSummaryReport method.";
            var builder = new GetCompliancePolicyNonComplianceSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getComplianceSettingDetailsReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetComplianceSettingDetailsReportNavCommand()
        {
            var command = new Command("get-compliance-setting-details-report");
            command.Description = "Provides operations to call the getComplianceSettingDetailsReport method.";
            var builder = new GetComplianceSettingDetailsReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getComplianceSettingNonComplianceReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetComplianceSettingNonComplianceReportNavCommand()
        {
            var command = new Command("get-compliance-setting-non-compliance-report");
            command.Description = "Provides operations to call the getComplianceSettingNonComplianceReport method.";
            var builder = new GetComplianceSettingNonComplianceReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getComplianceSettingsReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetComplianceSettingsReportNavCommand()
        {
            var command = new Command("get-compliance-settings-report");
            command.Description = "Provides operations to call the getComplianceSettingsReport method.";
            var builder = new GetComplianceSettingsReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getConfigManagerDevicePolicyStatusReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetConfigManagerDevicePolicyStatusReportNavCommand()
        {
            var command = new Command("get-config-manager-device-policy-status-report");
            command.Description = "Provides operations to call the getConfigManagerDevicePolicyStatusReport method.";
            var builder = new GetConfigManagerDevicePolicyStatusReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getConfigurationPoliciesReportForDevice method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetConfigurationPoliciesReportForDeviceNavCommand()
        {
            var command = new Command("get-configuration-policies-report-for-device");
            command.Description = "Provides operations to call the getConfigurationPoliciesReportForDevice method.";
            var builder = new GetConfigurationPoliciesReportForDeviceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getConfigurationPolicyDevicesReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetConfigurationPolicyDevicesReportNavCommand()
        {
            var command = new Command("get-configuration-policy-devices-report");
            command.Description = "Provides operations to call the getConfigurationPolicyDevicesReport method.";
            var builder = new GetConfigurationPolicyDevicesReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getConfigurationPolicyDeviceSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetConfigurationPolicyDeviceSummaryReportNavCommand()
        {
            var command = new Command("get-configuration-policy-device-summary-report");
            command.Description = "Provides operations to call the getConfigurationPolicyDeviceSummaryReport method.";
            var builder = new GetConfigurationPolicyDeviceSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getConfigurationPolicyNonComplianceReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetConfigurationPolicyNonComplianceReportNavCommand()
        {
            var command = new Command("get-configuration-policy-non-compliance-report");
            command.Description = "Provides operations to call the getConfigurationPolicyNonComplianceReport method.";
            var builder = new GetConfigurationPolicyNonComplianceReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getConfigurationPolicyNonComplianceSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetConfigurationPolicyNonComplianceSummaryReportNavCommand()
        {
            var command = new Command("get-configuration-policy-non-compliance-summary-report");
            command.Description = "Provides operations to call the getConfigurationPolicyNonComplianceSummaryReport method.";
            var builder = new GetConfigurationPolicyNonComplianceSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getConfigurationPolicySettingsDeviceSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetConfigurationPolicySettingsDeviceSummaryReportNavCommand()
        {
            var command = new Command("get-configuration-policy-settings-device-summary-report");
            command.Description = "Provides operations to call the getConfigurationPolicySettingsDeviceSummaryReport method.";
            var builder = new GetConfigurationPolicySettingsDeviceSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getConfigurationSettingDetailsReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetConfigurationSettingDetailsReportNavCommand()
        {
            var command = new Command("get-configuration-setting-details-report");
            command.Description = "Provides operations to call the getConfigurationSettingDetailsReport method.";
            var builder = new GetConfigurationSettingDetailsReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getConfigurationSettingNonComplianceReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetConfigurationSettingNonComplianceReportNavCommand()
        {
            var command = new Command("get-configuration-setting-non-compliance-report");
            command.Description = "Provides operations to call the getConfigurationSettingNonComplianceReport method.";
            var builder = new GetConfigurationSettingNonComplianceReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getConfigurationSettingsReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetConfigurationSettingsReportNavCommand()
        {
            var command = new Command("get-configuration-settings-report");
            command.Description = "Provides operations to call the getConfigurationSettingsReport method.";
            var builder = new GetConfigurationSettingsReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getDeviceConfigurationPolicySettingsSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetDeviceConfigurationPolicySettingsSummaryReportNavCommand()
        {
            var command = new Command("get-device-configuration-policy-settings-summary-report");
            command.Description = "Provides operations to call the getDeviceConfigurationPolicySettingsSummaryReport method.";
            var builder = new GetDeviceConfigurationPolicySettingsSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getDeviceConfigurationPolicyStatusSummary method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetDeviceConfigurationPolicyStatusSummaryNavCommand()
        {
            var command = new Command("get-device-configuration-policy-status-summary");
            command.Description = "Provides operations to call the getDeviceConfigurationPolicyStatusSummary method.";
            var builder = new GetDeviceConfigurationPolicyStatusSummaryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getDeviceInstallStatusReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetDeviceInstallStatusReportNavCommand()
        {
            var command = new Command("get-device-install-status-report");
            command.Description = "Provides operations to call the getDeviceInstallStatusReport method.";
            var builder = new GetDeviceInstallStatusReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getDeviceManagementIntentPerSettingContributingProfiles method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetDeviceManagementIntentPerSettingContributingProfilesNavCommand()
        {
            var command = new Command("get-device-management-intent-per-setting-contributing-profiles");
            command.Description = "Provides operations to call the getDeviceManagementIntentPerSettingContributingProfiles method.";
            var builder = new GetDeviceManagementIntentPerSettingContributingProfilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getDeviceManagementIntentSettingsReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetDeviceManagementIntentSettingsReportNavCommand()
        {
            var command = new Command("get-device-management-intent-settings-report");
            command.Description = "Provides operations to call the getDeviceManagementIntentSettingsReport method.";
            var builder = new GetDeviceManagementIntentSettingsReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getDeviceNonComplianceReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetDeviceNonComplianceReportNavCommand()
        {
            var command = new Command("get-device-non-compliance-report");
            command.Description = "Provides operations to call the getDeviceNonComplianceReport method.";
            var builder = new GetDeviceNonComplianceReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getDevicePoliciesComplianceReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetDevicePoliciesComplianceReportNavCommand()
        {
            var command = new Command("get-device-policies-compliance-report");
            command.Description = "Provides operations to call the getDevicePoliciesComplianceReport method.";
            var builder = new GetDevicePoliciesComplianceReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getDevicePolicySettingsComplianceReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetDevicePolicySettingsComplianceReportNavCommand()
        {
            var command = new Command("get-device-policy-settings-compliance-report");
            command.Description = "Provides operations to call the getDevicePolicySettingsComplianceReport method.";
            var builder = new GetDevicePolicySettingsComplianceReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getDevicesStatusByPolicyPlatformComplianceReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetDevicesStatusByPolicyPlatformComplianceReportNavCommand()
        {
            var command = new Command("get-devices-status-by-policy-platform-compliance-report");
            command.Description = "Provides operations to call the getDevicesStatusByPolicyPlatformComplianceReport method.";
            var builder = new GetDevicesStatusByPolicyPlatformComplianceReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getDevicesStatusBySettingReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetDevicesStatusBySettingReportNavCommand()
        {
            var command = new Command("get-devices-status-by-setting-report");
            command.Description = "Provides operations to call the getDevicesStatusBySettingReport method.";
            var builder = new GetDevicesStatusBySettingReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getDeviceStatusByCompliacePolicyReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetDeviceStatusByCompliacePolicyReportNavCommand()
        {
            var command = new Command("get-device-status-by-compliace-policy-report");
            command.Description = "Provides operations to call the getDeviceStatusByCompliacePolicyReport method.";
            var builder = new GetDeviceStatusByCompliacePolicyReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getDeviceStatusByCompliancePolicySettingReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetDeviceStatusByCompliancePolicySettingReportNavCommand()
        {
            var command = new Command("get-device-status-by-compliance-policy-setting-report");
            command.Description = "Provides operations to call the getDeviceStatusByCompliancePolicySettingReport method.";
            var builder = new GetDeviceStatusByCompliancePolicySettingReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getDeviceStatusSummaryByCompliacePolicyReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetDeviceStatusSummaryByCompliacePolicyReportNavCommand()
        {
            var command = new Command("get-device-status-summary-by-compliace-policy-report");
            command.Description = "Provides operations to call the getDeviceStatusSummaryByCompliacePolicyReport method.";
            var builder = new GetDeviceStatusSummaryByCompliacePolicyReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getDeviceStatusSummaryByCompliancePolicySettingsReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetDeviceStatusSummaryByCompliancePolicySettingsReportNavCommand()
        {
            var command = new Command("get-device-status-summary-by-compliance-policy-settings-report");
            command.Description = "Provides operations to call the getDeviceStatusSummaryByCompliancePolicySettingsReport method.";
            var builder = new GetDeviceStatusSummaryByCompliancePolicySettingsReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getDevicesWithoutCompliancePolicyReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetDevicesWithoutCompliancePolicyReportNavCommand()
        {
            var command = new Command("get-devices-without-compliance-policy-report");
            command.Description = "Provides operations to call the getDevicesWithoutCompliancePolicyReport method.";
            var builder = new GetDevicesWithoutCompliancePolicyReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getEncryptionReportForDevices method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetEncryptionReportForDevicesNavCommand()
        {
            var command = new Command("get-encryption-report-for-devices");
            command.Description = "Provides operations to call the getEncryptionReportForDevices method.";
            var builder = new GetEncryptionReportForDevicesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getEnrollmentConfigurationPoliciesByDevice method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetEnrollmentConfigurationPoliciesByDeviceNavCommand()
        {
            var command = new Command("get-enrollment-configuration-policies-by-device");
            command.Description = "Provides operations to call the getEnrollmentConfigurationPoliciesByDevice method.";
            var builder = new GetEnrollmentConfigurationPoliciesByDeviceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getFailedMobileAppsReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetFailedMobileAppsReportNavCommand()
        {
            var command = new Command("get-failed-mobile-apps-report");
            command.Description = "Provides operations to call the getFailedMobileAppsReport method.";
            var builder = new GetFailedMobileAppsReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getFailedMobileAppsSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetFailedMobileAppsSummaryReportNavCommand()
        {
            var command = new Command("get-failed-mobile-apps-summary-report");
            command.Description = "Provides operations to call the getFailedMobileAppsSummaryReport method.";
            var builder = new GetFailedMobileAppsSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getGroupPolicySettingsDeviceSettingsReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetGroupPolicySettingsDeviceSettingsReportNavCommand()
        {
            var command = new Command("get-group-policy-settings-device-settings-report");
            command.Description = "Provides operations to call the getGroupPolicySettingsDeviceSettingsReport method.";
            var builder = new GetGroupPolicySettingsDeviceSettingsReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getHistoricalReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetHistoricalReportNavCommand()
        {
            var command = new Command("get-historical-report");
            command.Description = "Provides operations to call the getHistoricalReport method.";
            var builder = new GetHistoricalReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getMalwareSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetMalwareSummaryReportNavCommand()
        {
            var command = new Command("get-malware-summary-report");
            command.Description = "Provides operations to call the getMalwareSummaryReport method.";
            var builder = new GetMalwareSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getMobileApplicationManagementAppConfigurationReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetMobileApplicationManagementAppConfigurationReportNavCommand()
        {
            var command = new Command("get-mobile-application-management-app-configuration-report");
            command.Description = "Provides operations to call the getMobileApplicationManagementAppConfigurationReport method.";
            var builder = new GetMobileApplicationManagementAppConfigurationReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getMobileApplicationManagementAppRegistrationSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetMobileApplicationManagementAppRegistrationSummaryReportNavCommand()
        {
            var command = new Command("get-mobile-application-management-app-registration-summary-report");
            command.Description = "Provides operations to call the getMobileApplicationManagementAppRegistrationSummaryReport method.";
            var builder = new GetMobileApplicationManagementAppRegistrationSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getNoncompliantDevicesAndSettingsReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetNoncompliantDevicesAndSettingsReportNavCommand()
        {
            var command = new Command("get-noncompliant-devices-and-settings-report");
            command.Description = "Provides operations to call the getNoncompliantDevicesAndSettingsReport method.";
            var builder = new GetNoncompliantDevicesAndSettingsReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getPolicyNonComplianceMetadata method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetPolicyNonComplianceMetadataNavCommand()
        {
            var command = new Command("get-policy-non-compliance-metadata");
            command.Description = "Provides operations to call the getPolicyNonComplianceMetadata method.";
            var builder = new GetPolicyNonComplianceMetadataRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getPolicyNonComplianceReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetPolicyNonComplianceReportNavCommand()
        {
            var command = new Command("get-policy-non-compliance-report");
            command.Description = "Provides operations to call the getPolicyNonComplianceReport method.";
            var builder = new GetPolicyNonComplianceReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getPolicyNonComplianceSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetPolicyNonComplianceSummaryReportNavCommand()
        {
            var command = new Command("get-policy-non-compliance-summary-report");
            command.Description = "Provides operations to call the getPolicyNonComplianceSummaryReport method.";
            var builder = new GetPolicyNonComplianceSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getQuietTimePolicyUsersReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetQuietTimePolicyUsersReportNavCommand()
        {
            var command = new Command("get-quiet-time-policy-users-report");
            command.Description = "Provides operations to call the getQuietTimePolicyUsersReport method.";
            var builder = new GetQuietTimePolicyUsersReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getQuietTimePolicyUserSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetQuietTimePolicyUserSummaryReportNavCommand()
        {
            var command = new Command("get-quiet-time-policy-user-summary-report");
            command.Description = "Provides operations to call the getQuietTimePolicyUserSummaryReport method.";
            var builder = new GetQuietTimePolicyUserSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getRelatedAppsStatusReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetRelatedAppsStatusReportNavCommand()
        {
            var command = new Command("get-related-apps-status-report");
            command.Description = "Provides operations to call the getRelatedAppsStatusReport method.";
            var builder = new GetRelatedAppsStatusReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getRemoteAssistanceSessionsReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetRemoteAssistanceSessionsReportNavCommand()
        {
            var command = new Command("get-remote-assistance-sessions-report");
            command.Description = "Provides operations to call the getRemoteAssistanceSessionsReport method.";
            var builder = new GetRemoteAssistanceSessionsReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getReportFilters method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetReportFiltersNavCommand()
        {
            var command = new Command("get-report-filters");
            command.Description = "Provides operations to call the getReportFilters method.";
            var builder = new GetReportFiltersRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSettingNonComplianceReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSettingNonComplianceReportNavCommand()
        {
            var command = new Command("get-setting-non-compliance-report");
            command.Description = "Provides operations to call the getSettingNonComplianceReport method.";
            var builder = new GetSettingNonComplianceReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getUnhealthyDefenderAgentsReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetUnhealthyDefenderAgentsReportNavCommand()
        {
            var command = new Command("get-unhealthy-defender-agents-report");
            command.Description = "Provides operations to call the getUnhealthyDefenderAgentsReport method.";
            var builder = new GetUnhealthyDefenderAgentsReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getUnhealthyFirewallReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetUnhealthyFirewallReportNavCommand()
        {
            var command = new Command("get-unhealthy-firewall-report");
            command.Description = "Provides operations to call the getUnhealthyFirewallReport method.";
            var builder = new GetUnhealthyFirewallReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getUnhealthyFirewallSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetUnhealthyFirewallSummaryReportNavCommand()
        {
            var command = new Command("get-unhealthy-firewall-summary-report");
            command.Description = "Provides operations to call the getUnhealthyFirewallSummaryReport method.";
            var builder = new GetUnhealthyFirewallSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getUserInstallStatusReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetUserInstallStatusReportNavCommand()
        {
            var command = new Command("get-user-install-status-report");
            command.Description = "Provides operations to call the getUserInstallStatusReport method.";
            var builder = new GetUserInstallStatusReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getWindowsDriverUpdateAlertsPerPolicyPerDeviceReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetWindowsDriverUpdateAlertsPerPolicyPerDeviceReportNavCommand()
        {
            var command = new Command("get-windows-driver-update-alerts-per-policy-per-device-report");
            command.Description = "Provides operations to call the getWindowsDriverUpdateAlertsPerPolicyPerDeviceReport method.";
            var builder = new GetWindowsDriverUpdateAlertsPerPolicyPerDeviceReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getWindowsDriverUpdateAlertSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetWindowsDriverUpdateAlertSummaryReportNavCommand()
        {
            var command = new Command("get-windows-driver-update-alert-summary-report");
            command.Description = "Provides operations to call the getWindowsDriverUpdateAlertSummaryReport method.";
            var builder = new GetWindowsDriverUpdateAlertSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getWindowsQualityUpdateAlertsPerPolicyPerDeviceReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetWindowsQualityUpdateAlertsPerPolicyPerDeviceReportNavCommand()
        {
            var command = new Command("get-windows-quality-update-alerts-per-policy-per-device-report");
            command.Description = "Provides operations to call the getWindowsQualityUpdateAlertsPerPolicyPerDeviceReport method.";
            var builder = new GetWindowsQualityUpdateAlertsPerPolicyPerDeviceReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getWindowsQualityUpdateAlertSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetWindowsQualityUpdateAlertSummaryReportNavCommand()
        {
            var command = new Command("get-windows-quality-update-alert-summary-report");
            command.Description = "Provides operations to call the getWindowsQualityUpdateAlertSummaryReport method.";
            var builder = new GetWindowsQualityUpdateAlertSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getWindowsUpdateAlertsPerPolicyPerDeviceReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetWindowsUpdateAlertsPerPolicyPerDeviceReportNavCommand()
        {
            var command = new Command("get-windows-update-alerts-per-policy-per-device-report");
            command.Description = "Provides operations to call the getWindowsUpdateAlertsPerPolicyPerDeviceReport method.";
            var builder = new GetWindowsUpdateAlertsPerPolicyPerDeviceReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getWindowsUpdateAlertSummaryReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetWindowsUpdateAlertSummaryReportNavCommand()
        {
            var command = new Command("get-windows-update-alert-summary-report");
            command.Description = "Provides operations to call the getWindowsUpdateAlertSummaryReport method.";
            var builder = new GetWindowsUpdateAlertSummaryReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getZebraFotaDeploymentReport method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetZebraFotaDeploymentReportNavCommand()
        {
            var command = new Command("get-zebra-fota-deployment-report");
            command.Description = "Provides operations to call the getZebraFotaDeploymentReport method.";
            var builder = new GetZebraFotaDeploymentReportRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Update the navigation property reports in deviceManagement
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPatchCommand()
        {
            var command = new Command("patch");
            command.Description = "Update the navigation property reports in deviceManagement";
            var bodyOption = new Option<string>("--body", description: "The request body") {
            };
            bodyOption.IsRequired = true;
            command.AddOption(bodyOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var body = invocationContext.ParseResult.GetValueForOption(bodyOption) ?? string.Empty;
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                using var stream = new MemoryStream(Encoding.UTF8.GetBytes(body));
                var parseNode = ParseNodeFactoryRegistry.DefaultInstance.GetRootParseNode("application/json", stream);
                var model = parseNode.GetObjectValue<DeviceManagementReports>(DeviceManagementReports.CreateFromDiscriminatorValue);
                if (model is null) {
                    Console.Error.WriteLine("No model data to send.");
                    return;
                }
                var requestInfo = ToPatchRequestInformation(model, q => {
                });
                requestInfo.SetContentFromParsable(reqAdapter, "application/json", model);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="ReportsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public ReportsRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/deviceManagement/reports{?%24expand,%24select}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="ReportsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public ReportsRequestBuilder(string rawUrl) : base("{+baseurl}/deviceManagement/reports{?%24expand,%24select}", rawUrl)
        {
        }
        /// <summary>
        /// Delete navigation property reports for deviceManagement
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Reports singleton
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<ReportsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<ReportsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update the navigation property reports in deviceManagement
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(DeviceManagementReports body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(DeviceManagementReports body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Reports singleton
        /// </summary>
        public class ReportsRequestBuilderGetQueryParameters 
        {
            /// <summary>Expand related entities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("%24expand")]
            public string[] Expand { get; set; }
#endif
            /// <summary>Select properties to be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24select")]
            public string[]? Select { get; set; }
#nullable restore
#else
            [QueryParameter("%24select")]
            public string[] Select { get; set; }
#endif
        }
    }
}
