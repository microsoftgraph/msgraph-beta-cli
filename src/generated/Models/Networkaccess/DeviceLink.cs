// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models.Networkaccess {
    public class DeviceLink : ApiSdk.Models.Entity, IParsable 
    {
        /// <summary>Determines the maximum allowed Mbps (megabits per second) bandwidth from a branch site. The possible values are:250,500,750,1000.</summary>
        public ApiSdk.Models.Networkaccess.BandwidthCapacityInMbps? BandwidthCapacityInMbps { get; set; }
        /// <summary>The bgpConfiguration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ApiSdk.Models.Networkaccess.BgpConfiguration? BgpConfiguration { get; set; }
#nullable restore
#else
        public ApiSdk.Models.Networkaccess.BgpConfiguration BgpConfiguration { get; set; }
#endif
        /// <summary>The deviceVendor property</summary>
        public ApiSdk.Models.Networkaccess.DeviceVendor? DeviceVendor { get; set; }
        /// <summary>Specifies the client IPv4 of the link</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddress { get; set; }
#nullable restore
#else
        public string IpAddress { get; set; }
#endif
        /// <summary>last modified time.</summary>
        public DateTimeOffset? LastModifiedDateTime { get; set; }
        /// <summary>Name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The redundancyConfiguration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ApiSdk.Models.Networkaccess.RedundancyConfiguration? RedundancyConfiguration { get; set; }
#nullable restore
#else
        public ApiSdk.Models.Networkaccess.RedundancyConfiguration RedundancyConfiguration { get; set; }
#endif
        /// <summary>The tunnelConfiguration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ApiSdk.Models.Networkaccess.TunnelConfiguration? TunnelConfiguration { get; set; }
#nullable restore
#else
        public ApiSdk.Models.Networkaccess.TunnelConfiguration TunnelConfiguration { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="DeviceLink"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new DeviceLink CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new DeviceLink();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"bandwidthCapacityInMbps", n => { BandwidthCapacityInMbps = n.GetEnumValue<BandwidthCapacityInMbps>(); } },
                {"bgpConfiguration", n => { BgpConfiguration = n.GetObjectValue<ApiSdk.Models.Networkaccess.BgpConfiguration>(ApiSdk.Models.Networkaccess.BgpConfiguration.CreateFromDiscriminatorValue); } },
                {"deviceVendor", n => { DeviceVendor = n.GetEnumValue<DeviceVendor>(); } },
                {"ipAddress", n => { IpAddress = n.GetStringValue(); } },
                {"lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"redundancyConfiguration", n => { RedundancyConfiguration = n.GetObjectValue<ApiSdk.Models.Networkaccess.RedundancyConfiguration>(ApiSdk.Models.Networkaccess.RedundancyConfiguration.CreateFromDiscriminatorValue); } },
                {"tunnelConfiguration", n => { TunnelConfiguration = n.GetObjectValue<ApiSdk.Models.Networkaccess.TunnelConfiguration>(ApiSdk.Models.Networkaccess.TunnelConfiguration.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<BandwidthCapacityInMbps>("bandwidthCapacityInMbps", BandwidthCapacityInMbps);
            writer.WriteObjectValue<ApiSdk.Models.Networkaccess.BgpConfiguration>("bgpConfiguration", BgpConfiguration);
            writer.WriteEnumValue<DeviceVendor>("deviceVendor", DeviceVendor);
            writer.WriteStringValue("ipAddress", IpAddress);
            writer.WriteDateTimeOffsetValue("lastModifiedDateTime", LastModifiedDateTime);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<ApiSdk.Models.Networkaccess.RedundancyConfiguration>("redundancyConfiguration", RedundancyConfiguration);
            writer.WriteObjectValue<ApiSdk.Models.Networkaccess.TunnelConfiguration>("tunnelConfiguration", TunnelConfiguration);
        }
    }
}
