// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models {
    public class CompanySubscription : Entity, IParsable 
    {
        /// <summary>The ID of this subscription in the commerce system. Alternate key.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CommerceSubscriptionId { get; set; }
#nullable restore
#else
        public string CommerceSubscriptionId { get; set; }
#endif
        /// <summary>The date and time when this subscription was created. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? CreatedDateTime { get; set; }
        /// <summary>Whether the subscription is a free trial or purchased.</summary>
        public bool? IsTrial { get; set; }
        /// <summary>The date and time when the subscription will move to the next state (as defined by the status property) if not renewed by the tenant. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? NextLifecycleDateTime { get; set; }
        /// <summary>The ocpSubscriptionId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OcpSubscriptionId { get; set; }
#nullable restore
#else
        public string OcpSubscriptionId { get; set; }
#endif
        /// <summary>The object ID of the account admin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerId { get; set; }
#nullable restore
#else
        public string OwnerId { get; set; }
#endif
        /// <summary>The unique identifier for the Microsoft partner tenant that created the subscription on a customer tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerTenantId { get; set; }
#nullable restore
#else
        public string OwnerTenantId { get; set; }
#endif
        /// <summary>Indicates the entity that ownerId belongs to, for example, &apos;User&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerType { get; set; }
#nullable restore
#else
        public string OwnerType { get; set; }
#endif
        /// <summary>The provisioning status of each service that&apos;s included in this subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ServicePlanInfo>? ServiceStatus { get; set; }
#nullable restore
#else
        public List<ServicePlanInfo> ServiceStatus { get; set; }
#endif
        /// <summary>The object ID of the SKU associated with this subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SkuId { get; set; }
#nullable restore
#else
        public string SkuId { get; set; }
#endif
        /// <summary>The SKU associated with this subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SkuPartNumber { get; set; }
#nullable restore
#else
        public string SkuPartNumber { get; set; }
#endif
        /// <summary>The status of this subscription. Possible values are: Enabled, Deleted, Suspended, Warning, LockedOut.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The number of seats included in this subscription.</summary>
        public int? TotalLicenses { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="CompanySubscription"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new CompanySubscription CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CompanySubscription();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"commerceSubscriptionId", n => { CommerceSubscriptionId = n.GetStringValue(); } },
                {"createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                {"isTrial", n => { IsTrial = n.GetBoolValue(); } },
                {"nextLifecycleDateTime", n => { NextLifecycleDateTime = n.GetDateTimeOffsetValue(); } },
                {"ocpSubscriptionId", n => { OcpSubscriptionId = n.GetStringValue(); } },
                {"ownerId", n => { OwnerId = n.GetStringValue(); } },
                {"ownerTenantId", n => { OwnerTenantId = n.GetStringValue(); } },
                {"ownerType", n => { OwnerType = n.GetStringValue(); } },
                {"serviceStatus", n => { ServiceStatus = n.GetCollectionOfObjectValues<ServicePlanInfo>(ServicePlanInfo.CreateFromDiscriminatorValue)?.ToList(); } },
                {"skuId", n => { SkuId = n.GetStringValue(); } },
                {"skuPartNumber", n => { SkuPartNumber = n.GetStringValue(); } },
                {"status", n => { Status = n.GetStringValue(); } },
                {"totalLicenses", n => { TotalLicenses = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("commerceSubscriptionId", CommerceSubscriptionId);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteBoolValue("isTrial", IsTrial);
            writer.WriteDateTimeOffsetValue("nextLifecycleDateTime", NextLifecycleDateTime);
            writer.WriteStringValue("ocpSubscriptionId", OcpSubscriptionId);
            writer.WriteStringValue("ownerId", OwnerId);
            writer.WriteStringValue("ownerTenantId", OwnerTenantId);
            writer.WriteStringValue("ownerType", OwnerType);
            writer.WriteCollectionOfObjectValues<ServicePlanInfo>("serviceStatus", ServiceStatus);
            writer.WriteStringValue("skuId", SkuId);
            writer.WriteStringValue("skuPartNumber", SkuPartNumber);
            writer.WriteStringValue("status", Status);
            writer.WriteIntValue("totalLicenses", TotalLicenses);
        }
    }
}
