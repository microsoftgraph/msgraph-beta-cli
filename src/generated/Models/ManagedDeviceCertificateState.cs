// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ManagedDeviceCertificateState : global::ApiSdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Extended key usage</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CertificateEnhancedKeyUsage { get; set; }
#nullable restore
#else
        public string CertificateEnhancedKeyUsage { get; set; }
#endif
        /// <summary>Error code</summary>
        public int? CertificateErrorCode { get; set; }
        /// <summary>Certificate expiry date</summary>
        public DateTimeOffset? CertificateExpirationDateTime { get; set; }
        /// <summary>Issuance date</summary>
        public DateTimeOffset? CertificateIssuanceDateTime { get; set; }
        /// <summary>Certificate Issuance State Options.</summary>
        public global::ApiSdk.Models.CertificateIssuanceStates? CertificateIssuanceState { get; set; }
        /// <summary>Issuer</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CertificateIssuer { get; set; }
#nullable restore
#else
        public string CertificateIssuer { get; set; }
#endif
        /// <summary>Key length</summary>
        public int? CertificateKeyLength { get; set; }
        /// <summary>Key Storage Provider (KSP) Import Options.</summary>
        public global::ApiSdk.Models.KeyStorageProviderOption? CertificateKeyStorageProvider { get; set; }
        /// <summary>Key Usage Options.</summary>
        public global::ApiSdk.Models.KeyUsages? CertificateKeyUsage { get; set; }
        /// <summary>Last certificate issuance state change</summary>
        public DateTimeOffset? CertificateLastIssuanceStateChangedDateTime { get; set; }
        /// <summary>Certificate profile display name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CertificateProfileDisplayName { get; set; }
#nullable restore
#else
        public string CertificateProfileDisplayName { get; set; }
#endif
        /// <summary>Certificate Revocation Status.</summary>
        public global::ApiSdk.Models.CertificateRevocationStatus? CertificateRevokeStatus { get; set; }
        /// <summary>Serial number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CertificateSerialNumber { get; set; }
#nullable restore
#else
        public string CertificateSerialNumber { get; set; }
#endif
        /// <summary>Subject Alternative Name Options.</summary>
        public global::ApiSdk.Models.SubjectAlternativeNameType? CertificateSubjectAlternativeNameFormat { get; set; }
        /// <summary>Subject alternative name format string for custom formats</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CertificateSubjectAlternativeNameFormatString { get; set; }
#nullable restore
#else
        public string CertificateSubjectAlternativeNameFormatString { get; set; }
#endif
        /// <summary>Subject Name Format Options.</summary>
        public global::ApiSdk.Models.SubjectNameFormat? CertificateSubjectNameFormat { get; set; }
        /// <summary>Subject name format string for custom subject name formats</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CertificateSubjectNameFormatString { get; set; }
#nullable restore
#else
        public string CertificateSubjectNameFormatString { get; set; }
#endif
        /// <summary>Thumbprint</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CertificateThumbprint { get; set; }
#nullable restore
#else
        public string CertificateThumbprint { get; set; }
#endif
        /// <summary>Validity period</summary>
        public int? CertificateValidityPeriod { get; set; }
        /// <summary>Certificate Validity Period Options.</summary>
        public global::ApiSdk.Models.CertificateValidityPeriodScale? CertificateValidityPeriodUnits { get; set; }
        /// <summary>Device display name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceDisplayName { get; set; }
#nullable restore
#else
        public string DeviceDisplayName { get; set; }
#endif
        /// <summary>Supported platform types.</summary>
        public global::ApiSdk.Models.DevicePlatformType? DevicePlatform { get; set; }
        /// <summary>Last certificate issuance state change</summary>
        public DateTimeOffset? LastCertificateStateChangeDateTime { get; set; }
        /// <summary>User display name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserDisplayName { get; set; }
#nullable restore
#else
        public string UserDisplayName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.ManagedDeviceCertificateState"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.ManagedDeviceCertificateState CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.ManagedDeviceCertificateState();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "certificateEnhancedKeyUsage", n => { CertificateEnhancedKeyUsage = n.GetStringValue(); } },
                { "certificateErrorCode", n => { CertificateErrorCode = n.GetIntValue(); } },
                { "certificateExpirationDateTime", n => { CertificateExpirationDateTime = n.GetDateTimeOffsetValue(); } },
                { "certificateIssuanceDateTime", n => { CertificateIssuanceDateTime = n.GetDateTimeOffsetValue(); } },
                { "certificateIssuanceState", n => { CertificateIssuanceState = n.GetEnumValue<global::ApiSdk.Models.CertificateIssuanceStates>(); } },
                { "certificateIssuer", n => { CertificateIssuer = n.GetStringValue(); } },
                { "certificateKeyLength", n => { CertificateKeyLength = n.GetIntValue(); } },
                { "certificateKeyStorageProvider", n => { CertificateKeyStorageProvider = n.GetEnumValue<global::ApiSdk.Models.KeyStorageProviderOption>(); } },
                { "certificateKeyUsage", n => { CertificateKeyUsage = n.GetEnumValue<global::ApiSdk.Models.KeyUsages>(); } },
                { "certificateLastIssuanceStateChangedDateTime", n => { CertificateLastIssuanceStateChangedDateTime = n.GetDateTimeOffsetValue(); } },
                { "certificateProfileDisplayName", n => { CertificateProfileDisplayName = n.GetStringValue(); } },
                { "certificateRevokeStatus", n => { CertificateRevokeStatus = n.GetEnumValue<global::ApiSdk.Models.CertificateRevocationStatus>(); } },
                { "certificateSerialNumber", n => { CertificateSerialNumber = n.GetStringValue(); } },
                { "certificateSubjectAlternativeNameFormat", n => { CertificateSubjectAlternativeNameFormat = n.GetEnumValue<global::ApiSdk.Models.SubjectAlternativeNameType>(); } },
                { "certificateSubjectAlternativeNameFormatString", n => { CertificateSubjectAlternativeNameFormatString = n.GetStringValue(); } },
                { "certificateSubjectNameFormat", n => { CertificateSubjectNameFormat = n.GetEnumValue<global::ApiSdk.Models.SubjectNameFormat>(); } },
                { "certificateSubjectNameFormatString", n => { CertificateSubjectNameFormatString = n.GetStringValue(); } },
                { "certificateThumbprint", n => { CertificateThumbprint = n.GetStringValue(); } },
                { "certificateValidityPeriod", n => { CertificateValidityPeriod = n.GetIntValue(); } },
                { "certificateValidityPeriodUnits", n => { CertificateValidityPeriodUnits = n.GetEnumValue<global::ApiSdk.Models.CertificateValidityPeriodScale>(); } },
                { "deviceDisplayName", n => { DeviceDisplayName = n.GetStringValue(); } },
                { "devicePlatform", n => { DevicePlatform = n.GetEnumValue<global::ApiSdk.Models.DevicePlatformType>(); } },
                { "lastCertificateStateChangeDateTime", n => { LastCertificateStateChangeDateTime = n.GetDateTimeOffsetValue(); } },
                { "userDisplayName", n => { UserDisplayName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("certificateEnhancedKeyUsage", CertificateEnhancedKeyUsage);
            writer.WriteIntValue("certificateErrorCode", CertificateErrorCode);
            writer.WriteDateTimeOffsetValue("certificateExpirationDateTime", CertificateExpirationDateTime);
            writer.WriteDateTimeOffsetValue("certificateIssuanceDateTime", CertificateIssuanceDateTime);
            writer.WriteEnumValue<global::ApiSdk.Models.CertificateIssuanceStates>("certificateIssuanceState", CertificateIssuanceState);
            writer.WriteStringValue("certificateIssuer", CertificateIssuer);
            writer.WriteIntValue("certificateKeyLength", CertificateKeyLength);
            writer.WriteEnumValue<global::ApiSdk.Models.KeyStorageProviderOption>("certificateKeyStorageProvider", CertificateKeyStorageProvider);
            writer.WriteEnumValue<global::ApiSdk.Models.KeyUsages>("certificateKeyUsage", CertificateKeyUsage);
            writer.WriteDateTimeOffsetValue("certificateLastIssuanceStateChangedDateTime", CertificateLastIssuanceStateChangedDateTime);
            writer.WriteStringValue("certificateProfileDisplayName", CertificateProfileDisplayName);
            writer.WriteEnumValue<global::ApiSdk.Models.CertificateRevocationStatus>("certificateRevokeStatus", CertificateRevokeStatus);
            writer.WriteStringValue("certificateSerialNumber", CertificateSerialNumber);
            writer.WriteEnumValue<global::ApiSdk.Models.SubjectAlternativeNameType>("certificateSubjectAlternativeNameFormat", CertificateSubjectAlternativeNameFormat);
            writer.WriteStringValue("certificateSubjectAlternativeNameFormatString", CertificateSubjectAlternativeNameFormatString);
            writer.WriteEnumValue<global::ApiSdk.Models.SubjectNameFormat>("certificateSubjectNameFormat", CertificateSubjectNameFormat);
            writer.WriteStringValue("certificateSubjectNameFormatString", CertificateSubjectNameFormatString);
            writer.WriteStringValue("certificateThumbprint", CertificateThumbprint);
            writer.WriteIntValue("certificateValidityPeriod", CertificateValidityPeriod);
            writer.WriteEnumValue<global::ApiSdk.Models.CertificateValidityPeriodScale>("certificateValidityPeriodUnits", CertificateValidityPeriodUnits);
            writer.WriteStringValue("deviceDisplayName", DeviceDisplayName);
            writer.WriteEnumValue<global::ApiSdk.Models.DevicePlatformType>("devicePlatform", DevicePlatform);
            writer.WriteDateTimeOffsetValue("lastCertificateStateChangeDateTime", LastCertificateStateChangeDateTime);
            writer.WriteStringValue("userDisplayName", UserDisplayName);
        }
    }
}
#pragma warning restore CS0618
