// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models {
    /// <summary>
    /// Windows Autopilot Deployment Profile
    /// </summary>
    public class WindowsAutopilotDeploymentProfile : Entity, IParsable 
    {
        /// <summary>The list of assigned devices for the profile.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WindowsAutopilotDeviceIdentity>? AssignedDevices { get; set; }
#nullable restore
#else
        public List<WindowsAutopilotDeviceIdentity> AssignedDevices { get; set; }
#endif
        /// <summary>The list of group assignments for the profile.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WindowsAutopilotDeploymentProfileAssignment>? Assignments { get; set; }
#nullable restore
#else
        public List<WindowsAutopilotDeploymentProfileAssignment> Assignments { get; set; }
#endif
        /// <summary>Profile creation time</summary>
        public DateTimeOffset? CreatedDateTime { get; set; }
        /// <summary>Description of the profile</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The template used to name the AutoPilot Device. This can be a custom text and can also contain either the serial number of the device, or a randomly generated number. The total length of the text generated by the template can be no more than 15 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceNameTemplate { get; set; }
#nullable restore
#else
        public string DeviceNameTemplate { get; set; }
#endif
        /// <summary>The deviceType property</summary>
        public WindowsAutopilotDeviceType? DeviceType { get; set; }
        /// <summary>Name of the profile</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Enable Autopilot White Glove for the profile.</summary>
        public bool? EnableWhiteGlove { get; set; }
        /// <summary>Enrollment status screen setting</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public WindowsEnrollmentStatusScreenSettings? EnrollmentStatusScreenSettings { get; set; }
#nullable restore
#else
        public WindowsEnrollmentStatusScreenSettings EnrollmentStatusScreenSettings { get; set; }
#endif
        /// <summary>HardwareHash Extraction for the profile</summary>
        public bool? ExtractHardwareHash { get; set; }
        /// <summary>Language configured on the device</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Language { get; set; }
#nullable restore
#else
        public string Language { get; set; }
#endif
        /// <summary>Profile last modified time</summary>
        public DateTimeOffset? LastModifiedDateTime { get; set; }
        /// <summary>AzureAD management app ID used during client device-based enrollment discovery</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ManagementServiceAppId { get; set; }
#nullable restore
#else
        public string ManagementServiceAppId { get; set; }
#endif
        /// <summary>Out of box experience setting</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ApiSdk.Models.OutOfBoxExperienceSettings? OutOfBoxExperienceSettings { get; set; }
#nullable restore
#else
        public ApiSdk.Models.OutOfBoxExperienceSettings OutOfBoxExperienceSettings { get; set; }
#endif
        /// <summary>Scope tags for the profile.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RoleScopeTagIds { get; set; }
#nullable restore
#else
        public List<string> RoleScopeTagIds { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="WindowsAutopilotDeploymentProfile"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new WindowsAutopilotDeploymentProfile CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.activeDirectoryWindowsAutopilotDeploymentProfile" => new ActiveDirectoryWindowsAutopilotDeploymentProfile(),
                "#microsoft.graph.azureADWindowsAutopilotDeploymentProfile" => new AzureADWindowsAutopilotDeploymentProfile(),
                _ => new WindowsAutopilotDeploymentProfile(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"assignedDevices", n => { AssignedDevices = n.GetCollectionOfObjectValues<WindowsAutopilotDeviceIdentity>(WindowsAutopilotDeviceIdentity.CreateFromDiscriminatorValue)?.ToList(); } },
                {"assignments", n => { Assignments = n.GetCollectionOfObjectValues<WindowsAutopilotDeploymentProfileAssignment>(WindowsAutopilotDeploymentProfileAssignment.CreateFromDiscriminatorValue)?.ToList(); } },
                {"createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"deviceNameTemplate", n => { DeviceNameTemplate = n.GetStringValue(); } },
                {"deviceType", n => { DeviceType = n.GetEnumValue<WindowsAutopilotDeviceType>(); } },
                {"displayName", n => { DisplayName = n.GetStringValue(); } },
                {"enableWhiteGlove", n => { EnableWhiteGlove = n.GetBoolValue(); } },
                {"enrollmentStatusScreenSettings", n => { EnrollmentStatusScreenSettings = n.GetObjectValue<WindowsEnrollmentStatusScreenSettings>(WindowsEnrollmentStatusScreenSettings.CreateFromDiscriminatorValue); } },
                {"extractHardwareHash", n => { ExtractHardwareHash = n.GetBoolValue(); } },
                {"language", n => { Language = n.GetStringValue(); } },
                {"lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                {"managementServiceAppId", n => { ManagementServiceAppId = n.GetStringValue(); } },
                {"outOfBoxExperienceSettings", n => { OutOfBoxExperienceSettings = n.GetObjectValue<ApiSdk.Models.OutOfBoxExperienceSettings>(ApiSdk.Models.OutOfBoxExperienceSettings.CreateFromDiscriminatorValue); } },
                {"roleScopeTagIds", n => { RoleScopeTagIds = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<WindowsAutopilotDeviceIdentity>("assignedDevices", AssignedDevices);
            writer.WriteCollectionOfObjectValues<WindowsAutopilotDeploymentProfileAssignment>("assignments", Assignments);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("deviceNameTemplate", DeviceNameTemplate);
            writer.WriteEnumValue<WindowsAutopilotDeviceType>("deviceType", DeviceType);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteBoolValue("enableWhiteGlove", EnableWhiteGlove);
            writer.WriteObjectValue<WindowsEnrollmentStatusScreenSettings>("enrollmentStatusScreenSettings", EnrollmentStatusScreenSettings);
            writer.WriteBoolValue("extractHardwareHash", ExtractHardwareHash);
            writer.WriteStringValue("language", Language);
            writer.WriteDateTimeOffsetValue("lastModifiedDateTime", LastModifiedDateTime);
            writer.WriteStringValue("managementServiceAppId", ManagementServiceAppId);
            writer.WriteObjectValue<ApiSdk.Models.OutOfBoxExperienceSettings>("outOfBoxExperienceSettings", OutOfBoxExperienceSettings);
            writer.WriteCollectionOfPrimitiveValues<string>("roleScopeTagIds", RoleScopeTagIds);
        }
    }
}
