// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// MacOS device features configuration profile.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MacOSDeviceFeaturesConfiguration : global::ApiSdk.Models.AppleDeviceFeaturesConfigurationBase, IParsable
    {
        /// <summary>Whether to show admin host information on the login window.</summary>
        public bool? AdminShowHostInfo { get; set; }
        /// <summary>Gets or sets a list that maps apps to their associated domains. Application identifiers must be unique. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.MacOSAssociatedDomainsItem>? AppAssociatedDomains { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.MacOSAssociatedDomainsItem> AppAssociatedDomains { get; set; }
#endif
        /// <summary>DEPRECATED: use appAssociatedDomains instead. Gets or sets a list that maps apps to their associated domains. The key should match the app&apos;s ID, and the value should be a string in the form of &apos;service:domain&apos; where domain is a fully qualified hostname (e.g. webcredentials:example.com). This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.KeyValuePair>? AssociatedDomains { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.KeyValuePair> AssociatedDomains { get; set; }
#endif
        /// <summary>Whether to show the name and password dialog or a list of users on the login window.</summary>
        public bool? AuthorizedUsersListHidden { get; set; }
        /// <summary>Whether to hide admin users in the authorized users list on the login window.</summary>
        public bool? AuthorizedUsersListHideAdminUsers { get; set; }
        /// <summary>Whether to show only network and system users in the authorized users list on the login window.</summary>
        public bool? AuthorizedUsersListHideLocalUsers { get; set; }
        /// <summary>Whether to hide mobile users in the authorized users list on the login window.</summary>
        public bool? AuthorizedUsersListHideMobileAccounts { get; set; }
        /// <summary>Whether to show network users in the authorized users list on the login window.</summary>
        public bool? AuthorizedUsersListIncludeNetworkUsers { get; set; }
        /// <summary>Whether to show other users in the authorized users list on the login window.</summary>
        public bool? AuthorizedUsersListShowOtherManagedUsers { get; set; }
        /// <summary>List of applications, files, folders, and other items to launch when the user logs in. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.MacOSLaunchItem>? AutoLaunchItems { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.MacOSLaunchItem> AutoLaunchItems { get; set; }
#endif
        /// <summary>Whether the Other user will disregard use of the console special user name.</summary>
        public bool? ConsoleAccessDisabled { get; set; }
        /// <summary>Prevents content caches from purging content to free up disk space for other apps.</summary>
        public bool? ContentCachingBlockDeletion { get; set; }
        /// <summary>A list of custom IP ranges content caches will use to listen for clients. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.IpRange>? ContentCachingClientListenRanges { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.IpRange> ContentCachingClientListenRanges { get; set; }
#endif
        /// <summary>Determines which clients a content cache will serve.</summary>
        public global::ApiSdk.Models.MacOSContentCachingClientPolicy? ContentCachingClientPolicy { get; set; }
        /// <summary>The path to the directory used to store cached content. The value must be (or end with) /Library/Application Support/Apple/AssetCache/Data</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContentCachingDataPath { get; set; }
#nullable restore
#else
        public string ContentCachingDataPath { get; set; }
#endif
        /// <summary>Disables internet connection sharing.</summary>
        public bool? ContentCachingDisableConnectionSharing { get; set; }
        /// <summary>Enables content caching and prevents it from being disabled by the user.</summary>
        public bool? ContentCachingEnabled { get; set; }
        /// <summary>Forces internet connection sharing. contentCachingDisableConnectionSharing overrides this setting.</summary>
        public bool? ContentCachingForceConnectionSharing { get; set; }
        /// <summary>Prevent the device from sleeping if content caching is enabled.</summary>
        public bool? ContentCachingKeepAwake { get; set; }
        /// <summary>Enables logging of IP addresses and ports of clients that request cached content.</summary>
        public bool? ContentCachingLogClientIdentities { get; set; }
        /// <summary>The maximum number of bytes of disk space that will be used for the content cache. A value of 0 (default) indicates unlimited disk space.</summary>
        public long? ContentCachingMaxSizeBytes { get; set; }
        /// <summary>A list of IP addresses representing parent content caches.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ContentCachingParents { get; set; }
#nullable restore
#else
        public List<string> ContentCachingParents { get; set; }
#endif
        /// <summary>Determines how content caches select a parent cache.</summary>
        public global::ApiSdk.Models.MacOSContentCachingParentSelectionPolicy? ContentCachingParentSelectionPolicy { get; set; }
        /// <summary>A list of custom IP ranges content caches will use to query for content from peers caches. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.IpRange>? ContentCachingPeerFilterRanges { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.IpRange> ContentCachingPeerFilterRanges { get; set; }
#endif
        /// <summary>A list of custom IP ranges content caches will use to listen for peer caches. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.IpRange>? ContentCachingPeerListenRanges { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.IpRange> ContentCachingPeerListenRanges { get; set; }
#endif
        /// <summary>Determines which content caches other content caches will peer with.</summary>
        public global::ApiSdk.Models.MacOSContentCachingPeerPolicy? ContentCachingPeerPolicy { get; set; }
        /// <summary>Sets the port used for content caching. If the value is 0, a random available port will be selected. Valid values 0 to 65535</summary>
        public int? ContentCachingPort { get; set; }
        /// <summary>A list of custom IP ranges that Apple&apos;s content caching service should use to match clients to content caches. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.IpRange>? ContentCachingPublicRanges { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.IpRange> ContentCachingPublicRanges { get; set; }
#endif
        /// <summary>Display content caching alerts as system notifications.</summary>
        public bool? ContentCachingShowAlerts { get; set; }
        /// <summary>Indicates the type of content allowed to be cached by Apple&apos;s content caching service.</summary>
        public global::ApiSdk.Models.MacOSContentCachingType? ContentCachingType { get; set; }
        /// <summary>Custom text to be displayed on the login window.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LoginWindowText { get; set; }
#nullable restore
#else
        public string LoginWindowText { get; set; }
#endif
        /// <summary>Whether the Log Out menu item on the login window will be disabled while the user is logged in.</summary>
        public bool? LogOutDisabledWhileLoggedIn { get; set; }
        /// <summary>Gets or sets a single sign-on extension profile.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.MacOSSingleSignOnExtension? MacOSSingleSignOnExtension { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.MacOSSingleSignOnExtension MacOSSingleSignOnExtension { get; set; }
#endif
        /// <summary>Whether the Power Off menu item on the login window will be disabled while the user is logged in.</summary>
        public bool? PowerOffDisabledWhileLoggedIn { get; set; }
        /// <summary>Whether to hide the Restart button item on the login window.</summary>
        public bool? RestartDisabled { get; set; }
        /// <summary>Whether the Restart menu item on the login window will be disabled while the user is logged in.</summary>
        public bool? RestartDisabledWhileLoggedIn { get; set; }
        /// <summary>Whether to disable the immediate screen lock functions.</summary>
        public bool? ScreenLockDisableImmediate { get; set; }
        /// <summary>Whether to hide the Shut Down button item on the login window.</summary>
        public bool? ShutDownDisabled { get; set; }
        /// <summary>Whether the Shut Down menu item on the login window will be disabled while the user is logged in.</summary>
        public bool? ShutDownDisabledWhileLoggedIn { get; set; }
        /// <summary>Gets or sets a single sign-on extension profile. Deprecated: use MacOSSingleSignOnExtension instead.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.SingleSignOnExtension? SingleSignOnExtension { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.SingleSignOnExtension SingleSignOnExtension { get; set; }
#endif
        /// <summary>PKINIT Certificate for the authentication with single sign-on extensions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.MacOSCertificateProfileBase? SingleSignOnExtensionPkinitCertificate { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.MacOSCertificateProfileBase SingleSignOnExtensionPkinitCertificate { get; set; }
#endif
        /// <summary>Whether to hide the Sleep menu item on the login window.</summary>
        public bool? SleepDisabled { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.MacOSDeviceFeaturesConfiguration"/> and sets the default values.
        /// </summary>
        public MacOSDeviceFeaturesConfiguration() : base()
        {
            OdataType = "#microsoft.graph.macOSDeviceFeaturesConfiguration";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.MacOSDeviceFeaturesConfiguration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.MacOSDeviceFeaturesConfiguration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.MacOSDeviceFeaturesConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "adminShowHostInfo", n => { AdminShowHostInfo = n.GetBoolValue(); } },
                { "appAssociatedDomains", n => { AppAssociatedDomains = n.GetCollectionOfObjectValues<global::ApiSdk.Models.MacOSAssociatedDomainsItem>(global::ApiSdk.Models.MacOSAssociatedDomainsItem.CreateFromDiscriminatorValue)?.AsList(); } },
                { "associatedDomains", n => { AssociatedDomains = n.GetCollectionOfObjectValues<global::ApiSdk.Models.KeyValuePair>(global::ApiSdk.Models.KeyValuePair.CreateFromDiscriminatorValue)?.AsList(); } },
                { "authorizedUsersListHidden", n => { AuthorizedUsersListHidden = n.GetBoolValue(); } },
                { "authorizedUsersListHideAdminUsers", n => { AuthorizedUsersListHideAdminUsers = n.GetBoolValue(); } },
                { "authorizedUsersListHideLocalUsers", n => { AuthorizedUsersListHideLocalUsers = n.GetBoolValue(); } },
                { "authorizedUsersListHideMobileAccounts", n => { AuthorizedUsersListHideMobileAccounts = n.GetBoolValue(); } },
                { "authorizedUsersListIncludeNetworkUsers", n => { AuthorizedUsersListIncludeNetworkUsers = n.GetBoolValue(); } },
                { "authorizedUsersListShowOtherManagedUsers", n => { AuthorizedUsersListShowOtherManagedUsers = n.GetBoolValue(); } },
                { "autoLaunchItems", n => { AutoLaunchItems = n.GetCollectionOfObjectValues<global::ApiSdk.Models.MacOSLaunchItem>(global::ApiSdk.Models.MacOSLaunchItem.CreateFromDiscriminatorValue)?.AsList(); } },
                { "consoleAccessDisabled", n => { ConsoleAccessDisabled = n.GetBoolValue(); } },
                { "contentCachingBlockDeletion", n => { ContentCachingBlockDeletion = n.GetBoolValue(); } },
                { "contentCachingClientListenRanges", n => { ContentCachingClientListenRanges = n.GetCollectionOfObjectValues<global::ApiSdk.Models.IpRange>(global::ApiSdk.Models.IpRange.CreateFromDiscriminatorValue)?.AsList(); } },
                { "contentCachingClientPolicy", n => { ContentCachingClientPolicy = n.GetEnumValue<global::ApiSdk.Models.MacOSContentCachingClientPolicy>(); } },
                { "contentCachingDataPath", n => { ContentCachingDataPath = n.GetStringValue(); } },
                { "contentCachingDisableConnectionSharing", n => { ContentCachingDisableConnectionSharing = n.GetBoolValue(); } },
                { "contentCachingEnabled", n => { ContentCachingEnabled = n.GetBoolValue(); } },
                { "contentCachingForceConnectionSharing", n => { ContentCachingForceConnectionSharing = n.GetBoolValue(); } },
                { "contentCachingKeepAwake", n => { ContentCachingKeepAwake = n.GetBoolValue(); } },
                { "contentCachingLogClientIdentities", n => { ContentCachingLogClientIdentities = n.GetBoolValue(); } },
                { "contentCachingMaxSizeBytes", n => { ContentCachingMaxSizeBytes = n.GetLongValue(); } },
                { "contentCachingParentSelectionPolicy", n => { ContentCachingParentSelectionPolicy = n.GetEnumValue<global::ApiSdk.Models.MacOSContentCachingParentSelectionPolicy>(); } },
                { "contentCachingParents", n => { ContentCachingParents = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "contentCachingPeerFilterRanges", n => { ContentCachingPeerFilterRanges = n.GetCollectionOfObjectValues<global::ApiSdk.Models.IpRange>(global::ApiSdk.Models.IpRange.CreateFromDiscriminatorValue)?.AsList(); } },
                { "contentCachingPeerListenRanges", n => { ContentCachingPeerListenRanges = n.GetCollectionOfObjectValues<global::ApiSdk.Models.IpRange>(global::ApiSdk.Models.IpRange.CreateFromDiscriminatorValue)?.AsList(); } },
                { "contentCachingPeerPolicy", n => { ContentCachingPeerPolicy = n.GetEnumValue<global::ApiSdk.Models.MacOSContentCachingPeerPolicy>(); } },
                { "contentCachingPort", n => { ContentCachingPort = n.GetIntValue(); } },
                { "contentCachingPublicRanges", n => { ContentCachingPublicRanges = n.GetCollectionOfObjectValues<global::ApiSdk.Models.IpRange>(global::ApiSdk.Models.IpRange.CreateFromDiscriminatorValue)?.AsList(); } },
                { "contentCachingShowAlerts", n => { ContentCachingShowAlerts = n.GetBoolValue(); } },
                { "contentCachingType", n => { ContentCachingType = n.GetEnumValue<global::ApiSdk.Models.MacOSContentCachingType>(); } },
                { "logOutDisabledWhileLoggedIn", n => { LogOutDisabledWhileLoggedIn = n.GetBoolValue(); } },
                { "loginWindowText", n => { LoginWindowText = n.GetStringValue(); } },
                { "macOSSingleSignOnExtension", n => { MacOSSingleSignOnExtension = n.GetObjectValue<global::ApiSdk.Models.MacOSSingleSignOnExtension>(global::ApiSdk.Models.MacOSSingleSignOnExtension.CreateFromDiscriminatorValue); } },
                { "powerOffDisabledWhileLoggedIn", n => { PowerOffDisabledWhileLoggedIn = n.GetBoolValue(); } },
                { "restartDisabled", n => { RestartDisabled = n.GetBoolValue(); } },
                { "restartDisabledWhileLoggedIn", n => { RestartDisabledWhileLoggedIn = n.GetBoolValue(); } },
                { "screenLockDisableImmediate", n => { ScreenLockDisableImmediate = n.GetBoolValue(); } },
                { "shutDownDisabled", n => { ShutDownDisabled = n.GetBoolValue(); } },
                { "shutDownDisabledWhileLoggedIn", n => { ShutDownDisabledWhileLoggedIn = n.GetBoolValue(); } },
                { "singleSignOnExtension", n => { SingleSignOnExtension = n.GetObjectValue<global::ApiSdk.Models.SingleSignOnExtension>(global::ApiSdk.Models.SingleSignOnExtension.CreateFromDiscriminatorValue); } },
                { "singleSignOnExtensionPkinitCertificate", n => { SingleSignOnExtensionPkinitCertificate = n.GetObjectValue<global::ApiSdk.Models.MacOSCertificateProfileBase>(global::ApiSdk.Models.MacOSCertificateProfileBase.CreateFromDiscriminatorValue); } },
                { "sleepDisabled", n => { SleepDisabled = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("adminShowHostInfo", AdminShowHostInfo);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.MacOSAssociatedDomainsItem>("appAssociatedDomains", AppAssociatedDomains);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.KeyValuePair>("associatedDomains", AssociatedDomains);
            writer.WriteBoolValue("authorizedUsersListHidden", AuthorizedUsersListHidden);
            writer.WriteBoolValue("authorizedUsersListHideAdminUsers", AuthorizedUsersListHideAdminUsers);
            writer.WriteBoolValue("authorizedUsersListHideLocalUsers", AuthorizedUsersListHideLocalUsers);
            writer.WriteBoolValue("authorizedUsersListHideMobileAccounts", AuthorizedUsersListHideMobileAccounts);
            writer.WriteBoolValue("authorizedUsersListIncludeNetworkUsers", AuthorizedUsersListIncludeNetworkUsers);
            writer.WriteBoolValue("authorizedUsersListShowOtherManagedUsers", AuthorizedUsersListShowOtherManagedUsers);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.MacOSLaunchItem>("autoLaunchItems", AutoLaunchItems);
            writer.WriteBoolValue("consoleAccessDisabled", ConsoleAccessDisabled);
            writer.WriteBoolValue("contentCachingBlockDeletion", ContentCachingBlockDeletion);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.IpRange>("contentCachingClientListenRanges", ContentCachingClientListenRanges);
            writer.WriteEnumValue<global::ApiSdk.Models.MacOSContentCachingClientPolicy>("contentCachingClientPolicy", ContentCachingClientPolicy);
            writer.WriteStringValue("contentCachingDataPath", ContentCachingDataPath);
            writer.WriteBoolValue("contentCachingDisableConnectionSharing", ContentCachingDisableConnectionSharing);
            writer.WriteBoolValue("contentCachingEnabled", ContentCachingEnabled);
            writer.WriteBoolValue("contentCachingForceConnectionSharing", ContentCachingForceConnectionSharing);
            writer.WriteBoolValue("contentCachingKeepAwake", ContentCachingKeepAwake);
            writer.WriteBoolValue("contentCachingLogClientIdentities", ContentCachingLogClientIdentities);
            writer.WriteLongValue("contentCachingMaxSizeBytes", ContentCachingMaxSizeBytes);
            writer.WriteCollectionOfPrimitiveValues<string>("contentCachingParents", ContentCachingParents);
            writer.WriteEnumValue<global::ApiSdk.Models.MacOSContentCachingParentSelectionPolicy>("contentCachingParentSelectionPolicy", ContentCachingParentSelectionPolicy);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.IpRange>("contentCachingPeerFilterRanges", ContentCachingPeerFilterRanges);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.IpRange>("contentCachingPeerListenRanges", ContentCachingPeerListenRanges);
            writer.WriteEnumValue<global::ApiSdk.Models.MacOSContentCachingPeerPolicy>("contentCachingPeerPolicy", ContentCachingPeerPolicy);
            writer.WriteIntValue("contentCachingPort", ContentCachingPort);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.IpRange>("contentCachingPublicRanges", ContentCachingPublicRanges);
            writer.WriteBoolValue("contentCachingShowAlerts", ContentCachingShowAlerts);
            writer.WriteEnumValue<global::ApiSdk.Models.MacOSContentCachingType>("contentCachingType", ContentCachingType);
            writer.WriteStringValue("loginWindowText", LoginWindowText);
            writer.WriteBoolValue("logOutDisabledWhileLoggedIn", LogOutDisabledWhileLoggedIn);
            writer.WriteObjectValue<global::ApiSdk.Models.MacOSSingleSignOnExtension>("macOSSingleSignOnExtension", MacOSSingleSignOnExtension);
            writer.WriteBoolValue("powerOffDisabledWhileLoggedIn", PowerOffDisabledWhileLoggedIn);
            writer.WriteBoolValue("restartDisabled", RestartDisabled);
            writer.WriteBoolValue("restartDisabledWhileLoggedIn", RestartDisabledWhileLoggedIn);
            writer.WriteBoolValue("screenLockDisableImmediate", ScreenLockDisableImmediate);
            writer.WriteBoolValue("shutDownDisabled", ShutDownDisabled);
            writer.WriteBoolValue("shutDownDisabledWhileLoggedIn", ShutDownDisabledWhileLoggedIn);
            writer.WriteObjectValue<global::ApiSdk.Models.SingleSignOnExtension>("singleSignOnExtension", SingleSignOnExtension);
            writer.WriteObjectValue<global::ApiSdk.Models.MacOSCertificateProfileBase>("singleSignOnExtensionPkinitCertificate", SingleSignOnExtensionPkinitCertificate);
            writer.WriteBoolValue("sleepDisabled", SleepDisabled);
        }
    }
}
#pragma warning restore CS0618
