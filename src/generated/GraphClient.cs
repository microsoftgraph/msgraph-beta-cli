// <auto-generated/>
using ApiSdk.AccessReviewDecisions;
using ApiSdk.AccessReviews;
using ApiSdk.Activitystatistics;
using ApiSdk.Admin;
using ApiSdk.AdministrativeUnits;
using ApiSdk.AgreementAcceptances;
using ApiSdk.Agreements;
using ApiSdk.AllowedDataLocations;
using ApiSdk.App;
using ApiSdk.AppCatalogs;
using ApiSdk.AppRoleAssignments;
using ApiSdk.ApplicationTemplates;
using ApiSdk.Applications;
using ApiSdk.ApplicationsWithAppId;
using ApiSdk.ApplicationsWithUniqueName;
using ApiSdk.ApprovalWorkflowProviders;
using ApiSdk.AuditLogs;
using ApiSdk.AuthenticationMethodConfigurations;
using ApiSdk.AuthenticationMethodsPolicy;
using ApiSdk.BookingBusinesses;
using ApiSdk.BookingCurrencies;
using ApiSdk.BusinessFlowTemplates;
using ApiSdk.CertificateBasedAuthConfiguration;
using ApiSdk.Chats;
using ApiSdk.Commands;
using ApiSdk.Communications;
using ApiSdk.Compliance;
using ApiSdk.Connections;
using ApiSdk.Contacts;
using ApiSdk.Contracts;
using ApiSdk.DataClassification;
using ApiSdk.DataPolicyOperations;
using ApiSdk.DeviceAppManagement;
using ApiSdk.DeviceLocalCredentials;
using ApiSdk.DeviceManagement;
using ApiSdk.Devices;
using ApiSdk.DevicesWithDeviceId;
using ApiSdk.DirectoryNamespace;
using ApiSdk.DirectoryObjects;
using ApiSdk.DirectoryRoleTemplates;
using ApiSdk.DirectoryRoles;
using ApiSdk.DirectoryRolesWithRoleTemplateId;
using ApiSdk.DirectorySettingTemplates;
using ApiSdk.DomainDnsRecords;
using ApiSdk.Domains;
using ApiSdk.Drives;
using ApiSdk.Education;
using ApiSdk.EmployeeExperience;
using ApiSdk.External;
using ApiSdk.FilterOperators;
using ApiSdk.Financials;
using ApiSdk.Functions;
using ApiSdk.GovernanceResources;
using ApiSdk.GovernanceRoleAssignmentRequests;
using ApiSdk.GovernanceRoleAssignments;
using ApiSdk.GovernanceRoleDefinitions;
using ApiSdk.GovernanceRoleSettings;
using ApiSdk.GovernanceSubjects;
using ApiSdk.GroupLifecyclePolicies;
using ApiSdk.Groups;
using ApiSdk.GroupsWithUniqueName;
using ApiSdk.Identity;
using ApiSdk.IdentityGovernance;
using ApiSdk.IdentityProtection;
using ApiSdk.IdentityProviders;
using ApiSdk.InformationProtection;
using ApiSdk.Invitations;
using ApiSdk.MessageEvents;
using ApiSdk.MessageRecipients;
using ApiSdk.MessageTraces;
using ApiSdk.MobilityManagementPolicies;
using ApiSdk.Monitoring;
using ApiSdk.NetworkAccess;
using ApiSdk.Oauth2PermissionGrants;
using ApiSdk.OnPremisesPublishingProfiles;
using ApiSdk.Organization;
using ApiSdk.PayloadResponse;
using ApiSdk.PermissionGrants;
using ApiSdk.Places;
using ApiSdk.PlacesWithPlaceId;
using ApiSdk.Planner;
using ApiSdk.Policies;
using ApiSdk.Print;
using ApiSdk.Privacy;
using ApiSdk.PrivilegedAccess;
using ApiSdk.PrivilegedApproval;
using ApiSdk.PrivilegedOperationEvents;
using ApiSdk.PrivilegedRoleAssignmentRequests;
using ApiSdk.PrivilegedRoleAssignments;
using ApiSdk.PrivilegedRoles;
using ApiSdk.PrivilegedSignupStatus;
using ApiSdk.ProgramControlTypes;
using ApiSdk.ProgramControls;
using ApiSdk.Programs;
using ApiSdk.Reports;
using ApiSdk.RiskDetections;
using ApiSdk.RiskyUsers;
using ApiSdk.RoleManagement;
using ApiSdk.SchemaExtensions;
using ApiSdk.ScopedRoleMemberships;
using ApiSdk.Search;
using ApiSdk.Security;
using ApiSdk.ServicePrincipals;
using ApiSdk.ServicePrincipalsWithAppId;
using ApiSdk.Settings;
using ApiSdk.Shares;
using ApiSdk.Sites;
using ApiSdk.Solutions;
using ApiSdk.SubscribedSkus;
using ApiSdk.Subscriptions;
using ApiSdk.TeamTemplateDefinition;
using ApiSdk.Teams;
using ApiSdk.TeamsTemplates;
using ApiSdk.Teamwork;
using ApiSdk.TenantRelationships;
using ApiSdk.TermStore;
using ApiSdk.ThreatSubmission;
using ApiSdk.TrustFramework;
using ApiSdk.Users;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System;
namespace ApiSdk {
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    public class GraphClient : BaseCliRequestBuilder 
    {
        /// <summary>
        /// Provides operations to manage the collection of accessReviewDecision entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAccessReviewDecisionsNavCommand()
        {
            var command = new Command("access-review-decisions");
            command.Description = "Provides operations to manage the collection of accessReviewDecision entities.";
            var builder = new AccessReviewDecisionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of accessReview entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAccessReviewsNavCommand()
        {
            var command = new Command("access-reviews");
            command.Description = "Provides operations to manage the collection of accessReview entities.";
            var builder = new AccessReviewsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of activityStatistics entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildActivitystatisticsNavCommand()
        {
            var command = new Command("activitystatistics");
            command.Description = "Provides operations to manage the collection of activityStatistics entities.";
            var builder = new ActivitystatisticsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of administrativeUnit entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAdministrativeUnitsNavCommand()
        {
            var command = new Command("administrative-units");
            command.Description = "Provides operations to manage the collection of administrativeUnit entities.";
            var builder = new AdministrativeUnitsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            nonExecCommands.Add(builder.BuildGetByIdsNavCommand());
            nonExecCommands.Add(builder.BuildGetUserOwnedObjectsNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildValidatePropertiesNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the admin singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAdminNavCommand()
        {
            var command = new Command("admin");
            command.Description = "Provides operations to manage the admin singleton.";
            var builder = new AdminRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAppsAndServicesNavCommand());
            nonExecCommands.Add(builder.BuildDynamicsNavCommand());
            nonExecCommands.Add(builder.BuildEdgeNavCommand());
            nonExecCommands.Add(builder.BuildFormsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildMicrosoft365AppsNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildPeopleNavCommand());
            nonExecCommands.Add(builder.BuildReportSettingsNavCommand());
            nonExecCommands.Add(builder.BuildServiceAnnouncementNavCommand());
            nonExecCommands.Add(builder.BuildSharepointNavCommand());
            nonExecCommands.Add(builder.BuildTodoNavCommand());
            nonExecCommands.Add(builder.BuildWindowsNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of agreementAcceptance entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAgreementAcceptancesNavCommand()
        {
            var command = new Command("agreement-acceptances");
            command.Description = "Provides operations to manage the collection of agreementAcceptance entities.";
            var builder = new AgreementAcceptancesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of agreement entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAgreementsNavCommand()
        {
            var command = new Command("agreements");
            command.Description = "Provides operations to manage the collection of agreement entities.";
            var builder = new AgreementsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of allowedDataLocation entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAllowedDataLocationsNavCommand()
        {
            var command = new Command("allowed-data-locations");
            command.Description = "Provides operations to manage the collection of allowedDataLocation entities.";
            var builder = new AllowedDataLocationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the appCatalogs singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAppCatalogsNavCommand()
        {
            var command = new Command("app-catalogs");
            command.Description = "Provides operations to manage the appCatalogs singleton.";
            var builder = new AppCatalogsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildTeamsAppsNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of application entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildApplicationsNavCommand()
        {
            var command = new Command("applications");
            command.Description = "Provides operations to manage the collection of application entities.";
            var builder = new ApplicationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            nonExecCommands.Add(builder.BuildGetByIdsNavCommand());
            nonExecCommands.Add(builder.BuildGetUserOwnedObjectsNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildValidatePropertiesNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of application entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildApplicationsWithAppIdRbCommand()
        {
            var command = new Command("applications-with-app-id");
            command.Description = "Provides operations to manage the collection of application entities.";
            var builder = new ApplicationsWithAppIdRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of application entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildApplicationsWithUniqueNameRbCommand()
        {
            var command = new Command("applications-with-unique-name");
            command.Description = "Provides operations to manage the collection of application entities.";
            var builder = new ApplicationsWithUniqueNameRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of applicationTemplate entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildApplicationTemplatesNavCommand()
        {
            var command = new Command("application-templates");
            command.Description = "Provides operations to manage the collection of applicationTemplate entities.";
            var builder = new ApplicationTemplatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the commsApplication singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAppNavCommand()
        {
            var command = new Command("app");
            command.Description = "Provides operations to manage the commsApplication singleton.";
            var builder = new AppRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCallsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildOnlineMeetingsNavCommand());
            nonExecCommands.Add(builder.BuildOnlineMeetingsWithJoinWebUrlRbCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of appRoleAssignment entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAppRoleAssignmentsNavCommand()
        {
            var command = new Command("app-role-assignments");
            command.Description = "Provides operations to manage the collection of appRoleAssignment entities.";
            var builder = new AppRoleAssignmentsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of approvalWorkflowProvider entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildApprovalWorkflowProvidersNavCommand()
        {
            var command = new Command("approval-workflow-providers");
            command.Description = "Provides operations to manage the collection of approvalWorkflowProvider entities.";
            var builder = new ApprovalWorkflowProvidersRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the auditLogRoot singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAuditLogsNavCommand()
        {
            var command = new Command("audit-logs");
            command.Description = "Provides operations to manage the auditLogRoot singleton.";
            var builder = new AuditLogsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCustomSecurityAttributeAuditsNavCommand());
            nonExecCommands.Add(builder.BuildDirectoryAuditsNavCommand());
            nonExecCommands.Add(builder.BuildDirectoryProvisioningNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildProvisioningNavCommand());
            nonExecCommands.Add(builder.BuildSignInsNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of authenticationMethodConfiguration entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAuthenticationMethodConfigurationsNavCommand()
        {
            var command = new Command("authentication-method-configurations");
            command.Description = "Provides operations to manage the collection of authenticationMethodConfiguration entities.";
            var builder = new AuthenticationMethodConfigurationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the authenticationMethodsPolicy singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAuthenticationMethodsPolicyNavCommand()
        {
            var command = new Command("authentication-methods-policy");
            command.Description = "Provides operations to manage the authenticationMethodsPolicy singleton.";
            var builder = new AuthenticationMethodsPolicyRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAuthenticationMethodConfigurationsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of bookingBusiness entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBookingBusinessesNavCommand()
        {
            var command = new Command("booking-businesses");
            command.Description = "Provides operations to manage the collection of bookingBusiness entities.";
            var builder = new BookingBusinessesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of bookingCurrency entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBookingCurrenciesNavCommand()
        {
            var command = new Command("booking-currencies");
            command.Description = "Provides operations to manage the collection of bookingCurrency entities.";
            var builder = new BookingCurrenciesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of businessFlowTemplate entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBusinessFlowTemplatesNavCommand()
        {
            var command = new Command("business-flow-templates");
            command.Description = "Provides operations to manage the collection of businessFlowTemplate entities.";
            var builder = new BusinessFlowTemplatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of certificateBasedAuthConfiguration entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCertificateBasedAuthConfigurationNavCommand()
        {
            var command = new Command("certificate-based-auth-configuration");
            command.Description = "Provides operations to manage the collection of certificateBasedAuthConfiguration entities.";
            var builder = new CertificateBasedAuthConfigurationRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of chat entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildChatsNavCommand()
        {
            var command = new Command("chats");
            command.Description = "Provides operations to manage the collection of chat entities.";
            var builder = new ChatsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAllMessagesNavCommand());
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildGetAllMessagesNavCommand());
            nonExecCommands.Add(builder.BuildGetAllRetainedMessagesNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of command entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCommandsNavCommand()
        {
            var command = new Command("commands");
            command.Description = "Provides operations to manage the collection of command entities.";
            var builder = new CommandsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the cloudCommunications singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCommunicationsNavCommand()
        {
            var command = new Command("communications");
            command.Description = "Provides operations to manage the cloudCommunications singleton.";
            var builder = new CommunicationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCallRecordsNavCommand());
            nonExecCommands.Add(builder.BuildCallsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildGetPresencesByUserIdNavCommand());
            nonExecCommands.Add(builder.BuildOnlineMeetingsNavCommand());
            nonExecCommands.Add(builder.BuildOnlineMeetingsWithJoinWebUrlRbCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildPresencesNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the compliance singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildComplianceNavCommand()
        {
            var command = new Command("compliance");
            command.Description = "Provides operations to manage the compliance singleton.";
            var builder = new ComplianceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildEdiscoveryNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of externalConnection entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildConnectionsNavCommand()
        {
            var command = new Command("connections");
            command.Description = "Provides operations to manage the collection of externalConnection entities.";
            var builder = new ConnectionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of orgContact entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildContactsNavCommand()
        {
            var command = new Command("contacts");
            command.Description = "Provides operations to manage the collection of orgContact entities.";
            var builder = new ContactsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            nonExecCommands.Add(builder.BuildGetByIdsNavCommand());
            nonExecCommands.Add(builder.BuildGetUserOwnedObjectsNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildValidatePropertiesNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of contract entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildContractsNavCommand()
        {
            var command = new Command("contracts");
            command.Description = "Provides operations to manage the collection of contract entities.";
            var builder = new ContractsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            nonExecCommands.Add(builder.BuildGetByIdsNavCommand());
            nonExecCommands.Add(builder.BuildGetUserOwnedObjectsNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildValidatePropertiesNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the dataClassificationService singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDataClassificationNavCommand()
        {
            var command = new Command("data-classification");
            command.Description = "Provides operations to manage the dataClassificationService singleton.";
            var builder = new DataClassificationRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildClassifyExactMatchesNavCommand());
            nonExecCommands.Add(builder.BuildClassifyFileJobsNavCommand());
            nonExecCommands.Add(builder.BuildClassifyFileNavCommand());
            nonExecCommands.Add(builder.BuildClassifyTextJobsNavCommand());
            nonExecCommands.Add(builder.BuildEvaluateDlpPoliciesJobsNavCommand());
            nonExecCommands.Add(builder.BuildEvaluateLabelJobsNavCommand());
            nonExecCommands.Add(builder.BuildExactMatchDataStoresNavCommand());
            nonExecCommands.Add(builder.BuildExactMatchUploadAgentsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildJobsNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildSensitiveTypesNavCommand());
            nonExecCommands.Add(builder.BuildSensitivityLabelsNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of dataPolicyOperation entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDataPolicyOperationsNavCommand()
        {
            var command = new Command("data-policy-operations");
            command.Description = "Provides operations to manage the collection of dataPolicyOperation entities.";
            var builder = new DataPolicyOperationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceAppManagement singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceAppManagementNavCommand()
        {
            var command = new Command("device-app-management");
            command.Description = "Provides operations to manage the deviceAppManagement singleton.";
            var builder = new DeviceAppManagementRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAndroidManagedAppProtectionsNavCommand());
            nonExecCommands.Add(builder.BuildDefaultManagedAppProtectionsNavCommand());
            nonExecCommands.Add(builder.BuildDeviceAppManagementTasksNavCommand());
            nonExecCommands.Add(builder.BuildEnterpriseCodeSigningCertificatesNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildIosLobAppProvisioningConfigurationsNavCommand());
            nonExecCommands.Add(builder.BuildIosManagedAppProtectionsNavCommand());
            nonExecCommands.Add(builder.BuildManagedAppPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildManagedAppRegistrationsNavCommand());
            nonExecCommands.Add(builder.BuildManagedAppStatusesNavCommand());
            nonExecCommands.Add(builder.BuildManagedEBookCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildManagedEBooksNavCommand());
            nonExecCommands.Add(builder.BuildMdmWindowsInformationProtectionPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildMobileAppCatalogPackagesNavCommand());
            nonExecCommands.Add(builder.BuildMobileAppCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildMobileAppConfigurationsNavCommand());
            nonExecCommands.Add(builder.BuildMobileAppsNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildPolicySetsNavCommand());
            nonExecCommands.Add(builder.BuildSymantecCodeSigningCertificateNavCommand());
            nonExecCommands.Add(builder.BuildSyncMicrosoftStoreForBusinessAppsNavCommand());
            nonExecCommands.Add(builder.BuildTargetedManagedAppConfigurationsNavCommand());
            nonExecCommands.Add(builder.BuildVppTokensNavCommand());
            nonExecCommands.Add(builder.BuildWdacSupplementalPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildWindowsInformationProtectionDeviceRegistrationsNavCommand());
            nonExecCommands.Add(builder.BuildWindowsInformationProtectionPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildWindowsInformationProtectionWipeActionsNavCommand());
            nonExecCommands.Add(builder.BuildWindowsManagedAppProtectionsNavCommand());
            nonExecCommands.Add(builder.BuildWindowsManagementAppNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of deviceLocalCredentialInfo entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceLocalCredentialsNavCommand()
        {
            var command = new Command("device-local-credentials");
            command.Description = "Provides operations to manage the collection of deviceLocalCredentialInfo entities.";
            var builder = new DeviceLocalCredentialsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceManagement singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceManagementNavCommand()
        {
            var command = new Command("device-management");
            command.Description = "Provides operations to manage the deviceManagement singleton.";
            var builder = new DeviceManagementRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAdvancedThreatProtectionOnboardingStateSummaryNavCommand());
            nonExecCommands.Add(builder.BuildAndroidDeviceOwnerEnrollmentProfilesNavCommand());
            nonExecCommands.Add(builder.BuildAndroidForWorkAppConfigurationSchemasNavCommand());
            nonExecCommands.Add(builder.BuildAndroidForWorkEnrollmentProfilesNavCommand());
            nonExecCommands.Add(builder.BuildAndroidForWorkSettingsNavCommand());
            nonExecCommands.Add(builder.BuildAndroidManagedStoreAccountEnterpriseSettingsNavCommand());
            nonExecCommands.Add(builder.BuildAndroidManagedStoreAppConfigurationSchemasNavCommand());
            nonExecCommands.Add(builder.BuildApplePushNotificationCertificateNavCommand());
            nonExecCommands.Add(builder.BuildAppleUserInitiatedEnrollmentProfilesNavCommand());
            nonExecCommands.Add(builder.BuildAssignmentFiltersNavCommand());
            nonExecCommands.Add(builder.BuildAuditEventsNavCommand());
            nonExecCommands.Add(builder.BuildAutopilotEventsNavCommand());
            nonExecCommands.Add(builder.BuildCartToClassAssociationsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildCertificateConnectorDetailsNavCommand());
            nonExecCommands.Add(builder.BuildChromeOSOnboardingSettingsNavCommand());
            nonExecCommands.Add(builder.BuildCloudPCConnectivityIssuesNavCommand());
            nonExecCommands.Add(builder.BuildComanagedDevicesNavCommand());
            nonExecCommands.Add(builder.BuildComanagementEligibleDevicesNavCommand());
            nonExecCommands.Add(builder.BuildComplianceCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildComplianceManagementPartnersNavCommand());
            nonExecCommands.Add(builder.BuildCompliancePoliciesNavCommand());
            nonExecCommands.Add(builder.BuildComplianceSettingsNavCommand());
            nonExecCommands.Add(builder.BuildConditionalAccessSettingsNavCommand());
            nonExecCommands.Add(builder.BuildConfigManagerCollectionsNavCommand());
            nonExecCommands.Add(builder.BuildConfigurationCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildConfigurationPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildConfigurationPolicyTemplatesNavCommand());
            nonExecCommands.Add(builder.BuildConfigurationSettingsNavCommand());
            nonExecCommands.Add(builder.BuildDataSharingConsentsNavCommand());
            nonExecCommands.Add(builder.BuildDepOnboardingSettingsNavCommand());
            nonExecCommands.Add(builder.BuildDerivedCredentialsNavCommand());
            nonExecCommands.Add(builder.BuildDetectedAppsNavCommand());
            nonExecCommands.Add(builder.BuildDeviceCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildDeviceCompliancePoliciesNavCommand());
            nonExecCommands.Add(builder.BuildDeviceCompliancePolicyDeviceStateSummaryNavCommand());
            nonExecCommands.Add(builder.BuildDeviceCompliancePolicySettingStateSummariesNavCommand());
            nonExecCommands.Add(builder.BuildDeviceComplianceScriptsNavCommand());
            nonExecCommands.Add(builder.BuildDeviceConfigurationConflictSummaryNavCommand());
            nonExecCommands.Add(builder.BuildDeviceConfigurationDeviceStateSummariesNavCommand());
            nonExecCommands.Add(builder.BuildDeviceConfigurationRestrictedAppsViolationsNavCommand());
            nonExecCommands.Add(builder.BuildDeviceConfigurationsAllManagedDeviceCertificateStatesNavCommand());
            nonExecCommands.Add(builder.BuildDeviceConfigurationsNavCommand());
            nonExecCommands.Add(builder.BuildDeviceConfigurationUserStateSummariesNavCommand());
            nonExecCommands.Add(builder.BuildDeviceCustomAttributeShellScriptsNavCommand());
            nonExecCommands.Add(builder.BuildDeviceEnrollmentConfigurationsNavCommand());
            nonExecCommands.Add(builder.BuildDeviceHealthScriptsNavCommand());
            nonExecCommands.Add(builder.BuildDeviceManagementPartnersNavCommand());
            nonExecCommands.Add(builder.BuildDeviceManagementScriptsNavCommand());
            nonExecCommands.Add(builder.BuildDeviceShellScriptsNavCommand());
            nonExecCommands.Add(builder.BuildDomainJoinConnectorsNavCommand());
            nonExecCommands.Add(builder.BuildElevationRequestsNavCommand());
            nonExecCommands.Add(builder.BuildEmbeddedSIMActivationCodePoolsNavCommand());
            nonExecCommands.Add(builder.BuildEnableAndroidDeviceAdministratorEnrollmentNavCommand());
            nonExecCommands.Add(builder.BuildEnableLegacyPcManagementNavCommand());
            nonExecCommands.Add(builder.BuildEnableUnlicensedAdminstratorsNavCommand());
            nonExecCommands.Add(builder.BuildEvaluateAssignmentFilterNavCommand());
            nonExecCommands.Add(builder.BuildExchangeConnectorsNavCommand());
            nonExecCommands.Add(builder.BuildExchangeOnPremisesPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildExchangeOnPremisesPolicyNavCommand());
            nonExecCommands.Add(builder.BuildGetAssignedRoleDetailsNavCommand());
            nonExecCommands.Add(builder.BuildGetAssignmentFiltersStatusDetailsNavCommand());
            nonExecCommands.Add(builder.BuildGetComanagedDevicesSummaryNavCommand());
            nonExecCommands.Add(builder.BuildGetComanagementEligibleDevicesSummaryNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildGetEffectivePermissionsNavCommand());
            nonExecCommands.Add(builder.BuildGetEffectivePermissionsWithScopeRbCommand());
            nonExecCommands.Add(builder.BuildGetRoleScopeTagsByIdsWithIdsRbCommand());
            nonExecCommands.Add(builder.BuildGetRoleScopeTagsByResourceWithResourceRbCommand());
            nonExecCommands.Add(builder.BuildGetSuggestedEnrollmentLimitWithEnrollmentTypeRbCommand());
            nonExecCommands.Add(builder.BuildGroupPolicyCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildGroupPolicyConfigurationsNavCommand());
            nonExecCommands.Add(builder.BuildGroupPolicyDefinitionFilesNavCommand());
            nonExecCommands.Add(builder.BuildGroupPolicyDefinitionsNavCommand());
            nonExecCommands.Add(builder.BuildGroupPolicyMigrationReportsNavCommand());
            nonExecCommands.Add(builder.BuildGroupPolicyObjectFilesNavCommand());
            nonExecCommands.Add(builder.BuildGroupPolicyUploadedDefinitionFilesNavCommand());
            nonExecCommands.Add(builder.BuildImportedDeviceIdentitiesNavCommand());
            nonExecCommands.Add(builder.BuildImportedWindowsAutopilotDeviceIdentitiesNavCommand());
            nonExecCommands.Add(builder.BuildIntentsNavCommand());
            nonExecCommands.Add(builder.BuildIntuneBrandingProfilesNavCommand());
            nonExecCommands.Add(builder.BuildIosUpdateStatusesNavCommand());
            nonExecCommands.Add(builder.BuildMacOSSoftwareUpdateAccountSummariesNavCommand());
            nonExecCommands.Add(builder.BuildManagedDeviceCleanupRulesNavCommand());
            nonExecCommands.Add(builder.BuildManagedDeviceEncryptionStatesNavCommand());
            nonExecCommands.Add(builder.BuildManagedDeviceOverviewNavCommand());
            nonExecCommands.Add(builder.BuildManagedDevicesNavCommand());
            nonExecCommands.Add(builder.BuildMicrosoftTunnelConfigurationsNavCommand());
            nonExecCommands.Add(builder.BuildMicrosoftTunnelHealthThresholdsNavCommand());
            nonExecCommands.Add(builder.BuildMicrosoftTunnelServerLogCollectionResponsesNavCommand());
            nonExecCommands.Add(builder.BuildMicrosoftTunnelSitesNavCommand());
            nonExecCommands.Add(builder.BuildMobileAppTroubleshootingEventsNavCommand());
            nonExecCommands.Add(builder.BuildMobileThreatDefenseConnectorsNavCommand());
            nonExecCommands.Add(builder.BuildMonitoringNavCommand());
            nonExecCommands.Add(builder.BuildNdesConnectorsNavCommand());
            nonExecCommands.Add(builder.BuildNotificationMessageTemplatesNavCommand());
            nonExecCommands.Add(builder.BuildOperationApprovalPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildOperationApprovalRequestsNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildPrivilegeManagementElevationsNavCommand());
            nonExecCommands.Add(builder.BuildRemoteActionAuditsNavCommand());
            nonExecCommands.Add(builder.BuildRemoteAssistancePartnersNavCommand());
            nonExecCommands.Add(builder.BuildRemoteAssistanceSettingsNavCommand());
            nonExecCommands.Add(builder.BuildReportsNavCommand());
            nonExecCommands.Add(builder.BuildResourceAccessProfilesNavCommand());
            nonExecCommands.Add(builder.BuildResourceOperationsNavCommand());
            nonExecCommands.Add(builder.BuildReusablePolicySettingsNavCommand());
            nonExecCommands.Add(builder.BuildReusableSettingsNavCommand());
            nonExecCommands.Add(builder.BuildRoleAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildRoleDefinitionsNavCommand());
            nonExecCommands.Add(builder.BuildRoleScopeTagsNavCommand());
            nonExecCommands.Add(builder.BuildScopedForResourceWithResourceRbCommand());
            nonExecCommands.Add(builder.BuildSendCustomNotificationToCompanyPortalNavCommand());
            nonExecCommands.Add(builder.BuildServiceNowConnectionsNavCommand());
            nonExecCommands.Add(builder.BuildSettingDefinitionsNavCommand());
            nonExecCommands.Add(builder.BuildSoftwareUpdateStatusSummaryNavCommand());
            nonExecCommands.Add(builder.BuildTelecomExpenseManagementPartnersNavCommand());
            nonExecCommands.Add(builder.BuildTemplateInsightsNavCommand());
            nonExecCommands.Add(builder.BuildTemplateSettingsNavCommand());
            nonExecCommands.Add(builder.BuildTemplatesNavCommand());
            nonExecCommands.Add(builder.BuildTenantAttachRBACNavCommand());
            nonExecCommands.Add(builder.BuildTermsAndConditionsNavCommand());
            nonExecCommands.Add(builder.BuildTroubleshootingEventsNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsAnomalyCorrelationGroupOverviewNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsAnomalyDeviceNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsAnomalyNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIdNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsAppHealthApplicationPerformanceNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsAppHealthDeviceModelPerformanceNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsAppHealthDevicePerformanceDetailsNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsAppHealthDevicePerformanceNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsAppHealthOSVersionPerformanceNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsAppHealthOverviewNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsBaselinesNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsBatteryHealthAppImpactNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsBatteryHealthCapacityDetailsNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsBatteryHealthDeviceAppImpactNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsBatteryHealthDevicePerformanceNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsBatteryHealthModelPerformanceNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsBatteryHealthOsPerformanceNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsBatteryHealthRuntimeDetailsNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsDeviceMetricHistoryNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsDevicePerformanceNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsDeviceScopeNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsDeviceScopesNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsDeviceScoresNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsDeviceStartupHistoryNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsDeviceStartupProcessesNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsDeviceStartupProcessPerformanceNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsDevicesWithoutCloudIdentityNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsDeviceTimelineEventNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsImpactingProcessNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsMetricHistoryNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsModelScoresNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsNotAutopilotReadyDeviceNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsOverviewNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsRemoteConnectionNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsResourcePerformanceNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsScoreHistoryNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsSummarizedDeviceScopesNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsSummarizeWorkFromAnywhereDevicesNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsWorkFromAnywhereMetricsNavCommand());
            nonExecCommands.Add(builder.BuildUserExperienceAnalyticsWorkFromAnywhereModelPerformanceNavCommand());
            nonExecCommands.Add(builder.BuildUserPfxCertificatesNavCommand());
            nonExecCommands.Add(builder.BuildVerifyWindowsEnrollmentAutoDiscoveryWithDomainNameRbCommand());
            nonExecCommands.Add(builder.BuildVirtualEndpointNavCommand());
            nonExecCommands.Add(builder.BuildWindowsAutopilotDeploymentProfilesNavCommand());
            nonExecCommands.Add(builder.BuildWindowsAutopilotDeviceIdentitiesNavCommand());
            nonExecCommands.Add(builder.BuildWindowsAutopilotSettingsNavCommand());
            nonExecCommands.Add(builder.BuildWindowsDriverUpdateProfilesNavCommand());
            nonExecCommands.Add(builder.BuildWindowsFeatureUpdateProfilesNavCommand());
            nonExecCommands.Add(builder.BuildWindowsInformationProtectionAppLearningSummariesNavCommand());
            nonExecCommands.Add(builder.BuildWindowsInformationProtectionNetworkLearningSummariesNavCommand());
            nonExecCommands.Add(builder.BuildWindowsMalwareInformationNavCommand());
            nonExecCommands.Add(builder.BuildWindowsQualityUpdateProfilesNavCommand());
            nonExecCommands.Add(builder.BuildWindowsUpdateCatalogItemsNavCommand());
            nonExecCommands.Add(builder.BuildZebraFotaArtifactsNavCommand());
            nonExecCommands.Add(builder.BuildZebraFotaConnectorNavCommand());
            nonExecCommands.Add(builder.BuildZebraFotaDeploymentsNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of device entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDevicesNavCommand()
        {
            var command = new Command("devices");
            command.Description = "Provides operations to manage the collection of device entities.";
            var builder = new DevicesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            nonExecCommands.Add(builder.BuildGetByIdsNavCommand());
            nonExecCommands.Add(builder.BuildGetUserOwnedObjectsNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildValidatePropertiesNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of device entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDevicesWithDeviceIdRbCommand()
        {
            var command = new Command("devices-with-device-id");
            command.Description = "Provides operations to manage the collection of device entities.";
            var builder = new DevicesWithDeviceIdRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the directory singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDirectoryNavCommand()
        {
            var command = new Command("directory");
            command.Description = "Provides operations to manage the directory singleton.";
            var builder = new DirectoryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAdministrativeUnitsNavCommand());
            nonExecCommands.Add(builder.BuildAttributeSetsNavCommand());
            nonExecCommands.Add(builder.BuildCertificateAuthoritiesNavCommand());
            nonExecCommands.Add(builder.BuildCustomSecurityAttributeDefinitionsNavCommand());
            nonExecCommands.Add(builder.BuildDeletedItemsNavCommand());
            nonExecCommands.Add(builder.BuildDeviceLocalCredentialsNavCommand());
            nonExecCommands.Add(builder.BuildExternalUserProfilesNavCommand());
            nonExecCommands.Add(builder.BuildFeatureRolloutPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildFederationConfigurationsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildImpactedResourcesNavCommand());
            nonExecCommands.Add(builder.BuildInboundSharedUserProfilesNavCommand());
            nonExecCommands.Add(builder.BuildOnPremisesSynchronizationNavCommand());
            nonExecCommands.Add(builder.BuildOutboundSharedUserProfilesNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildPendingExternalUserProfilesNavCommand());
            nonExecCommands.Add(builder.BuildRecommendationsNavCommand());
            nonExecCommands.Add(builder.BuildSharedEmailDomainsNavCommand());
            nonExecCommands.Add(builder.BuildSubscriptionsNavCommand());
            nonExecCommands.Add(builder.BuildSubscriptionsWithCommerceSubscriptionIdRbCommand());
            nonExecCommands.Add(builder.BuildSubscriptionsWithOcpSubscriptionIdRbCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of directoryObject entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDirectoryObjectsNavCommand()
        {
            var command = new Command("directory-objects");
            command.Description = "Provides operations to manage the collection of directoryObject entities.";
            var builder = new DirectoryObjectsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            nonExecCommands.Add(builder.BuildGetByIdsNavCommand());
            nonExecCommands.Add(builder.BuildGetUserOwnedObjectsNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildValidatePropertiesNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of directoryRole entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDirectoryRolesNavCommand()
        {
            var command = new Command("directory-roles");
            command.Description = "Provides operations to manage the collection of directoryRole entities.";
            var builder = new DirectoryRolesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            nonExecCommands.Add(builder.BuildGetByIdsNavCommand());
            nonExecCommands.Add(builder.BuildGetUserOwnedObjectsNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildValidatePropertiesNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of directoryRole entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDirectoryRolesWithRoleTemplateIdRbCommand()
        {
            var command = new Command("directory-roles-with-role-template-id");
            command.Description = "Provides operations to manage the collection of directoryRole entities.";
            var builder = new DirectoryRolesWithRoleTemplateIdRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of directoryRoleTemplate entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDirectoryRoleTemplatesNavCommand()
        {
            var command = new Command("directory-role-templates");
            command.Description = "Provides operations to manage the collection of directoryRoleTemplate entities.";
            var builder = new DirectoryRoleTemplatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            nonExecCommands.Add(builder.BuildGetByIdsNavCommand());
            nonExecCommands.Add(builder.BuildGetUserOwnedObjectsNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildValidatePropertiesNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of directorySettingTemplate entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDirectorySettingTemplatesNavCommand()
        {
            var command = new Command("directory-setting-templates");
            command.Description = "Provides operations to manage the collection of directorySettingTemplate entities.";
            var builder = new DirectorySettingTemplatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            nonExecCommands.Add(builder.BuildGetByIdsNavCommand());
            nonExecCommands.Add(builder.BuildGetUserOwnedObjectsNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildValidatePropertiesNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of domainDnsRecord entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDomainDnsRecordsNavCommand()
        {
            var command = new Command("domain-dns-records");
            command.Description = "Provides operations to manage the collection of domainDnsRecord entities.";
            var builder = new DomainDnsRecordsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of domain entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDomainsNavCommand()
        {
            var command = new Command("domains");
            command.Description = "Provides operations to manage the collection of domain entities.";
            var builder = new DomainsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of drive entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDrivesNavCommand()
        {
            var command = new Command("drives");
            command.Description = "Provides operations to manage the collection of drive entities.";
            var builder = new DrivesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the educationRoot singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEducationNavCommand()
        {
            var command = new Command("education");
            command.Description = "Provides operations to manage the educationRoot singleton.";
            var builder = new EducationRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildClassesNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildMeNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildSchoolsNavCommand());
            nonExecCommands.Add(builder.BuildSynchronizationProfilesNavCommand());
            nonExecCommands.Add(builder.BuildUsersNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the employeeExperience singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEmployeeExperienceNavCommand()
        {
            var command = new Command("employee-experience");
            command.Description = "Provides operations to manage the employeeExperience singleton.";
            var builder = new EmployeeExperienceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCommunitiesNavCommand());
            nonExecCommands.Add(builder.BuildEngagementAsyncOperationsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildGoalsNavCommand());
            nonExecCommands.Add(builder.BuildLearningCourseActivitiesNavCommand());
            nonExecCommands.Add(builder.BuildLearningCourseActivitiesWithExternalcourseActivityIdRbCommand());
            nonExecCommands.Add(builder.BuildLearningProvidersNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the external singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildExternalNavCommand()
        {
            var command = new Command("external");
            command.Description = "Provides operations to manage the external singleton.";
            var builder = new ExternalRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAuthorizationSystemsNavCommand());
            nonExecCommands.Add(builder.BuildConnectionsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildIndustryDataNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of filterOperatorSchema entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildFilterOperatorsNavCommand()
        {
            var command = new Command("filter-operators");
            command.Description = "Provides operations to manage the collection of filterOperatorSchema entities.";
            var builder = new FilterOperatorsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the financials singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildFinancialsNavCommand()
        {
            var command = new Command("financials");
            command.Description = "Provides operations to manage the financials singleton.";
            var builder = new FinancialsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCompaniesNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of attributeMappingFunctionSchema entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildFunctionsNavCommand()
        {
            var command = new Command("functions");
            command.Description = "Provides operations to manage the collection of attributeMappingFunctionSchema entities.";
            var builder = new FunctionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of governanceResource entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGovernanceResourcesNavCommand()
        {
            var command = new Command("governance-resources");
            command.Description = "Provides operations to manage the collection of governanceResource entities.";
            var builder = new GovernanceResourcesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildRegisterNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of governanceRoleAssignmentRequest entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGovernanceRoleAssignmentRequestsNavCommand()
        {
            var command = new Command("governance-role-assignment-requests");
            command.Description = "Provides operations to manage the collection of governanceRoleAssignmentRequest entities.";
            var builder = new GovernanceRoleAssignmentRequestsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of governanceRoleAssignment entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGovernanceRoleAssignmentsNavCommand()
        {
            var command = new Command("governance-role-assignments");
            command.Description = "Provides operations to manage the collection of governanceRoleAssignment entities.";
            var builder = new GovernanceRoleAssignmentsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildExportNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of governanceRoleDefinition entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGovernanceRoleDefinitionsNavCommand()
        {
            var command = new Command("governance-role-definitions");
            command.Description = "Provides operations to manage the collection of governanceRoleDefinition entities.";
            var builder = new GovernanceRoleDefinitionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of governanceRoleSetting entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGovernanceRoleSettingsNavCommand()
        {
            var command = new Command("governance-role-settings");
            command.Description = "Provides operations to manage the collection of governanceRoleSetting entities.";
            var builder = new GovernanceRoleSettingsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of governanceSubject entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGovernanceSubjectsNavCommand()
        {
            var command = new Command("governance-subjects");
            command.Description = "Provides operations to manage the collection of governanceSubject entities.";
            var builder = new GovernanceSubjectsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of groupLifecyclePolicy entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGroupLifecyclePoliciesNavCommand()
        {
            var command = new Command("group-lifecycle-policies");
            command.Description = "Provides operations to manage the collection of groupLifecyclePolicy entities.";
            var builder = new GroupLifecyclePoliciesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildRenewGroupNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of group entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGroupsNavCommand()
        {
            var command = new Command("groups");
            command.Description = "Provides operations to manage the collection of group entities.";
            var builder = new GroupsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            nonExecCommands.Add(builder.BuildEvaluateDynamicMembershipNavCommand());
            nonExecCommands.Add(builder.BuildGetByIdsNavCommand());
            nonExecCommands.Add(builder.BuildGetUserOwnedObjectsNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildValidatePropertiesNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of group entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGroupsWithUniqueNameRbCommand()
        {
            var command = new Command("groups-with-unique-name");
            command.Description = "Provides operations to manage the collection of group entities.";
            var builder = new GroupsWithUniqueNameRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the identityGovernance singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIdentityGovernanceNavCommand()
        {
            var command = new Command("identity-governance");
            command.Description = "Provides operations to manage the identityGovernance singleton.";
            var builder = new IdentityGovernanceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAccessReviewsNavCommand());
            nonExecCommands.Add(builder.BuildAppConsentNavCommand());
            nonExecCommands.Add(builder.BuildEntitlementManagementNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildLifecycleWorkflowsNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildPermissionsAnalyticsNavCommand());
            nonExecCommands.Add(builder.BuildPermissionsManagementNavCommand());
            nonExecCommands.Add(builder.BuildPrivilegedAccessNavCommand());
            nonExecCommands.Add(builder.BuildRoleManagementAlertsNavCommand());
            nonExecCommands.Add(builder.BuildTermsOfUseNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the identityContainer singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIdentityNavCommand()
        {
            var command = new Command("identity");
            command.Description = "Provides operations to manage the identityContainer singleton.";
            var builder = new IdentityRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildApiConnectorsNavCommand());
            nonExecCommands.Add(builder.BuildAuthenticationEventListenersNavCommand());
            nonExecCommands.Add(builder.BuildAuthenticationEventsFlowsNavCommand());
            nonExecCommands.Add(builder.BuildB2cUserFlowsNavCommand());
            nonExecCommands.Add(builder.BuildB2xUserFlowsNavCommand());
            nonExecCommands.Add(builder.BuildConditionalAccessNavCommand());
            nonExecCommands.Add(builder.BuildContinuousAccessEvaluationPolicyNavCommand());
            nonExecCommands.Add(builder.BuildCustomAuthenticationExtensionsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildIdentityProvidersNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildUserFlowAttributesNavCommand());
            nonExecCommands.Add(builder.BuildUserFlowsNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the identityProtectionRoot singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIdentityProtectionNavCommand()
        {
            var command = new Command("identity-protection");
            command.Description = "Provides operations to manage the identityProtectionRoot singleton.";
            var builder = new IdentityProtectionRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildRiskDetectionsNavCommand());
            nonExecCommands.Add(builder.BuildRiskyServicePrincipalsNavCommand());
            nonExecCommands.Add(builder.BuildRiskyUsersNavCommand());
            nonExecCommands.Add(builder.BuildServicePrincipalRiskDetectionsNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of identityProvider entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIdentityProvidersNavCommand()
        {
            var command = new Command("identity-providers");
            command.Description = "Provides operations to manage the collection of identityProvider entities.";
            var builder = new IdentityProvidersRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAvailableProviderTypesNavCommand());
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the informationProtection singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildInformationProtectionNavCommand()
        {
            var command = new Command("information-protection");
            command.Description = "Provides operations to manage the informationProtection singleton.";
            var builder = new InformationProtectionRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildBitlockerNavCommand());
            nonExecCommands.Add(builder.BuildDataLossPreventionPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildDecryptBufferNavCommand());
            nonExecCommands.Add(builder.BuildEncryptBufferNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildPolicyNavCommand());
            nonExecCommands.Add(builder.BuildSensitivityLabelsNavCommand());
            nonExecCommands.Add(builder.BuildSensitivityPolicySettingsNavCommand());
            nonExecCommands.Add(builder.BuildSignDigestNavCommand());
            nonExecCommands.Add(builder.BuildThreatAssessmentRequestsNavCommand());
            nonExecCommands.Add(builder.BuildVerifySignatureNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of invitation entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildInvitationsNavCommand()
        {
            var command = new Command("invitations");
            command.Description = "Provides operations to manage the collection of invitation entities.";
            var builder = new InvitationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of messageEvent entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMessageEventsNavCommand()
        {
            var command = new Command("message-events");
            command.Description = "Provides operations to manage the collection of messageEvent entities.";
            var builder = new MessageEventsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of messageRecipient entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMessageRecipientsNavCommand()
        {
            var command = new Command("message-recipients");
            command.Description = "Provides operations to manage the collection of messageRecipient entities.";
            var builder = new MessageRecipientsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of messageTrace entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMessageTracesNavCommand()
        {
            var command = new Command("message-traces");
            command.Description = "Provides operations to manage the collection of messageTrace entities.";
            var builder = new MessageTracesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of mobilityManagementPolicy entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMobilityManagementPoliciesNavCommand()
        {
            var command = new Command("mobility-management-policies");
            command.Description = "Provides operations to manage the collection of mobilityManagementPolicy entities.";
            var builder = new MobilityManagementPoliciesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the monitoring singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMonitoringNavCommand()
        {
            var command = new Command("monitoring");
            command.Description = "Provides operations to manage the monitoring singleton.";
            var builder = new MonitoringRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAlertRecordsNavCommand());
            nonExecCommands.Add(builder.BuildAlertRulesNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the networkAccessRoot singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNetworkAccessNavCommand()
        {
            var command = new Command("network-access");
            command.Description = "Provides operations to manage the networkAccessRoot singleton.";
            var builder = new NetworkAccessRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAlertsNavCommand());
            nonExecCommands.Add(builder.BuildConnectivityNavCommand());
            nonExecCommands.Add(builder.BuildFilteringPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildFilteringProfilesNavCommand());
            nonExecCommands.Add(builder.BuildForwardingPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildForwardingProfilesNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildLogsNavCommand());
            nonExecCommands.Add(builder.BuildMicrosoftGraphNetworkaccessOnboardNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildReportsNavCommand());
            nonExecCommands.Add(builder.BuildSettingsNavCommand());
            nonExecCommands.Add(builder.BuildTenantStatusNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of oAuth2PermissionGrant entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOauth2PermissionGrantsNavCommand()
        {
            var command = new Command("oauth2-permission-grants");
            command.Description = "Provides operations to manage the collection of oAuth2PermissionGrant entities.";
            var builder = new Oauth2PermissionGrantsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of onPremisesPublishingProfile entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOnPremisesPublishingProfilesNavCommand()
        {
            var command = new Command("on-premises-publishing-profiles");
            command.Description = "Provides operations to manage the collection of onPremisesPublishingProfile entities.";
            var builder = new OnPremisesPublishingProfilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of organization entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOrganizationNavCommand()
        {
            var command = new Command("organization");
            command.Description = "Provides operations to manage the collection of organization entities.";
            var builder = new OrganizationRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            nonExecCommands.Add(builder.BuildGetByIdsNavCommand());
            nonExecCommands.Add(builder.BuildGetUserOwnedObjectsNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildValidatePropertiesNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of payloadResponse entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPayloadResponseNavCommand()
        {
            var command = new Command("payload-response");
            command.Description = "Provides operations to manage the collection of payloadResponse entities.";
            var builder = new PayloadResponseRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of resourceSpecificPermissionGrant entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPermissionGrantsNavCommand()
        {
            var command = new Command("permission-grants");
            command.Description = "Provides operations to manage the collection of resourceSpecificPermissionGrant entities.";
            var builder = new PermissionGrantsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            nonExecCommands.Add(builder.BuildGetByIdsNavCommand());
            nonExecCommands.Add(builder.BuildGetUserOwnedObjectsNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildValidatePropertiesNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The places property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPlacesNavCommand()
        {
            var command = new Command("places");
            command.Description = "The places property";
            var builder = new PlacesRequestBuilder(PathParameters);
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            nonExecCommands.Add(builder.BuildGraphRoomListNavCommand());
            nonExecCommands.Add(builder.BuildGraphRoomNavCommand());
            var cmds = builder.BuildCommand();
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of place entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPlacesWithPlaceIdRbCommand()
        {
            var command = new Command("places-with-place-id");
            command.Description = "Provides operations to manage the collection of place entities.";
            var builder = new PlacesWithPlaceIdRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the planner singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPlannerNavCommand()
        {
            var command = new Command("planner");
            command.Description = "Provides operations to manage the planner singleton.";
            var builder = new PlannerRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildBucketsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildPlansNavCommand());
            nonExecCommands.Add(builder.BuildRostersNavCommand());
            nonExecCommands.Add(builder.BuildTasksNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the policyRoot singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPoliciesNavCommand()
        {
            var command = new Command("policies");
            command.Description = "Provides operations to manage the policyRoot singleton.";
            var builder = new PoliciesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAccessReviewPolicyNavCommand());
            nonExecCommands.Add(builder.BuildActivityBasedTimeoutPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildAdminConsentRequestPolicyNavCommand());
            nonExecCommands.Add(builder.BuildAppManagementPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildAuthenticationFlowsPolicyNavCommand());
            nonExecCommands.Add(builder.BuildAuthenticationMethodsPolicyNavCommand());
            nonExecCommands.Add(builder.BuildAuthenticationStrengthPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildAuthorizationPolicyNavCommand());
            nonExecCommands.Add(builder.BuildB2cAuthenticationMethodsPolicyNavCommand());
            nonExecCommands.Add(builder.BuildClaimsMappingPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildConditionalAccessPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildCrossTenantAccessPolicyNavCommand());
            nonExecCommands.Add(builder.BuildDefaultAppManagementPolicyNavCommand());
            nonExecCommands.Add(builder.BuildDeviceRegistrationPolicyNavCommand());
            nonExecCommands.Add(builder.BuildDirectoryRoleAccessReviewPolicyNavCommand());
            nonExecCommands.Add(builder.BuildExternalIdentitiesPolicyNavCommand());
            nonExecCommands.Add(builder.BuildFeatureRolloutPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildFederatedTokenValidationPolicyNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildHomeRealmDiscoveryPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildIdentitySecurityDefaultsEnforcementPolicyNavCommand());
            nonExecCommands.Add(builder.BuildMobileAppManagementPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildMobileDeviceManagementPoliciesNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildPermissionGrantPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildRoleManagementPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildRoleManagementPolicyAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildServicePrincipalCreationPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildTokenIssuancePoliciesNavCommand());
            nonExecCommands.Add(builder.BuildTokenLifetimePoliciesNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the print singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPrintNavCommand()
        {
            var command = new Command("print");
            command.Description = "Provides operations to manage the print singleton.";
            var builder = new PrintRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildConnectorsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildOperationsNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildPrinterSharesNavCommand());
            nonExecCommands.Add(builder.BuildPrintersNavCommand());
            nonExecCommands.Add(builder.BuildServicesNavCommand());
            nonExecCommands.Add(builder.BuildSharesNavCommand());
            nonExecCommands.Add(builder.BuildTaskDefinitionsNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the privacy singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPrivacyNavCommand()
        {
            var command = new Command("privacy");
            command.Description = "Provides operations to manage the privacy singleton.";
            var builder = new PrivacyRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildSubjectRightsRequestsNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of privilegedAccess entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPrivilegedAccessNavCommand()
        {
            var command = new Command("privileged-access");
            command.Description = "Provides operations to manage the collection of privilegedAccess entities.";
            var builder = new PrivilegedAccessRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of privilegedApproval entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPrivilegedApprovalNavCommand()
        {
            var command = new Command("privileged-approval");
            command.Description = "Provides operations to manage the collection of privilegedApproval entities.";
            var builder = new PrivilegedApprovalRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildMyRequestsNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of privilegedOperationEvent entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPrivilegedOperationEventsNavCommand()
        {
            var command = new Command("privileged-operation-events");
            command.Description = "Provides operations to manage the collection of privilegedOperationEvent entities.";
            var builder = new PrivilegedOperationEventsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of privilegedRoleAssignmentRequest entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPrivilegedRoleAssignmentRequestsNavCommand()
        {
            var command = new Command("privileged-role-assignment-requests");
            command.Description = "Provides operations to manage the collection of privilegedRoleAssignmentRequest entities.";
            var builder = new PrivilegedRoleAssignmentRequestsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildMyNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of privilegedRoleAssignment entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPrivilegedRoleAssignmentsNavCommand()
        {
            var command = new Command("privileged-role-assignments");
            command.Description = "Provides operations to manage the collection of privilegedRoleAssignment entities.";
            var builder = new PrivilegedRoleAssignmentsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildMyNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of privilegedRole entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPrivilegedRolesNavCommand()
        {
            var command = new Command("privileged-roles");
            command.Description = "Provides operations to manage the collection of privilegedRole entities.";
            var builder = new PrivilegedRolesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of privilegedSignupStatus entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPrivilegedSignupStatusNavCommand()
        {
            var command = new Command("privileged-signup-status");
            command.Description = "Provides operations to manage the collection of privilegedSignupStatus entities.";
            var builder = new PrivilegedSignupStatusRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCanSignUpNavCommand());
            nonExecCommands.Add(builder.BuildCompleteSetupNavCommand());
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildIsSignedUpNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildSignUpNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of programControl entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildProgramControlsNavCommand()
        {
            var command = new Command("program-controls");
            command.Description = "Provides operations to manage the collection of programControl entities.";
            var builder = new ProgramControlsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of programControlType entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildProgramControlTypesNavCommand()
        {
            var command = new Command("program-control-types");
            command.Description = "Provides operations to manage the collection of programControlType entities.";
            var builder = new ProgramControlTypesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of program entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildProgramsNavCommand()
        {
            var command = new Command("programs");
            command.Description = "Provides operations to manage the collection of program entities.";
            var builder = new ProgramsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the reportRoot singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildReportsNavCommand()
        {
            var command = new Command("reports");
            command.Description = "Provides operations to manage the reportRoot singleton.";
            var builder = new ReportsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAppCredentialSignInActivitiesNavCommand());
            nonExecCommands.Add(builder.BuildApplicationSignInDetailedSummaryNavCommand());
            nonExecCommands.Add(builder.BuildAuthenticationMethodsNavCommand());
            nonExecCommands.Add(builder.BuildCredentialUserRegistrationDetailsNavCommand());
            nonExecCommands.Add(builder.BuildDailyPrintUsageByPrinterNavCommand());
            nonExecCommands.Add(builder.BuildDailyPrintUsageByUserNavCommand());
            nonExecCommands.Add(builder.BuildDailyPrintUsageNavCommand());
            nonExecCommands.Add(builder.BuildDailyPrintUsageSummariesByPrinterNavCommand());
            nonExecCommands.Add(builder.BuildDailyPrintUsageSummariesByUserNavCommand());
            nonExecCommands.Add(builder.BuildDeviceConfigurationDeviceActivityNavCommand());
            nonExecCommands.Add(builder.BuildDeviceConfigurationUserActivityNavCommand());
            nonExecCommands.Add(builder.BuildGetAttackSimulationRepeatOffendersNavCommand());
            nonExecCommands.Add(builder.BuildGetAttackSimulationSimulationUserCoverageNavCommand());
            nonExecCommands.Add(builder.BuildGetAttackSimulationTrainingUserCoverageNavCommand());
            nonExecCommands.Add(builder.BuildGetAzureADApplicationSignInSummaryWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetBrowserDistributionUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetBrowserUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetBrowserUserDetailWithPeriodRbCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildGetCredentialUsageSummaryWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetCredentialUserRegistrationCountNavCommand());
            nonExecCommands.Add(builder.BuildGetEmailActivityCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetEmailActivityUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetEmailActivityUserDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetEmailActivityUserDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetEmailAppUsageAppsUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetEmailAppUsageUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetEmailAppUsageUserDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetEmailAppUsageUserDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetEmailAppUsageVersionsUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetFormsUserActivityCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetFormsUserActivityUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetFormsUserActivityUserDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetFormsUserActivityUserDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetGroupArchivedPrintJobsWithGroupIdWithStartDateTimeWithEndDateTimeRbCommand());
            nonExecCommands.Add(builder.BuildGetM365AppPlatformUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetM365AppUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetM365AppUserDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetM365AppUserDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetMailboxUsageDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetMailboxUsageMailboxCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetMailboxUsageQuotaStatusMailboxCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetMailboxUsageStorageWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetOffice365ActivationCountsNavCommand());
            nonExecCommands.Add(builder.BuildGetOffice365ActivationsUserCountsNavCommand());
            nonExecCommands.Add(builder.BuildGetOffice365ActivationsUserDetailNavCommand());
            nonExecCommands.Add(builder.BuildGetOffice365ActiveUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetOffice365ActiveUserDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetOffice365ActiveUserDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetOffice365GroupsActivityCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetOffice365GroupsActivityDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetOffice365GroupsActivityDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetOffice365GroupsActivityFileCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetOffice365GroupsActivityGroupCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetOffice365GroupsActivityStorageWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetOffice365ServicesUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetOneDriveActivityFileCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetOneDriveActivityUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetOneDriveActivityUserDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetOneDriveActivityUserDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetOneDriveUsageAccountCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetOneDriveUsageAccountDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetOneDriveUsageAccountDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetOneDriveUsageFileCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetOneDriveUsageStorageWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetPrinterArchivedPrintJobsWithPrinterIdWithStartDateTimeWithEndDateTimeRbCommand());
            nonExecCommands.Add(builder.BuildGetRelyingPartyDetailedSummaryWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSharePointActivityFileCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSharePointActivityPagesWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSharePointActivityUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSharePointActivityUserDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetSharePointActivityUserDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSharePointSiteUsageDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetSharePointSiteUsageDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSharePointSiteUsageFileCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSharePointSiteUsagePagesWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSharePointSiteUsageSiteCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSharePointSiteUsageStorageWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessActivityCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessActivityUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessActivityUserDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessActivityUserDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessDeviceUsageDistributionUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessDeviceUsageUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessDeviceUsageUserDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessDeviceUsageUserDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessOrganizerActivityCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessOrganizerActivityMinuteCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessOrganizerActivityUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessParticipantActivityCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessParticipantActivityMinuteCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessParticipantActivityUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessPeerToPeerActivityCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessPeerToPeerActivityMinuteCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetSkypeForBusinessPeerToPeerActivityUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsDeviceUsageDistributionTotalUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsDeviceUsageDistributionUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsDeviceUsageTotalUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsDeviceUsageUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsDeviceUsageUserDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsDeviceUsageUserDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsTeamActivityCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsTeamActivityDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsTeamActivityDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsTeamActivityDistributionCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsTeamCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsUserActivityCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsUserActivityDistributionTotalUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsUserActivityDistributionUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsUserActivityTotalCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsUserActivityTotalDistributionCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsUserActivityTotalUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsUserActivityUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsUserActivityUserDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetTeamsUserActivityUserDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetUserArchivedPrintJobsWithUserIdWithStartDateTimeWithEndDateTimeRbCommand());
            nonExecCommands.Add(builder.BuildGetYammerActivityCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetYammerActivityUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetYammerActivityUserDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetYammerActivityUserDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetYammerDeviceUsageDistributionUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetYammerDeviceUsageUserCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetYammerDeviceUsageUserDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetYammerDeviceUsageUserDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetYammerGroupsActivityCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetYammerGroupsActivityDetailWithDateRbCommand());
            nonExecCommands.Add(builder.BuildGetYammerGroupsActivityDetailWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildGetYammerGroupsActivityGroupCountsWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildManagedDeviceEnrollmentAbandonmentDetailsWithSkipWithTopWithFilterWithSkipTokenRbCommand());
            nonExecCommands.Add(builder.BuildManagedDeviceEnrollmentAbandonmentSummaryWithSkipWithTopWithFilterWithSkipTokenRbCommand());
            nonExecCommands.Add(builder.BuildManagedDeviceEnrollmentFailureDetailsNavCommand());
            nonExecCommands.Add(builder.BuildManagedDeviceEnrollmentFailureDetailsWithSkipWithTopWithFilterWithSkipTokenRbCommand());
            nonExecCommands.Add(builder.BuildManagedDeviceEnrollmentFailureTrendsNavCommand());
            nonExecCommands.Add(builder.BuildManagedDeviceEnrollmentTopFailuresNavCommand());
            nonExecCommands.Add(builder.BuildManagedDeviceEnrollmentTopFailuresWithPeriodRbCommand());
            nonExecCommands.Add(builder.BuildMonthlyPrintUsageByPrinterNavCommand());
            nonExecCommands.Add(builder.BuildMonthlyPrintUsageByUserNavCommand());
            nonExecCommands.Add(builder.BuildMonthlyPrintUsageSummariesByPrinterNavCommand());
            nonExecCommands.Add(builder.BuildMonthlyPrintUsageSummariesByUserNavCommand());
            nonExecCommands.Add(builder.BuildPartnersNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildSecurityNavCommand());
            nonExecCommands.Add(builder.BuildServiceActivityNavCommand());
            nonExecCommands.Add(builder.BuildServicePrincipalSignInActivitiesNavCommand());
            nonExecCommands.Add(builder.BuildSlaNavCommand());
            nonExecCommands.Add(builder.BuildUserCredentialUsageDetailsNavCommand());
            nonExecCommands.Add(builder.BuildUserInsightsNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of riskDetection entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRiskDetectionsNavCommand()
        {
            var command = new Command("risk-detections");
            command.Description = "Provides operations to manage the collection of riskDetection entities.";
            var builder = new RiskDetectionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of riskyUser entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRiskyUsersNavCommand()
        {
            var command = new Command("risky-users");
            command.Description = "Provides operations to manage the collection of riskyUser entities.";
            var builder = new RiskyUsersRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildConfirmCompromisedNavCommand());
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDismissNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the roleManagement singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRoleManagementNavCommand()
        {
            var command = new Command("role-management");
            command.Description = "Provides operations to manage the roleManagement singleton.";
            var builder = new RoleManagementRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCloudPCNavCommand());
            nonExecCommands.Add(builder.BuildDeviceManagementNavCommand());
            nonExecCommands.Add(builder.BuildDirectoryNavCommand());
            nonExecCommands.Add(builder.BuildEnterpriseAppsNavCommand());
            nonExecCommands.Add(builder.BuildEntitlementManagementNavCommand());
            nonExecCommands.Add(builder.BuildExchangeNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="GraphClient"/> and sets the default values.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRootCommand()
        {
            var command = new RootCommand();
            command.Description = "Instantiates a new GraphClient and sets the default values.";
            command.AddCommand(BuildAccessReviewDecisionsNavCommand());
            command.AddCommand(BuildAccessReviewsNavCommand());
            command.AddCommand(BuildActivitystatisticsNavCommand());
            command.AddCommand(BuildAdministrativeUnitsNavCommand());
            command.AddCommand(BuildAdminNavCommand());
            command.AddCommand(BuildAgreementAcceptancesNavCommand());
            command.AddCommand(BuildAgreementsNavCommand());
            command.AddCommand(BuildAllowedDataLocationsNavCommand());
            command.AddCommand(BuildAppCatalogsNavCommand());
            command.AddCommand(BuildApplicationsNavCommand());
            command.AddCommand(BuildApplicationsWithAppIdRbCommand());
            command.AddCommand(BuildApplicationsWithUniqueNameRbCommand());
            command.AddCommand(BuildApplicationTemplatesNavCommand());
            command.AddCommand(BuildAppNavCommand());
            command.AddCommand(BuildAppRoleAssignmentsNavCommand());
            command.AddCommand(BuildApprovalWorkflowProvidersNavCommand());
            command.AddCommand(BuildAuditLogsNavCommand());
            command.AddCommand(BuildAuthenticationMethodConfigurationsNavCommand());
            command.AddCommand(BuildAuthenticationMethodsPolicyNavCommand());
            command.AddCommand(BuildBookingBusinessesNavCommand());
            command.AddCommand(BuildBookingCurrenciesNavCommand());
            command.AddCommand(BuildBusinessFlowTemplatesNavCommand());
            command.AddCommand(BuildCertificateBasedAuthConfigurationNavCommand());
            command.AddCommand(BuildChatsNavCommand());
            command.AddCommand(BuildCommandsNavCommand());
            command.AddCommand(BuildCommunicationsNavCommand());
            command.AddCommand(BuildComplianceNavCommand());
            command.AddCommand(BuildConnectionsNavCommand());
            command.AddCommand(BuildContactsNavCommand());
            command.AddCommand(BuildContractsNavCommand());
            command.AddCommand(BuildDataClassificationNavCommand());
            command.AddCommand(BuildDataPolicyOperationsNavCommand());
            command.AddCommand(BuildDeviceAppManagementNavCommand());
            command.AddCommand(BuildDeviceLocalCredentialsNavCommand());
            command.AddCommand(BuildDeviceManagementNavCommand());
            command.AddCommand(BuildDevicesNavCommand());
            command.AddCommand(BuildDevicesWithDeviceIdRbCommand());
            command.AddCommand(BuildDirectoryNavCommand());
            command.AddCommand(BuildDirectoryObjectsNavCommand());
            command.AddCommand(BuildDirectoryRolesNavCommand());
            command.AddCommand(BuildDirectoryRolesWithRoleTemplateIdRbCommand());
            command.AddCommand(BuildDirectoryRoleTemplatesNavCommand());
            command.AddCommand(BuildDirectorySettingTemplatesNavCommand());
            command.AddCommand(BuildDomainDnsRecordsNavCommand());
            command.AddCommand(BuildDomainsNavCommand());
            command.AddCommand(BuildDrivesNavCommand());
            command.AddCommand(BuildEducationNavCommand());
            command.AddCommand(BuildEmployeeExperienceNavCommand());
            command.AddCommand(BuildExternalNavCommand());
            command.AddCommand(BuildFilterOperatorsNavCommand());
            command.AddCommand(BuildFinancialsNavCommand());
            command.AddCommand(BuildFunctionsNavCommand());
            command.AddCommand(BuildGovernanceResourcesNavCommand());
            command.AddCommand(BuildGovernanceRoleAssignmentRequestsNavCommand());
            command.AddCommand(BuildGovernanceRoleAssignmentsNavCommand());
            command.AddCommand(BuildGovernanceRoleDefinitionsNavCommand());
            command.AddCommand(BuildGovernanceRoleSettingsNavCommand());
            command.AddCommand(BuildGovernanceSubjectsNavCommand());
            command.AddCommand(BuildGroupLifecyclePoliciesNavCommand());
            command.AddCommand(BuildGroupsNavCommand());
            command.AddCommand(BuildGroupsWithUniqueNameRbCommand());
            command.AddCommand(BuildIdentityGovernanceNavCommand());
            command.AddCommand(BuildIdentityNavCommand());
            command.AddCommand(BuildIdentityProtectionNavCommand());
            command.AddCommand(BuildIdentityProvidersNavCommand());
            command.AddCommand(BuildInformationProtectionNavCommand());
            command.AddCommand(BuildInvitationsNavCommand());
            command.AddCommand(BuildMessageEventsNavCommand());
            command.AddCommand(BuildMessageRecipientsNavCommand());
            command.AddCommand(BuildMessageTracesNavCommand());
            command.AddCommand(BuildMobilityManagementPoliciesNavCommand());
            command.AddCommand(BuildMonitoringNavCommand());
            command.AddCommand(BuildNetworkAccessNavCommand());
            command.AddCommand(BuildOauth2PermissionGrantsNavCommand());
            command.AddCommand(BuildOnPremisesPublishingProfilesNavCommand());
            command.AddCommand(BuildOrganizationNavCommand());
            command.AddCommand(BuildPayloadResponseNavCommand());
            command.AddCommand(BuildPermissionGrantsNavCommand());
            command.AddCommand(BuildPlacesNavCommand());
            command.AddCommand(BuildPlacesWithPlaceIdRbCommand());
            command.AddCommand(BuildPlannerNavCommand());
            command.AddCommand(BuildPoliciesNavCommand());
            command.AddCommand(BuildPrintNavCommand());
            command.AddCommand(BuildPrivacyNavCommand());
            command.AddCommand(BuildPrivilegedAccessNavCommand());
            command.AddCommand(BuildPrivilegedApprovalNavCommand());
            command.AddCommand(BuildPrivilegedOperationEventsNavCommand());
            command.AddCommand(BuildPrivilegedRoleAssignmentRequestsNavCommand());
            command.AddCommand(BuildPrivilegedRoleAssignmentsNavCommand());
            command.AddCommand(BuildPrivilegedRolesNavCommand());
            command.AddCommand(BuildPrivilegedSignupStatusNavCommand());
            command.AddCommand(BuildProgramControlsNavCommand());
            command.AddCommand(BuildProgramControlTypesNavCommand());
            command.AddCommand(BuildProgramsNavCommand());
            command.AddCommand(BuildReportsNavCommand());
            command.AddCommand(BuildRiskDetectionsNavCommand());
            command.AddCommand(BuildRiskyUsersNavCommand());
            command.AddCommand(BuildRoleManagementNavCommand());
            command.AddCommand(BuildSchemaExtensionsNavCommand());
            command.AddCommand(BuildScopedRoleMembershipsNavCommand());
            command.AddCommand(BuildSearchNavCommand());
            command.AddCommand(BuildSecurityNavCommand());
            command.AddCommand(BuildServicePrincipalsNavCommand());
            command.AddCommand(BuildServicePrincipalsWithAppIdRbCommand());
            command.AddCommand(BuildSettingsNavCommand());
            command.AddCommand(BuildSharesNavCommand());
            command.AddCommand(BuildSitesNavCommand());
            command.AddCommand(BuildSolutionsNavCommand());
            command.AddCommand(BuildSubscribedSkusNavCommand());
            command.AddCommand(BuildSubscriptionsNavCommand());
            command.AddCommand(BuildTeamsNavCommand());
            command.AddCommand(BuildTeamsTemplatesNavCommand());
            command.AddCommand(BuildTeamTemplateDefinitionNavCommand());
            command.AddCommand(BuildTeamworkNavCommand());
            command.AddCommand(BuildTenantRelationshipsNavCommand());
            command.AddCommand(BuildTermStoreNavCommand());
            command.AddCommand(BuildThreatSubmissionNavCommand());
            command.AddCommand(BuildTrustFrameworkNavCommand());
            command.AddCommand(BuildUsersNavCommand());
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of schemaExtension entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSchemaExtensionsNavCommand()
        {
            var command = new Command("schema-extensions");
            command.Description = "Provides operations to manage the collection of schemaExtension entities.";
            var builder = new SchemaExtensionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of scopedRoleMembership entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildScopedRoleMembershipsNavCommand()
        {
            var command = new Command("scoped-role-memberships");
            command.Description = "Provides operations to manage the collection of scopedRoleMembership entities.";
            var builder = new ScopedRoleMembershipsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the searchEntity singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSearchNavCommand()
        {
            var command = new Command("search");
            command.Description = "Provides operations to manage the searchEntity singleton.";
            var builder = new SearchRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAcronymsNavCommand());
            nonExecCommands.Add(builder.BuildBookmarksNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildQnasNavCommand());
            nonExecCommands.Add(builder.BuildQueryNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the security singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSecurityNavCommand()
        {
            var command = new Command("security");
            command.Description = "Provides operations to manage the security singleton.";
            var builder = new SecurityRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAlertsNavCommand());
            nonExecCommands.Add(builder.BuildAlerts_v2NavCommand());
            nonExecCommands.Add(builder.BuildAttackSimulationNavCommand());
            nonExecCommands.Add(builder.BuildAuditLogNavCommand());
            nonExecCommands.Add(builder.BuildCasesNavCommand());
            nonExecCommands.Add(builder.BuildCloudAppSecurityProfilesNavCommand());
            nonExecCommands.Add(builder.BuildCollaborationNavCommand());
            nonExecCommands.Add(builder.BuildDomainSecurityProfilesNavCommand());
            nonExecCommands.Add(builder.BuildFileSecurityProfilesNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildHostSecurityProfilesNavCommand());
            nonExecCommands.Add(builder.BuildIncidentsNavCommand());
            nonExecCommands.Add(builder.BuildInformationProtectionNavCommand());
            nonExecCommands.Add(builder.BuildIpSecurityProfilesNavCommand());
            nonExecCommands.Add(builder.BuildLabelsNavCommand());
            nonExecCommands.Add(builder.BuildMicrosoftGraphSecurityRunHuntingQueryNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildProviderTenantSettingsNavCommand());
            nonExecCommands.Add(builder.BuildRulesNavCommand());
            nonExecCommands.Add(builder.BuildSecureScoreControlProfilesNavCommand());
            nonExecCommands.Add(builder.BuildSecureScoresNavCommand());
            nonExecCommands.Add(builder.BuildSecurityActionsNavCommand());
            nonExecCommands.Add(builder.BuildSubjectRightsRequestsNavCommand());
            nonExecCommands.Add(builder.BuildThreatIntelligenceNavCommand());
            nonExecCommands.Add(builder.BuildThreatSubmissionNavCommand());
            nonExecCommands.Add(builder.BuildTiIndicatorsNavCommand());
            nonExecCommands.Add(builder.BuildTriggersNavCommand());
            nonExecCommands.Add(builder.BuildTriggerTypesNavCommand());
            nonExecCommands.Add(builder.BuildUserSecurityProfilesNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of servicePrincipal entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildServicePrincipalsNavCommand()
        {
            var command = new Command("service-principals");
            command.Description = "Provides operations to manage the collection of servicePrincipal entities.";
            var builder = new ServicePrincipalsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            nonExecCommands.Add(builder.BuildGetByIdsNavCommand());
            nonExecCommands.Add(builder.BuildGetUserOwnedObjectsNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildValidatePropertiesNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of servicePrincipal entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildServicePrincipalsWithAppIdRbCommand()
        {
            var command = new Command("service-principals-with-app-id");
            command.Description = "Provides operations to manage the collection of servicePrincipal entities.";
            var builder = new ServicePrincipalsWithAppIdRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of directorySetting entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSettingsNavCommand()
        {
            var command = new Command("settings");
            command.Description = "Provides operations to manage the collection of directorySetting entities.";
            var builder = new SettingsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of sharedDriveItem entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSharesNavCommand()
        {
            var command = new Command("shares");
            command.Description = "Provides operations to manage the collection of sharedDriveItem entities.";
            var builder = new SharesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of site entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSitesNavCommand()
        {
            var command = new Command("sites");
            command.Description = "Provides operations to manage the collection of site entities.";
            var builder = new SitesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAddNavCommand());
            nonExecCommands.Add(builder.BuildCountNavCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            nonExecCommands.Add(builder.BuildGetAllSitesNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildRemoveNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the solutionsRoot singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSolutionsNavCommand()
        {
            var command = new Command("solutions");
            command.Description = "Provides operations to manage the solutionsRoot singleton.";
            var builder = new SolutionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildBookingBusinessesNavCommand());
            nonExecCommands.Add(builder.BuildBookingCurrenciesNavCommand());
            nonExecCommands.Add(builder.BuildBusinessScenariosNavCommand());
            nonExecCommands.Add(builder.BuildBusinessScenariosWithUniqueNameRbCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildVirtualEventsNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of subscribedSku entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSubscribedSkusNavCommand()
        {
            var command = new Command("subscribed-skus");
            command.Description = "Provides operations to manage the collection of subscribedSku entities.";
            var builder = new SubscribedSkusRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of subscription entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSubscriptionsNavCommand()
        {
            var command = new Command("subscriptions");
            command.Description = "Provides operations to manage the collection of subscription entities.";
            var builder = new SubscriptionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of team entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTeamsNavCommand()
        {
            var command = new Command("teams");
            command.Description = "Provides operations to manage the collection of team entities.";
            var builder = new TeamsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAllMessagesNavCommand());
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildGetAllMessagesNavCommand());
            nonExecCommands.Add(builder.BuildGetOpenShiftsNavCommand());
            nonExecCommands.Add(builder.BuildGetShiftsNavCommand());
            nonExecCommands.Add(builder.BuildGetTimesOffNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of teamsTemplate entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTeamsTemplatesNavCommand()
        {
            var command = new Command("teams-templates");
            command.Description = "Provides operations to manage the collection of teamsTemplate entities.";
            var builder = new TeamsTemplatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of teamTemplateDefinition entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTeamTemplateDefinitionNavCommand()
        {
            var command = new Command("team-template-definition");
            command.Description = "Provides operations to manage the collection of teamTemplateDefinition entities.";
            var builder = new TeamTemplateDefinitionRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the teamwork singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTeamworkNavCommand()
        {
            var command = new Command("teamwork");
            command.Description = "Provides operations to manage the teamwork singleton.";
            var builder = new TeamworkRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildDeletedChatsNavCommand());
            nonExecCommands.Add(builder.BuildDeletedTeamsNavCommand());
            nonExecCommands.Add(builder.BuildDevicesNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildSendActivityNotificationToRecipientsNavCommand());
            nonExecCommands.Add(builder.BuildTeamsAppSettingsNavCommand());
            nonExecCommands.Add(builder.BuildTeamTemplatesNavCommand());
            nonExecCommands.Add(builder.BuildWorkforceIntegrationsNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the tenantRelationship singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTenantRelationshipsNavCommand()
        {
            var command = new Command("tenant-relationships");
            command.Description = "Provides operations to manage the tenantRelationship singleton.";
            var builder = new TenantRelationshipsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildDelegatedAdminCustomersNavCommand());
            nonExecCommands.Add(builder.BuildDelegatedAdminRelationshipsNavCommand());
            nonExecCommands.Add(builder.BuildFindTenantInformationByDomainNameWithDomainNameRbCommand());
            nonExecCommands.Add(builder.BuildFindTenantInformationByTenantIdWithTenantIdRbCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildManagedTenantsNavCommand());
            nonExecCommands.Add(builder.BuildMultiTenantOrganizationNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the store singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTermStoreNavCommand()
        {
            var command = new Command("term-store");
            command.Description = "Provides operations to manage the store singleton.";
            var builder = new TermStoreRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildGroupsNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildSetsNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the threatSubmissionRoot singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildThreatSubmissionNavCommand()
        {
            var command = new Command("threat-submission");
            command.Description = "Provides operations to manage the threatSubmissionRoot singleton.";
            var builder = new ThreatSubmissionRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildEmailThreatsNavCommand());
            nonExecCommands.Add(builder.BuildEmailThreatSubmissionPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildFileThreatsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildUrlThreatsNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the trustFramework singleton.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTrustFrameworkNavCommand()
        {
            var command = new Command("trust-framework");
            command.Description = "Provides operations to manage the trustFramework singleton.";
            var builder = new TrustFrameworkRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildKeySetsNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildPoliciesNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the collection of user entities.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUsersNavCommand()
        {
            var command = new Command("users");
            command.AddAlias("me");
            command.Description = "Provides operations to manage the collection of user entities.";
            var builder = new UsersRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDeltaNavCommand());
            nonExecCommands.Add(builder.BuildGetByIdsNavCommand());
            nonExecCommands.Add(builder.BuildGetManagedAppBlockedUsersNavCommand());
            nonExecCommands.Add(builder.BuildGetUserOwnedObjectsNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildValidatePasswordNavCommand());
            nonExecCommands.Add(builder.BuildValidatePropertiesNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="GraphClient"/> and sets the default values.
        /// </summary>
        public GraphClient() : base("{+baseurl}", new Dictionary<string, object>())
        {
        }
    }
}
