// <auto-generated/>
#pragma warning disable CS0618
using ApiSdk.Models.ODataErrors;
using ApiSdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.Admin.Exchange.Mailboxes.Item.Folders.Item.ChildFolders.Item.Items.Item
{
    /// <summary>
    /// Provides operations to manage the items property of the microsoft.graph.mailboxFolder entity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MailboxItemItemRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// The collection of items in this folder.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        [Obsolete("Private preview for Import Export APIs as of 2021-08/PrivatePreview:importExport")]
        public Command BuildGetCommand()
        {
            var command = new Command("get");
            command.Description = "The collection of items in this folder.";
            var mailboxIdOption = new Option<string>("--mailbox-id", description: "The unique identifier of mailbox") {
            };
            mailboxIdOption.IsRequired = true;
            command.AddOption(mailboxIdOption);
            var mailboxFolderIdOption = new Option<string>("--mailbox-folder-id", description: "The unique identifier of mailboxFolder") {
            };
            mailboxFolderIdOption.IsRequired = true;
            command.AddOption(mailboxFolderIdOption);
            var mailboxFolderId1Option = new Option<string>("--mailbox-folder-id1", description: "The unique identifier of mailboxFolder") {
            };
            mailboxFolderId1Option.IsRequired = true;
            command.AddOption(mailboxFolderId1Option);
            var mailboxItemIdOption = new Option<string>("--mailbox-item-id", description: "The unique identifier of mailboxItem") {
            };
            mailboxItemIdOption.IsRequired = true;
            command.AddOption(mailboxItemIdOption);
            var selectOption = new Option<string[]>("--select", description: "Select properties to be returned") {
                Arity = ArgumentArity.ZeroOrMore
            };
            selectOption.IsRequired = false;
            command.AddOption(selectOption);
            var expandOption = new Option<string[]>("--expand", description: "Expand related entities") {
                Arity = ArgumentArity.ZeroOrMore
            };
            expandOption.IsRequired = false;
            command.AddOption(expandOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var mailboxId = invocationContext.ParseResult.GetValueForOption(mailboxIdOption);
                var mailboxFolderId = invocationContext.ParseResult.GetValueForOption(mailboxFolderIdOption);
                var mailboxFolderId1 = invocationContext.ParseResult.GetValueForOption(mailboxFolderId1Option);
                var mailboxItemId = invocationContext.ParseResult.GetValueForOption(mailboxItemIdOption);
                var select = invocationContext.ParseResult.GetValueForOption(selectOption);
                var expand = invocationContext.ParseResult.GetValueForOption(expandOption);
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                    q.QueryParameters.Select = select;
                    q.QueryParameters.Expand = expand;
                });
                if (mailboxId is not null) requestInfo.PathParameters.Add("mailbox%2Did", mailboxId);
                if (mailboxFolderId is not null) requestInfo.PathParameters.Add("mailboxFolder%2Did", mailboxFolderId);
                if (mailboxFolderId1 is not null) requestInfo.PathParameters.Add("mailboxFolder%2Did1", mailboxFolderId1);
                if (mailboxItemId is not null) requestInfo.PathParameters.Add("mailboxItem%2Did", mailboxItemId);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Admin.Exchange.Mailboxes.Item.Folders.Item.ChildFolders.Item.Items.Item.MailboxItemItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public MailboxItemItemRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/admin/exchange/mailboxes/{mailbox%2Did}/folders/{mailboxFolder%2Did}/childFolders/{mailboxFolder%2Did1}/items/{mailboxItem%2Did}{?%24expand,%24select}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Admin.Exchange.Mailboxes.Item.Folders.Item.ChildFolders.Item.Items.Item.MailboxItemItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public MailboxItemItemRequestBuilder(string rawUrl) : base("{+baseurl}/admin/exchange/mailboxes/{mailbox%2Did}/folders/{mailboxFolder%2Did}/childFolders/{mailboxFolder%2Did1}/items/{mailboxItem%2Did}{?%24expand,%24select}", rawUrl)
        {
        }
        /// <summary>
        /// The collection of items in this folder.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("Private preview for Import Export APIs as of 2021-08/PrivatePreview:importExport")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.Admin.Exchange.Mailboxes.Item.Folders.Item.ChildFolders.Item.Items.Item.MailboxItemItemRequestBuilder.MailboxItemItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.Admin.Exchange.Mailboxes.Item.Folders.Item.ChildFolders.Item.Items.Item.MailboxItemItemRequestBuilder.MailboxItemItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// The collection of items in this folder.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MailboxItemItemRequestBuilderGetQueryParameters 
        {
            /// <summary>Expand related entities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("%24expand")]
            public string[] Expand { get; set; }
#endif
            /// <summary>Select properties to be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24select")]
            public string[]? Select { get; set; }
#nullable restore
#else
            [QueryParameter("%24select")]
            public string[] Select { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
