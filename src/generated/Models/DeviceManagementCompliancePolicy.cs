// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Device Management Compliance Policy
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DeviceManagementCompliancePolicy : global::ApiSdk.Models.Entity, IParsable
    {
        /// <summary>Policy assignments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.DeviceManagementConfigurationPolicyAssignment>? Assignments { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.DeviceManagementConfigurationPolicyAssignment> Assignments { get; set; }
#endif
        /// <summary>Policy creation date and time. This property is read-only.</summary>
        public DateTimeOffset? CreatedDateTime { get; private set; }
        /// <summary>Policy creation source</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreationSource { get; set; }
#nullable restore
#else
        public string CreationSource { get; set; }
#endif
        /// <summary>Policy description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Policy assignment status. This property is read-only.</summary>
        public bool? IsAssigned { get; private set; }
        /// <summary>Policy last modification date and time. This property is read-only.</summary>
        public DateTimeOffset? LastModifiedDateTime { get; private set; }
        /// <summary>Policy name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Supported platform types.</summary>
        public global::ApiSdk.Models.DeviceManagementConfigurationPlatforms? Platforms { get; set; }
        /// <summary>List of Scope Tags for this Entity instance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RoleScopeTagIds { get; set; }
#nullable restore
#else
        public List<string> RoleScopeTagIds { get; set; }
#endif
        /// <summary>The list of scheduled action for this rule</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.DeviceManagementComplianceScheduledActionForRule>? ScheduledActionsForRule { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.DeviceManagementComplianceScheduledActionForRule> ScheduledActionsForRule { get; set; }
#endif
        /// <summary>Number of settings. This property is read-only.</summary>
        public int? SettingCount { get; private set; }
        /// <summary>Policy settings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.DeviceManagementConfigurationSetting>? Settings { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.DeviceManagementConfigurationSetting> Settings { get; set; }
#endif
        /// <summary>Describes which technology this setting can be deployed with</summary>
        public global::ApiSdk.Models.DeviceManagementConfigurationTechnologies? Technologies { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.DeviceManagementCompliancePolicy"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.DeviceManagementCompliancePolicy CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.DeviceManagementCompliancePolicy();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "assignments", n => { Assignments = n.GetCollectionOfObjectValues<global::ApiSdk.Models.DeviceManagementConfigurationPolicyAssignment>(global::ApiSdk.Models.DeviceManagementConfigurationPolicyAssignment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "creationSource", n => { CreationSource = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "isAssigned", n => { IsAssigned = n.GetBoolValue(); } },
                { "lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "platforms", n => { Platforms = n.GetEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationPlatforms>(); } },
                { "roleScopeTagIds", n => { RoleScopeTagIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "scheduledActionsForRule", n => { ScheduledActionsForRule = n.GetCollectionOfObjectValues<global::ApiSdk.Models.DeviceManagementComplianceScheduledActionForRule>(global::ApiSdk.Models.DeviceManagementComplianceScheduledActionForRule.CreateFromDiscriminatorValue)?.AsList(); } },
                { "settingCount", n => { SettingCount = n.GetIntValue(); } },
                { "settings", n => { Settings = n.GetCollectionOfObjectValues<global::ApiSdk.Models.DeviceManagementConfigurationSetting>(global::ApiSdk.Models.DeviceManagementConfigurationSetting.CreateFromDiscriminatorValue)?.AsList(); } },
                { "technologies", n => { Technologies = n.GetEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationTechnologies>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.DeviceManagementConfigurationPolicyAssignment>("assignments", Assignments);
            writer.WriteStringValue("creationSource", CreationSource);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationPlatforms>("platforms", Platforms);
            writer.WriteCollectionOfPrimitiveValues<string>("roleScopeTagIds", RoleScopeTagIds);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.DeviceManagementComplianceScheduledActionForRule>("scheduledActionsForRule", ScheduledActionsForRule);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.DeviceManagementConfigurationSetting>("settings", Settings);
            writer.WriteEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationTechnologies>("technologies", Technologies);
        }
    }
}
#pragma warning restore CS0618
