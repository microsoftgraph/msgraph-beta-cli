// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    #pragma warning disable CS1591
    public class PermissionsCreepIndexDistribution : Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The authorizationSystem property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ApiSdk.Models.AuthorizationSystem? AuthorizationSystem { get; set; }
#nullable restore
#else
        public ApiSdk.Models.AuthorizationSystem AuthorizationSystem { get; set; }
#endif
        /// <summary>Defines when the PCI distribution was created.</summary>
        public DateTimeOffset? CreatedDateTime { get; set; }
        /// <summary>The highRiskProfile property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RiskProfile? HighRiskProfile { get; set; }
#nullable restore
#else
        public RiskProfile HighRiskProfile { get; set; }
#endif
        /// <summary>The lowRiskProfile property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RiskProfile? LowRiskProfile { get; set; }
#nullable restore
#else
        public RiskProfile LowRiskProfile { get; set; }
#endif
        /// <summary>The mediumRiskProfile property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RiskProfile? MediumRiskProfile { get; set; }
#nullable restore
#else
        public RiskProfile MediumRiskProfile { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PermissionsCreepIndexDistribution"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new PermissionsCreepIndexDistribution CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PermissionsCreepIndexDistribution();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "authorizationSystem", n => { AuthorizationSystem = n.GetObjectValue<ApiSdk.Models.AuthorizationSystem>(ApiSdk.Models.AuthorizationSystem.CreateFromDiscriminatorValue); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "highRiskProfile", n => { HighRiskProfile = n.GetObjectValue<RiskProfile>(RiskProfile.CreateFromDiscriminatorValue); } },
                { "lowRiskProfile", n => { LowRiskProfile = n.GetObjectValue<RiskProfile>(RiskProfile.CreateFromDiscriminatorValue); } },
                { "mediumRiskProfile", n => { MediumRiskProfile = n.GetObjectValue<RiskProfile>(RiskProfile.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<ApiSdk.Models.AuthorizationSystem>("authorizationSystem", AuthorizationSystem);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteObjectValue<RiskProfile>("highRiskProfile", HighRiskProfile);
            writer.WriteObjectValue<RiskProfile>("lowRiskProfile", LowRiskProfile);
            writer.WriteObjectValue<RiskProfile>("mediumRiskProfile", MediumRiskProfile);
        }
    }
}
