// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models.WindowsUpdates
{
    #pragma warning disable CS1591
    public class QualityUpdateCveSeverityInformation : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The exploitedCves property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CveInformation>? ExploitedCves { get; set; }
#nullable restore
#else
        public List<CveInformation> ExploitedCves { get; set; }
#endif
        /// <summary>Highest base score that occurs of any CVE addressed by the quality update. Read-only.</summary>
        public double? MaxBaseScore { get; set; }
        /// <summary>The maxSeverity property</summary>
        public CveSeverityLevel? MaxSeverity { get; set; }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType { get; set; }
#nullable restore
#else
        public string OdataType { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="QualityUpdateCveSeverityInformation"/> and sets the default values.
        /// </summary>
        public QualityUpdateCveSeverityInformation()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="QualityUpdateCveSeverityInformation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static QualityUpdateCveSeverityInformation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new QualityUpdateCveSeverityInformation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "exploitedCves", n => { ExploitedCves = n.GetCollectionOfObjectValues<CveInformation>(CveInformation.CreateFromDiscriminatorValue)?.ToList(); } },
                { "maxBaseScore", n => { MaxBaseScore = n.GetDoubleValue(); } },
                { "maxSeverity", n => { MaxSeverity = n.GetEnumValue<CveSeverityLevel>(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<CveInformation>("exploitedCves", ExploitedCves);
            writer.WriteDoubleValue("maxBaseScore", MaxBaseScore);
            writer.WriteEnumValue<CveSeverityLevel>("maxSeverity", MaxSeverity);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
