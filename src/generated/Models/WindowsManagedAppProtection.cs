// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Policy used to configure detailed management settings targeted to specific security groups and for a specified set of apps on a Windows device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WindowsManagedAppProtection : global::ApiSdk.Models.ManagedAppPolicy, IParsable
    {
        /// <summary>Data can be transferred from/to these classes of apps</summary>
        public global::ApiSdk.Models.WindowsManagedAppDataTransferLevel? AllowedInboundDataTransferSources { get; set; }
        /// <summary>Represents the level to which the device&apos;s clipboard may be shared between apps</summary>
        public global::ApiSdk.Models.WindowsManagedAppClipboardSharingLevel? AllowedOutboundClipboardSharingLevel { get; set; }
        /// <summary>Data can be transferred from/to these classes of apps</summary>
        public global::ApiSdk.Models.WindowsManagedAppDataTransferLevel? AllowedOutboundDataTransferDestinations { get; set; }
        /// <summary>If set, it will specify what action to take in the case where the user is unable to checkin because their authentication token is invalid. This happens when the user is deleted or disabled in AAD. Some possible values are block or wipe. If this property is not set, no action will be taken. Possible values are: block, wipe, warn, blockWhenSettingIsSupported.</summary>
        public global::ApiSdk.Models.ManagedAppRemediationAction? AppActionIfUnableToAuthenticateUser { get; set; }
        /// <summary>List of apps to which the policy is deployed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.ManagedMobileApp>? Apps { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.ManagedMobileApp> Apps { get; set; }
#endif
        /// <summary>Navigation property to list of inclusion and exclusion groups to which the policy is deployed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.TargetedManagedAppPolicyAssignment>? Assignments { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.TargetedManagedAppPolicyAssignment> Assignments { get; set; }
#endif
        /// <summary>Indicates the total number of applications for which the current policy is deployed.</summary>
        public int? DeployedAppCount { get; set; }
        /// <summary>Navigation property to deployment summary of the configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.ManagedAppPolicyDeploymentSummary? DeploymentSummary { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.ManagedAppPolicyDeploymentSummary DeploymentSummary { get; set; }
#endif
        /// <summary>When TRUE, indicates that the policy is deployed to some inclusion groups. When FALSE, indicates that the policy is not deployed to any inclusion groups. Default value is FALSE.</summary>
        public bool? IsAssigned { get; set; }
        /// <summary>The maxium threat level allowed for an app to be compliant.</summary>
        public global::ApiSdk.Models.ManagedAppDeviceThreatLevel? MaximumAllowedDeviceThreatLevel { get; set; }
        /// <summary>Versions bigger than the specified version will block the managed app from accessing company data. For example: &apos;8.1.0&apos; or &apos;13.1.1&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaximumRequiredOsVersion { get; set; }
#nullable restore
#else
        public string MaximumRequiredOsVersion { get; set; }
#endif
        /// <summary>Versions bigger than the specified version will result in warning message on the managed app from accessing company data. For example: &apos;8.1.0&apos; or &apos;13.1.1&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaximumWarningOsVersion { get; set; }
#nullable restore
#else
        public string MaximumWarningOsVersion { get; set; }
#endif
        /// <summary>Versions bigger than the specified version will wipe the managed app and the associated company data. For example: &apos;8.1.0&apos; or &apos;13.1.1&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaximumWipeOsVersion { get; set; }
#nullable restore
#else
        public string MaximumWipeOsVersion { get; set; }
#endif
        /// <summary>Versions less than the specified version will block the managed app from accessing company data. For example: &apos;8.1.0&apos; or &apos;13.1.1&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MinimumRequiredAppVersion { get; set; }
#nullable restore
#else
        public string MinimumRequiredAppVersion { get; set; }
#endif
        /// <summary>Versions less than the specified version will block the managed app from accessing company data. For example: &apos;8.1.0&apos; or &apos;13.1.1&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MinimumRequiredOsVersion { get; set; }
#nullable restore
#else
        public string MinimumRequiredOsVersion { get; set; }
#endif
        /// <summary>Versions less than the specified version will block the managed app from accessing company data. For example: &apos;8.1.0&apos; or &apos;13.1.1&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MinimumRequiredSdkVersion { get; set; }
#nullable restore
#else
        public string MinimumRequiredSdkVersion { get; set; }
#endif
        /// <summary>Versions less than the specified version will result in warning message on the managed app from accessing company data. For example: &apos;8.1.0&apos; or &apos;13.1.1&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MinimumWarningAppVersion { get; set; }
#nullable restore
#else
        public string MinimumWarningAppVersion { get; set; }
#endif
        /// <summary>Versions less than the specified version will result in warning message on the managed app from accessing company data. For example: &apos;8.1.0&apos; or &apos;13.1.1&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MinimumWarningOsVersion { get; set; }
#nullable restore
#else
        public string MinimumWarningOsVersion { get; set; }
#endif
        /// <summary>Versions less than the specified version will wipe the managed app and the associated company data. For example: &apos;8.1.0&apos; or &apos;13.1.1&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MinimumWipeAppVersion { get; set; }
#nullable restore
#else
        public string MinimumWipeAppVersion { get; set; }
#endif
        /// <summary>Versions less than the specified version will wipe the managed app and the associated company data. For example: &apos;8.1.0&apos; or &apos;13.1.1&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MinimumWipeOsVersion { get; set; }
#nullable restore
#else
        public string MinimumWipeOsVersion { get; set; }
#endif
        /// <summary>Versions less than the specified version will wipe the managed app and the associated company data. For example: &apos;8.1.0&apos; or &apos;13.1.1&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MinimumWipeSdkVersion { get; set; }
#nullable restore
#else
        public string MinimumWipeSdkVersion { get; set; }
#endif
        /// <summary>An admin initiated action to be applied on a managed app.</summary>
        public global::ApiSdk.Models.ManagedAppRemediationAction? MobileThreatDefenseRemediationAction { get; set; }
        /// <summary>The period after which access is checked when the device is not connected to the internet. For example, PT5M indicates that the interval is 5 minutes in duration. A timespan value of PT0S indicates that access will be blocked immediately when the device is not connected to the internet.</summary>
        public TimeSpan? PeriodOfflineBeforeAccessCheck { get; set; }
        /// <summary>The amount of time an app is allowed to remain disconnected from the internet before all managed data it is wiped. For example, P5D indicates that the interval is 5 days in duration. A timespan value of PT0S indicates that managed data will never be wiped when the device is not connected to the internet.</summary>
        public TimeSpan? PeriodOfflineBeforeWipeIsEnforced { get; set; }
        /// <summary>When TRUE, indicates that printing is blocked from managed apps. When FALSE, indicates that printing is allowed from managed apps. Default value is FALSE.</summary>
        public bool? PrintBlocked { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.WindowsManagedAppProtection"/> and sets the default values.
        /// </summary>
        public WindowsManagedAppProtection() : base()
        {
            OdataType = "#microsoft.graph.windowsManagedAppProtection";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.WindowsManagedAppProtection"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.WindowsManagedAppProtection CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.WindowsManagedAppProtection();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "allowedInboundDataTransferSources", n => { AllowedInboundDataTransferSources = n.GetEnumValue<global::ApiSdk.Models.WindowsManagedAppDataTransferLevel>(); } },
                { "allowedOutboundClipboardSharingLevel", n => { AllowedOutboundClipboardSharingLevel = n.GetEnumValue<global::ApiSdk.Models.WindowsManagedAppClipboardSharingLevel>(); } },
                { "allowedOutboundDataTransferDestinations", n => { AllowedOutboundDataTransferDestinations = n.GetEnumValue<global::ApiSdk.Models.WindowsManagedAppDataTransferLevel>(); } },
                { "appActionIfUnableToAuthenticateUser", n => { AppActionIfUnableToAuthenticateUser = n.GetEnumValue<global::ApiSdk.Models.ManagedAppRemediationAction>(); } },
                { "apps", n => { Apps = n.GetCollectionOfObjectValues<global::ApiSdk.Models.ManagedMobileApp>(global::ApiSdk.Models.ManagedMobileApp.CreateFromDiscriminatorValue)?.AsList(); } },
                { "assignments", n => { Assignments = n.GetCollectionOfObjectValues<global::ApiSdk.Models.TargetedManagedAppPolicyAssignment>(global::ApiSdk.Models.TargetedManagedAppPolicyAssignment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deployedAppCount", n => { DeployedAppCount = n.GetIntValue(); } },
                { "deploymentSummary", n => { DeploymentSummary = n.GetObjectValue<global::ApiSdk.Models.ManagedAppPolicyDeploymentSummary>(global::ApiSdk.Models.ManagedAppPolicyDeploymentSummary.CreateFromDiscriminatorValue); } },
                { "isAssigned", n => { IsAssigned = n.GetBoolValue(); } },
                { "maximumAllowedDeviceThreatLevel", n => { MaximumAllowedDeviceThreatLevel = n.GetEnumValue<global::ApiSdk.Models.ManagedAppDeviceThreatLevel>(); } },
                { "maximumRequiredOsVersion", n => { MaximumRequiredOsVersion = n.GetStringValue(); } },
                { "maximumWarningOsVersion", n => { MaximumWarningOsVersion = n.GetStringValue(); } },
                { "maximumWipeOsVersion", n => { MaximumWipeOsVersion = n.GetStringValue(); } },
                { "minimumRequiredAppVersion", n => { MinimumRequiredAppVersion = n.GetStringValue(); } },
                { "minimumRequiredOsVersion", n => { MinimumRequiredOsVersion = n.GetStringValue(); } },
                { "minimumRequiredSdkVersion", n => { MinimumRequiredSdkVersion = n.GetStringValue(); } },
                { "minimumWarningAppVersion", n => { MinimumWarningAppVersion = n.GetStringValue(); } },
                { "minimumWarningOsVersion", n => { MinimumWarningOsVersion = n.GetStringValue(); } },
                { "minimumWipeAppVersion", n => { MinimumWipeAppVersion = n.GetStringValue(); } },
                { "minimumWipeOsVersion", n => { MinimumWipeOsVersion = n.GetStringValue(); } },
                { "minimumWipeSdkVersion", n => { MinimumWipeSdkVersion = n.GetStringValue(); } },
                { "mobileThreatDefenseRemediationAction", n => { MobileThreatDefenseRemediationAction = n.GetEnumValue<global::ApiSdk.Models.ManagedAppRemediationAction>(); } },
                { "periodOfflineBeforeAccessCheck", n => { PeriodOfflineBeforeAccessCheck = n.GetTimeSpanValue(); } },
                { "periodOfflineBeforeWipeIsEnforced", n => { PeriodOfflineBeforeWipeIsEnforced = n.GetTimeSpanValue(); } },
                { "printBlocked", n => { PrintBlocked = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::ApiSdk.Models.WindowsManagedAppDataTransferLevel>("allowedInboundDataTransferSources", AllowedInboundDataTransferSources);
            writer.WriteEnumValue<global::ApiSdk.Models.WindowsManagedAppClipboardSharingLevel>("allowedOutboundClipboardSharingLevel", AllowedOutboundClipboardSharingLevel);
            writer.WriteEnumValue<global::ApiSdk.Models.WindowsManagedAppDataTransferLevel>("allowedOutboundDataTransferDestinations", AllowedOutboundDataTransferDestinations);
            writer.WriteEnumValue<global::ApiSdk.Models.ManagedAppRemediationAction>("appActionIfUnableToAuthenticateUser", AppActionIfUnableToAuthenticateUser);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.ManagedMobileApp>("apps", Apps);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.TargetedManagedAppPolicyAssignment>("assignments", Assignments);
            writer.WriteIntValue("deployedAppCount", DeployedAppCount);
            writer.WriteObjectValue<global::ApiSdk.Models.ManagedAppPolicyDeploymentSummary>("deploymentSummary", DeploymentSummary);
            writer.WriteBoolValue("isAssigned", IsAssigned);
            writer.WriteEnumValue<global::ApiSdk.Models.ManagedAppDeviceThreatLevel>("maximumAllowedDeviceThreatLevel", MaximumAllowedDeviceThreatLevel);
            writer.WriteStringValue("maximumRequiredOsVersion", MaximumRequiredOsVersion);
            writer.WriteStringValue("maximumWarningOsVersion", MaximumWarningOsVersion);
            writer.WriteStringValue("maximumWipeOsVersion", MaximumWipeOsVersion);
            writer.WriteStringValue("minimumRequiredAppVersion", MinimumRequiredAppVersion);
            writer.WriteStringValue("minimumRequiredOsVersion", MinimumRequiredOsVersion);
            writer.WriteStringValue("minimumRequiredSdkVersion", MinimumRequiredSdkVersion);
            writer.WriteStringValue("minimumWarningAppVersion", MinimumWarningAppVersion);
            writer.WriteStringValue("minimumWarningOsVersion", MinimumWarningOsVersion);
            writer.WriteStringValue("minimumWipeAppVersion", MinimumWipeAppVersion);
            writer.WriteStringValue("minimumWipeOsVersion", MinimumWipeOsVersion);
            writer.WriteStringValue("minimumWipeSdkVersion", MinimumWipeSdkVersion);
            writer.WriteEnumValue<global::ApiSdk.Models.ManagedAppRemediationAction>("mobileThreatDefenseRemediationAction", MobileThreatDefenseRemediationAction);
            writer.WriteTimeSpanValue("periodOfflineBeforeAccessCheck", PeriodOfflineBeforeAccessCheck);
            writer.WriteTimeSpanValue("periodOfflineBeforeWipeIsEnforced", PeriodOfflineBeforeWipeIsEnforced);
            writer.WriteBoolValue("printBlocked", PrintBlocked);
        }
    }
}
#pragma warning restore CS0618
