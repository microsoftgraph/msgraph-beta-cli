// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Device Management Configuration Policy Template
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DeviceManagementConfigurationPolicyTemplate : global::ApiSdk.Models.Entity, IParsable
    {
        /// <summary>Allow unmanaged setting templates</summary>
        public bool? AllowUnmanagedSettings { get; set; }
        /// <summary>Template base identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BaseId { get; set; }
#nullable restore
#else
        public string BaseId { get; set; }
#endif
        /// <summary>Template description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Template display name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Description of template version</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayVersion { get; set; }
#nullable restore
#else
        public string DisplayVersion { get; set; }
#endif
        /// <summary>Describes current lifecycle state of a template</summary>
        public global::ApiSdk.Models.DeviceManagementTemplateLifecycleState? LifecycleState { get; set; }
        /// <summary>Supported platform types.</summary>
        public global::ApiSdk.Models.DeviceManagementConfigurationPlatforms? Platforms { get; set; }
        /// <summary>Number of setting templates. Valid values 0 to 2147483647. This property is read-only.</summary>
        public int? SettingTemplateCount { get; private set; }
        /// <summary>Setting templates</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.DeviceManagementConfigurationSettingTemplate>? SettingTemplates { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.DeviceManagementConfigurationSettingTemplate> SettingTemplates { get; set; }
#endif
        /// <summary>Describes which technology this setting can be deployed with</summary>
        public global::ApiSdk.Models.DeviceManagementConfigurationTechnologies? Technologies { get; set; }
        /// <summary>Describes the TemplateFamily for the Template entity</summary>
        public global::ApiSdk.Models.DeviceManagementConfigurationTemplateFamily? TemplateFamily { get; set; }
        /// <summary>Template version. Valid values 1 to 2147483647. This property is read-only.</summary>
        public int? Version { get; private set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.DeviceManagementConfigurationPolicyTemplate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.DeviceManagementConfigurationPolicyTemplate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.DeviceManagementConfigurationPolicyTemplate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "allowUnmanagedSettings", n => { AllowUnmanagedSettings = n.GetBoolValue(); } },
                { "baseId", n => { BaseId = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "displayVersion", n => { DisplayVersion = n.GetStringValue(); } },
                { "lifecycleState", n => { LifecycleState = n.GetEnumValue<global::ApiSdk.Models.DeviceManagementTemplateLifecycleState>(); } },
                { "platforms", n => { Platforms = n.GetEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationPlatforms>(); } },
                { "settingTemplateCount", n => { SettingTemplateCount = n.GetIntValue(); } },
                { "settingTemplates", n => { SettingTemplates = n.GetCollectionOfObjectValues<global::ApiSdk.Models.DeviceManagementConfigurationSettingTemplate>(global::ApiSdk.Models.DeviceManagementConfigurationSettingTemplate.CreateFromDiscriminatorValue)?.AsList(); } },
                { "technologies", n => { Technologies = n.GetEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationTechnologies>(); } },
                { "templateFamily", n => { TemplateFamily = n.GetEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationTemplateFamily>(); } },
                { "version", n => { Version = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("allowUnmanagedSettings", AllowUnmanagedSettings);
            writer.WriteStringValue("baseId", BaseId);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("displayVersion", DisplayVersion);
            writer.WriteEnumValue<global::ApiSdk.Models.DeviceManagementTemplateLifecycleState>("lifecycleState", LifecycleState);
            writer.WriteEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationPlatforms>("platforms", Platforms);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.DeviceManagementConfigurationSettingTemplate>("settingTemplates", SettingTemplates);
            writer.WriteEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationTechnologies>("technologies", Technologies);
            writer.WriteEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationTemplateFamily>("templateFamily", TemplateFamily);
        }
    }
}
#pragma warning restore CS0618
