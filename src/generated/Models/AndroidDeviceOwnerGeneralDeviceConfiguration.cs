// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// This topic provides descriptions of the declared methods, properties and relationships exposed by the androidDeviceOwnerGeneralDeviceConfiguration resource.
    /// </summary>
    public class AndroidDeviceOwnerGeneralDeviceConfiguration : DeviceConfiguration, IParsable
    {
        /// <summary>Indicates whether or not adding or removing accounts is disabled.</summary>
        public bool? AccountsBlockModification { get; set; }
        /// <summary>Specifies the list of managed apps with app details and its associated delegated scope(s). This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AndroidDeviceOwnerDelegatedScopeAppSetting>? AndroidDeviceOwnerDelegatedScopeAppSettings { get; set; }
#nullable restore
#else
        public List<AndroidDeviceOwnerDelegatedScopeAppSetting> AndroidDeviceOwnerDelegatedScopeAppSettings { get; set; }
#endif
        /// <summary>Indicates whether or not the user is allowed to enable to unknown sources setting.</summary>
        public bool? AppsAllowInstallFromUnknownSources { get; set; }
        /// <summary>Indicates the value of the app auto update policy. Possible values are: notConfigured, userChoice, never, wiFiOnly, always.</summary>
        public AndroidDeviceOwnerAppAutoUpdatePolicyType? AppsAutoUpdatePolicy { get; set; }
        /// <summary>Indicates the permission policy for requests for runtime permissions if one is not defined for the app specifically. Possible values are: deviceDefault, prompt, autoGrant, autoDeny.</summary>
        public AndroidDeviceOwnerDefaultAppPermissionPolicyType? AppsDefaultPermissionPolicy { get; set; }
        /// <summary>Whether or not to recommend all apps skip any first-time-use hints they may have added.</summary>
        public bool? AppsRecommendSkippingFirstUseHints { get; set; }
        /// <summary>A list of managed apps that will have their data cleared during a global sign-out in AAD shared device mode. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AppListItem>? AzureAdSharedDeviceDataClearApps { get; set; }
#nullable restore
#else
        public List<AppListItem> AzureAdSharedDeviceDataClearApps { get; set; }
#endif
        /// <summary>Indicates whether or not to block a user from configuring bluetooth.</summary>
        public bool? BluetoothBlockConfiguration { get; set; }
        /// <summary>Indicates whether or not to block a user from sharing contacts via bluetooth.</summary>
        public bool? BluetoothBlockContactSharing { get; set; }
        /// <summary>Indicates whether or not to disable the use of the camera.</summary>
        public bool? CameraBlocked { get; set; }
        /// <summary>Indicates whether or not to block Wi-Fi tethering.</summary>
        public bool? CellularBlockWiFiTethering { get; set; }
        /// <summary>Indicates whether or not to block users from any certificate credential configuration.</summary>
        public bool? CertificateCredentialConfigurationDisabled { get; set; }
        /// <summary>Indicates whether or not text copied from one profile (personal or work) can be pasted in the other.</summary>
        public bool? CrossProfilePoliciesAllowCopyPaste { get; set; }
        /// <summary>Indicates whether data from one profile (personal or work) can be shared with apps in the other profile. Possible values are: notConfigured, crossProfileDataSharingBlocked, dataSharingFromWorkToPersonalBlocked, crossProfileDataSharingAllowed, unkownFutureValue.</summary>
        public AndroidDeviceOwnerCrossProfileDataSharing? CrossProfilePoliciesAllowDataSharing { get; set; }
        /// <summary>Indicates whether or not contacts stored in work profile are shown in personal profile contact searches/incoming calls.</summary>
        public bool? CrossProfilePoliciesShowWorkContactsInPersonalProfile { get; set; }
        /// <summary>Indicates whether or not to block a user from data roaming.</summary>
        public bool? DataRoamingBlocked { get; set; }
        /// <summary>Indicates whether or not to block the user from manually changing the date or time on the device</summary>
        public bool? DateTimeConfigurationBlocked { get; set; }
        /// <summary>Represents the customized detailed help text provided to users when they attempt to modify managed settings on their device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AndroidDeviceOwnerUserFacingMessage? DetailedHelpText { get; set; }
#nullable restore
#else
        public AndroidDeviceOwnerUserFacingMessage DetailedHelpText { get; set; }
#endif
        /// <summary>Indicates the location setting configuration for fully managed devices (COBO) and corporate owned devices with a work profile (COPE). Possible values are: notConfigured, disabled, unknownFutureValue.</summary>
        public AndroidDeviceOwnerLocationMode? DeviceLocationMode { get; set; }
        /// <summary>Represents the customized lock screen message provided to users when they attempt to modify managed settings on their device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AndroidDeviceOwnerUserFacingMessage? DeviceOwnerLockScreenMessage { get; set; }
#nullable restore
#else
        public AndroidDeviceOwnerUserFacingMessage DeviceOwnerLockScreenMessage { get; set; }
#endif
        /// <summary>Android Device Owner Enrollment Profile types.</summary>
        public AndroidDeviceOwnerEnrollmentProfileType? EnrollmentProfile { get; set; }
        /// <summary>Indicates whether or not the factory reset option in settings is disabled.</summary>
        public bool? FactoryResetBlocked { get; set; }
        /// <summary>List of Google account emails that will be required to authenticate after a device is factory reset before it can be set up.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? FactoryResetDeviceAdministratorEmails { get; set; }
#nullable restore
#else
        public List<string> FactoryResetDeviceAdministratorEmails { get; set; }
#endif
        /// <summary>Proxy is set up directly with host, port and excluded hosts.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AndroidDeviceOwnerGlobalProxy? GlobalProxy { get; set; }
#nullable restore
#else
        public AndroidDeviceOwnerGlobalProxy GlobalProxy { get; set; }
#endif
        /// <summary>Indicates whether or not google accounts will be blocked.</summary>
        public bool? GoogleAccountsBlocked { get; set; }
        /// <summary>IndicatesÂ whether a user can access the device&apos;s Settings app while in Kiosk Mode.</summary>
        public bool? KioskCustomizationDeviceSettingsBlocked { get; set; }
        /// <summary>Whether the power menu is shown when a user long presses the Power button of a device in Kiosk Mode.</summary>
        public bool? KioskCustomizationPowerButtonActionsBlocked { get; set; }
        /// <summary>Indicates whether system info and notifications are disabled in Kiosk Mode. Possible values are: notConfigured, notificationsAndSystemInfoEnabled, systemInfoOnly.</summary>
        public AndroidDeviceOwnerKioskCustomizationStatusBar? KioskCustomizationStatusBar { get; set; }
        /// <summary>Indicates whether system error dialogs for crashed or unresponsive apps are shown in Kiosk Mode.</summary>
        public bool? KioskCustomizationSystemErrorWarnings { get; set; }
        /// <summary>Indicates which navigation features are enabled in Kiosk Mode. Possible values are: notConfigured, navigationEnabled, homeButtonOnly.</summary>
        public AndroidDeviceOwnerKioskCustomizationSystemNavigation? KioskCustomizationSystemNavigation { get; set; }
        /// <summary>Whether or not to enable app ordering in Kiosk Mode.</summary>
        public bool? KioskModeAppOrderEnabled { get; set; }
        /// <summary>The ordering of items on Kiosk Mode Managed Home Screen. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AndroidDeviceOwnerKioskModeAppPositionItem>? KioskModeAppPositions { get; set; }
#nullable restore
#else
        public List<AndroidDeviceOwnerKioskModeAppPositionItem> KioskModeAppPositions { get; set; }
#endif
        /// <summary>A list of managed apps that will be shown when the device is in Kiosk Mode. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AppListItem>? KioskModeApps { get; set; }
#nullable restore
#else
        public List<AppListItem> KioskModeApps { get; set; }
#endif
        /// <summary>Whether or not to alphabetize applications within a folder in Kiosk Mode.</summary>
        public bool? KioskModeAppsInFolderOrderedByName { get; set; }
        /// <summary>Whether or not to allow a user to configure Bluetooth settings in Kiosk Mode.</summary>
        public bool? KioskModeBluetoothConfigurationEnabled { get; set; }
        /// <summary>Whether or not to allow a user to easy access to the debug menu in Kiosk Mode.</summary>
        public bool? KioskModeDebugMenuEasyAccessEnabled { get; set; }
        /// <summary>Exit code to allow a user to escape from Kiosk Mode when the device is in Kiosk Mode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KioskModeExitCode { get; set; }
#nullable restore
#else
        public string KioskModeExitCode { get; set; }
#endif
        /// <summary>Whether or not to allow a user to use the flashlight in Kiosk Mode.</summary>
        public bool? KioskModeFlashlightConfigurationEnabled { get; set; }
        /// <summary>Folder icon configuration for managed home screen in Kiosk Mode. Possible values are: notConfigured, darkSquare, darkCircle, lightSquare, lightCircle.</summary>
        public AndroidDeviceOwnerKioskModeFolderIcon? KioskModeFolderIcon { get; set; }
        /// <summary>Number of rows for Managed Home Screen grid with app ordering enabled in Kiosk Mode. Valid values 1 to 9999999</summary>
        public int? KioskModeGridHeight { get; set; }
        /// <summary>Number of columns for Managed Home Screen grid with app ordering enabled in Kiosk Mode. Valid values 1 to 9999999</summary>
        public int? KioskModeGridWidth { get; set; }
        /// <summary>Icon size configuration for managed home screen in Kiosk Mode. Possible values are: notConfigured, smallest, small, regular, large, largest.</summary>
        public AndroidDeviceOwnerKioskModeIconSize? KioskModeIconSize { get; set; }
        /// <summary>Whether or not to lock home screen to the end user in Kiosk Mode.</summary>
        public bool? KioskModeLockHomeScreen { get; set; }
        /// <summary>A list of managed folders for a device in Kiosk Mode. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AndroidDeviceOwnerKioskModeManagedFolder>? KioskModeManagedFolders { get; set; }
#nullable restore
#else
        public List<AndroidDeviceOwnerKioskModeManagedFolder> KioskModeManagedFolders { get; set; }
#endif
        /// <summary>Whether or not to automatically sign-out of MHS and Shared device mode applications after inactive for Managed Home Screen.</summary>
        public bool? KioskModeManagedHomeScreenAutoSignout { get; set; }
        /// <summary>Number of seconds to give user notice before automatically signing them out for Managed Home Screen. Valid values 0 to 9999999</summary>
        public int? KioskModeManagedHomeScreenInactiveSignOutDelayInSeconds { get; set; }
        /// <summary>Number of seconds device is inactive before automatically signing user out for Managed Home Screen. Valid values 0 to 9999999</summary>
        public int? KioskModeManagedHomeScreenInactiveSignOutNoticeInSeconds { get; set; }
        /// <summary>Complexity of PIN for sign-in session for Managed Home Screen. Possible values are: notConfigured, simple, complex.</summary>
        public ApiSdk.Models.KioskModeManagedHomeScreenPinComplexity? KioskModeManagedHomeScreenPinComplexity { get; set; }
        /// <summary>Whether or not require user to set a PIN for sign-in session for Managed Home Screen.</summary>
        public bool? KioskModeManagedHomeScreenPinRequired { get; set; }
        /// <summary>Whether or not required user to enter session PIN if screensaver has appeared for Managed Home Screen.</summary>
        public bool? KioskModeManagedHomeScreenPinRequiredToResume { get; set; }
        /// <summary>Custom URL background for sign-in screen for Managed Home Screen.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KioskModeManagedHomeScreenSignInBackground { get; set; }
#nullable restore
#else
        public string KioskModeManagedHomeScreenSignInBackground { get; set; }
#endif
        /// <summary>Custom URL branding logo for sign-in screen and session pin page for Managed Home Screen.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KioskModeManagedHomeScreenSignInBrandingLogo { get; set; }
#nullable restore
#else
        public string KioskModeManagedHomeScreenSignInBrandingLogo { get; set; }
#endif
        /// <summary>Whether or not show sign-in screen for Managed Home Screen.</summary>
        public bool? KioskModeManagedHomeScreenSignInEnabled { get; set; }
        /// <summary>Whether or not to display the Managed Settings entry point on the managed home screen in Kiosk Mode.</summary>
        public bool? KioskModeManagedSettingsEntryDisabled { get; set; }
        /// <summary>Whether or not to allow a user to change the media volume in Kiosk Mode.</summary>
        public bool? KioskModeMediaVolumeConfigurationEnabled { get; set; }
        /// <summary>Screen orientation configuration for managed home screen in Kiosk Mode. Possible values are: notConfigured, portrait, landscape, autoRotate.</summary>
        public AndroidDeviceOwnerKioskModeScreenOrientation? KioskModeScreenOrientation { get; set; }
        /// <summary>Whether or not to enable screen saver mode or not in Kiosk Mode.</summary>
        public bool? KioskModeScreenSaverConfigurationEnabled { get; set; }
        /// <summary>Whether or not the device screen should show the screen saver if audio/video is playing in Kiosk Mode.</summary>
        public bool? KioskModeScreenSaverDetectMediaDisabled { get; set; }
        /// <summary>The number of seconds that the device will display the screen saver for in Kiosk Mode. Valid values 0 to 9999999</summary>
        public int? KioskModeScreenSaverDisplayTimeInSeconds { get; set; }
        /// <summary>URL for an image that will be the device&apos;s screen saver in Kiosk Mode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KioskModeScreenSaverImageUrl { get; set; }
#nullable restore
#else
        public string KioskModeScreenSaverImageUrl { get; set; }
#endif
        /// <summary>The number of seconds the device needs to be inactive for before the screen saver is shown in Kiosk Mode. Valid values 1 to 9999999</summary>
        public int? KioskModeScreenSaverStartDelayInSeconds { get; set; }
        /// <summary>Whether or not to display application notification badges in Kiosk Mode.</summary>
        public bool? KioskModeShowAppNotificationBadge { get; set; }
        /// <summary>Whether or not to allow a user to access basic device information.</summary>
        public bool? KioskModeShowDeviceInfo { get; set; }
        /// <summary>Whether or not to use single app kiosk mode or multi-app kiosk mode. Possible values are: notConfigured, singleAppMode, multiAppMode.</summary>
        public KioskModeType? KioskModeUseManagedHomeScreenApp { get; set; }
        /// <summary>Whether or not to display a virtual home button when the device is in Kiosk Mode.</summary>
        public bool? KioskModeVirtualHomeButtonEnabled { get; set; }
        /// <summary>Indicates whether the virtual home button is a swipe up home button or a floating home button. Possible values are: notConfigured, swipeUp, floating.</summary>
        public AndroidDeviceOwnerVirtualHomeButtonType? KioskModeVirtualHomeButtonType { get; set; }
        /// <summary>URL to a publicly accessible image to use for the wallpaper when the device is in Kiosk Mode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KioskModeWallpaperUrl { get; set; }
#nullable restore
#else
        public string KioskModeWallpaperUrl { get; set; }
#endif
        /// <summary>The restricted set of WIFI SSIDs available for the user to configure in Kiosk Mode. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? KioskModeWifiAllowedSsids { get; set; }
#nullable restore
#else
        public List<string> KioskModeWifiAllowedSsids { get; set; }
#endif
        /// <summary>Whether or not to allow a user to configure Wi-Fi settings in Kiosk Mode.</summary>
        public bool? KioskModeWiFiConfigurationEnabled { get; set; }
        /// <summary>Indicates whether or not LocateDevice for devices with lost mode (COBO, COPE) is enabled.</summary>
        public bool? LocateDeviceLostModeEnabled { get; set; }
        /// <summary>Indicates whether or not LocateDevice for userless (COSU) devices is disabled.</summary>
        public bool? LocateDeviceUserlessDisabled { get; set; }
        /// <summary>Indicates whether or not to block unmuting the microphone on the device.</summary>
        public bool? MicrophoneForceMute { get; set; }
        /// <summary>Indicates whether or not to you want configure Microsoft Launcher.</summary>
        public bool? MicrosoftLauncherConfigurationEnabled { get; set; }
        /// <summary>Indicates whether or not the user can modify the wallpaper to personalize their device.</summary>
        public bool? MicrosoftLauncherCustomWallpaperAllowUserModification { get; set; }
        /// <summary>Indicates whether or not to configure the wallpaper on the targeted devices.</summary>
        public bool? MicrosoftLauncherCustomWallpaperEnabled { get; set; }
        /// <summary>Indicates the URL for the image file to use as the wallpaper on the targeted devices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MicrosoftLauncherCustomWallpaperImageUrl { get; set; }
#nullable restore
#else
        public string MicrosoftLauncherCustomWallpaperImageUrl { get; set; }
#endif
        /// <summary>Indicates whether or not the user can modify the device dock configuration on the device.</summary>
        public bool? MicrosoftLauncherDockPresenceAllowUserModification { get; set; }
        /// <summary>Indicates whether or not you want to configure the device dock. Possible values are: notConfigured, show, hide, disabled.</summary>
        public MicrosoftLauncherDockPresence? MicrosoftLauncherDockPresenceConfiguration { get; set; }
        /// <summary>Indicates whether or not the user can modify the launcher feed on the device.</summary>
        public bool? MicrosoftLauncherFeedAllowUserModification { get; set; }
        /// <summary>Indicates whether or not you want to enable the launcher feed on the device.</summary>
        public bool? MicrosoftLauncherFeedEnabled { get; set; }
        /// <summary>Indicates the search bar placement configuration on the device. Possible values are: notConfigured, top, bottom, hide.</summary>
        public MicrosoftLauncherSearchBarPlacement? MicrosoftLauncherSearchBarPlacementConfiguration { get; set; }
        /// <summary>Indicates whether or not the device will allow connecting to a temporary network connection at boot time.</summary>
        public bool? NetworkEscapeHatchAllowed { get; set; }
        /// <summary>Indicates whether or not to block NFC outgoing beam.</summary>
        public bool? NfcBlockOutgoingBeam { get; set; }
        /// <summary>Indicates whether or not the keyguard is disabled.</summary>
        public bool? PasswordBlockKeyguard { get; set; }
        /// <summary>List of device keyguard features to block. This collection can contain a maximum of 11 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AndroidKeyguardFeature?>? PasswordBlockKeyguardFeatures { get; set; }
#nullable restore
#else
        public List<AndroidKeyguardFeature?> PasswordBlockKeyguardFeatures { get; set; }
#endif
        /// <summary>Indicates the amount of time that a password can be set for before it expires and a new password will be required. Valid values 1 to 365</summary>
        public int? PasswordExpirationDays { get; set; }
        /// <summary>Indicates the minimum length of the password required on the device. Valid values 4 to 16</summary>
        public int? PasswordMinimumLength { get; set; }
        /// <summary>Indicates the minimum number of letter characters required for device password. Valid values 1 to 16</summary>
        public int? PasswordMinimumLetterCharacters { get; set; }
        /// <summary>Indicates the minimum number of lower case characters required for device password. Valid values 1 to 16</summary>
        public int? PasswordMinimumLowerCaseCharacters { get; set; }
        /// <summary>Indicates the minimum number of non-letter characters required for device password. Valid values 1 to 16</summary>
        public int? PasswordMinimumNonLetterCharacters { get; set; }
        /// <summary>Indicates the minimum number of numeric characters required for device password. Valid values 1 to 16</summary>
        public int? PasswordMinimumNumericCharacters { get; set; }
        /// <summary>Indicates the minimum number of symbol characters required for device password. Valid values 1 to 16</summary>
        public int? PasswordMinimumSymbolCharacters { get; set; }
        /// <summary>Indicates the minimum number of upper case letter characters required for device password. Valid values 1 to 16</summary>
        public int? PasswordMinimumUpperCaseCharacters { get; set; }
        /// <summary>Minutes of inactivity before the screen times out.</summary>
        public int? PasswordMinutesOfInactivityBeforeScreenTimeout { get; set; }
        /// <summary>Indicates the length of password history, where the user will not be able to enter a new password that is the same as any password in the history. Valid values 0 to 24</summary>
        public int? PasswordPreviousPasswordCountToBlock { get; set; }
        /// <summary>Indicates the minimum password quality required on the device. Possible values are: deviceDefault, required, numeric, numericComplex, alphabetic, alphanumeric, alphanumericWithSymbols, lowSecurityBiometric, customPassword.</summary>
        public AndroidDeviceOwnerRequiredPasswordType? PasswordRequiredType { get; set; }
        /// <summary>Indicates the timeout period after which a device must be unlocked using a form of strong authentication. Possible values are: deviceDefault, daily, unkownFutureValue.</summary>
        public AndroidDeviceOwnerRequiredPasswordUnlock? PasswordRequireUnlock { get; set; }
        /// <summary>Indicates the number of times a user can enter an incorrect password before the device is wiped. Valid values 4 to 11</summary>
        public int? PasswordSignInFailureCountBeforeFactoryReset { get; set; }
        /// <summary>Indicates whether the user can install apps from unknown sources on the personal profile.</summary>
        public bool? PersonalProfileAppsAllowInstallFromUnknownSources { get; set; }
        /// <summary>Indicates whether to disable the use of the camera on the personal profile.</summary>
        public bool? PersonalProfileCameraBlocked { get; set; }
        /// <summary>Policy applied to applications in the personal profile. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AppListItem>? PersonalProfilePersonalApplications { get; set; }
#nullable restore
#else
        public List<AppListItem> PersonalProfilePersonalApplications { get; set; }
#endif
        /// <summary>Used together with PersonalProfilePersonalApplications to control how apps in the personal profile are allowed or blocked. Possible values are: notConfigured, blockedApps, allowedApps.</summary>
        public PersonalProfilePersonalPlayStoreMode? PersonalProfilePlayStoreMode { get; set; }
        /// <summary>Indicates whether to disable the capability to take screenshots on the personal profile.</summary>
        public bool? PersonalProfileScreenCaptureBlocked { get; set; }
        /// <summary>Indicates the Play Store mode of the device. Possible values are: notConfigured, allowList, blockList.</summary>
        public AndroidDeviceOwnerPlayStoreMode? PlayStoreMode { get; set; }
        /// <summary>Indicates whether or not to disable the capability to take screenshots.</summary>
        public bool? ScreenCaptureBlocked { get; set; }
        /// <summary>Represents the security common criteria mode enabled provided to users when they attempt to modify managed settings on their device.</summary>
        public bool? SecurityCommonCriteriaModeEnabled { get; set; }
        /// <summary>Indicates whether or not the user is allowed to access developer settings like developer options and safe boot on the device.</summary>
        public bool? SecurityDeveloperSettingsEnabled { get; set; }
        /// <summary>Indicates whether or not verify apps is required.</summary>
        public bool? SecurityRequireVerifyApps { get; set; }
        /// <summary>Indicates whether or not location sharing is disabled for fully managed devices (COBO), and corporate owned devices with a work profile (COPE)</summary>
        public bool? ShareDeviceLocationDisabled { get; set; }
        /// <summary>Represents the customized short help text provided to users when they attempt to modify managed settings on their device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AndroidDeviceOwnerUserFacingMessage? ShortHelpText { get; set; }
#nullable restore
#else
        public AndroidDeviceOwnerUserFacingMessage ShortHelpText { get; set; }
#endif
        /// <summary>Indicates whether or the status bar is disabled, including notifications, quick settings and other screen overlays.</summary>
        public bool? StatusBarBlocked { get; set; }
        /// <summary>List of modes in which the device&apos;s display will stay powered-on. This collection can contain a maximum of 4 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AndroidDeviceOwnerBatteryPluggedMode?>? StayOnModes { get; set; }
#nullable restore
#else
        public List<AndroidDeviceOwnerBatteryPluggedMode?> StayOnModes { get; set; }
#endif
        /// <summary>Indicates whether or not to allow USB mass storage.</summary>
        public bool? StorageAllowUsb { get; set; }
        /// <summary>Indicates whether or not to block external media.</summary>
        public bool? StorageBlockExternalMedia { get; set; }
        /// <summary>Indicates whether or not to block USB file transfer.</summary>
        public bool? StorageBlockUsbFileTransfer { get; set; }
        /// <summary>Indicates the annually repeating time periods during which system updates are postponed. This collection can contain a maximum of 500 elements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AndroidDeviceOwnerSystemUpdateFreezePeriod>? SystemUpdateFreezePeriods { get; set; }
#nullable restore
#else
        public List<AndroidDeviceOwnerSystemUpdateFreezePeriod> SystemUpdateFreezePeriods { get; set; }
#endif
        /// <summary>The type of system update configuration. Possible values are: deviceDefault, postpone, windowed, automatic.</summary>
        public AndroidDeviceOwnerSystemUpdateInstallType? SystemUpdateInstallType { get; set; }
        /// <summary>Indicates the number of minutes after midnight that the system update window ends. Valid values 0 to 1440</summary>
        public int? SystemUpdateWindowEndMinutesAfterMidnight { get; set; }
        /// <summary>Indicates the number of minutes after midnight that the system update window starts. Valid values 0 to 1440</summary>
        public int? SystemUpdateWindowStartMinutesAfterMidnight { get; set; }
        /// <summary>Whether or not to block Android system prompt windows, like toasts, phone activities, and system alerts.</summary>
        public bool? SystemWindowsBlocked { get; set; }
        /// <summary>Indicates whether or not adding users and profiles is disabled.</summary>
        public bool? UsersBlockAdd { get; set; }
        /// <summary>Indicates whether or not to disable removing other users from the device.</summary>
        public bool? UsersBlockRemove { get; set; }
        /// <summary>Indicates whether or not adjusting the master volume is disabled.</summary>
        public bool? VolumeBlockAdjustment { get; set; }
        /// <summary>If an always on VPN package name is specified, whether or not to lock network traffic when that VPN is disconnected.</summary>
        public bool? VpnAlwaysOnLockdownMode { get; set; }
        /// <summary>Android app package name for app that will handle an always-on VPN connection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VpnAlwaysOnPackageIdentifier { get; set; }
#nullable restore
#else
        public string VpnAlwaysOnPackageIdentifier { get; set; }
#endif
        /// <summary>Indicates whether or not to block the user from editing the wifi connection settings.</summary>
        public bool? WifiBlockEditConfigurations { get; set; }
        /// <summary>Indicates whether or not to block the user from editing just the networks defined by the policy.</summary>
        public bool? WifiBlockEditPolicyDefinedConfigurations { get; set; }
        /// <summary>Indicates the number of days that a work profile password can be set before it expires and a new password will be required. Valid values 1 to 365</summary>
        public int? WorkProfilePasswordExpirationDays { get; set; }
        /// <summary>Indicates the minimum length of the work profile password. Valid values 4 to 16</summary>
        public int? WorkProfilePasswordMinimumLength { get; set; }
        /// <summary>Indicates the minimum number of letter characters required for the work profile password. Valid values 1 to 16</summary>
        public int? WorkProfilePasswordMinimumLetterCharacters { get; set; }
        /// <summary>Indicates the minimum number of lower-case characters required for the work profile password. Valid values 1 to 16</summary>
        public int? WorkProfilePasswordMinimumLowerCaseCharacters { get; set; }
        /// <summary>Indicates the minimum number of non-letter characters required for the work profile password. Valid values 1 to 16</summary>
        public int? WorkProfilePasswordMinimumNonLetterCharacters { get; set; }
        /// <summary>Indicates the minimum number of numeric characters required for the work profile password. Valid values 1 to 16</summary>
        public int? WorkProfilePasswordMinimumNumericCharacters { get; set; }
        /// <summary>Indicates the minimum number of symbol characters required for the work profile password. Valid values 1 to 16</summary>
        public int? WorkProfilePasswordMinimumSymbolCharacters { get; set; }
        /// <summary>Indicates the minimum number of upper-case letter characters required for the work profile password. Valid values 1 to 16</summary>
        public int? WorkProfilePasswordMinimumUpperCaseCharacters { get; set; }
        /// <summary>Indicates the length of the work profile password history, where the user will not be able to enter a new password that is the same as any password in the history. Valid values 0 to 24</summary>
        public int? WorkProfilePasswordPreviousPasswordCountToBlock { get; set; }
        /// <summary>Indicates the minimum password quality required on the work profile password. Possible values are: deviceDefault, required, numeric, numericComplex, alphabetic, alphanumeric, alphanumericWithSymbols, lowSecurityBiometric, customPassword.</summary>
        public AndroidDeviceOwnerRequiredPasswordType? WorkProfilePasswordRequiredType { get; set; }
        /// <summary>Indicates the timeout period after which a work profile must be unlocked using a form of strong authentication. Possible values are: deviceDefault, daily, unkownFutureValue.</summary>
        public AndroidDeviceOwnerRequiredPasswordUnlock? WorkProfilePasswordRequireUnlock { get; set; }
        /// <summary>Indicates the number of times a user can enter an incorrect work profile password before the device is wiped. Valid values 4 to 11</summary>
        public int? WorkProfilePasswordSignInFailureCountBeforeFactoryReset { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="AndroidDeviceOwnerGeneralDeviceConfiguration"/> and sets the default values.
        /// </summary>
        public AndroidDeviceOwnerGeneralDeviceConfiguration() : base()
        {
            OdataType = "#microsoft.graph.androidDeviceOwnerGeneralDeviceConfiguration";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="AndroidDeviceOwnerGeneralDeviceConfiguration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new AndroidDeviceOwnerGeneralDeviceConfiguration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AndroidDeviceOwnerGeneralDeviceConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "accountsBlockModification", n => { AccountsBlockModification = n.GetBoolValue(); } },
                { "androidDeviceOwnerDelegatedScopeAppSettings", n => { AndroidDeviceOwnerDelegatedScopeAppSettings = n.GetCollectionOfObjectValues<AndroidDeviceOwnerDelegatedScopeAppSetting>(AndroidDeviceOwnerDelegatedScopeAppSetting.CreateFromDiscriminatorValue)?.ToList(); } },
                { "appsAllowInstallFromUnknownSources", n => { AppsAllowInstallFromUnknownSources = n.GetBoolValue(); } },
                { "appsAutoUpdatePolicy", n => { AppsAutoUpdatePolicy = n.GetEnumValue<AndroidDeviceOwnerAppAutoUpdatePolicyType>(); } },
                { "appsDefaultPermissionPolicy", n => { AppsDefaultPermissionPolicy = n.GetEnumValue<AndroidDeviceOwnerDefaultAppPermissionPolicyType>(); } },
                { "appsRecommendSkippingFirstUseHints", n => { AppsRecommendSkippingFirstUseHints = n.GetBoolValue(); } },
                { "azureAdSharedDeviceDataClearApps", n => { AzureAdSharedDeviceDataClearApps = n.GetCollectionOfObjectValues<AppListItem>(AppListItem.CreateFromDiscriminatorValue)?.ToList(); } },
                { "bluetoothBlockConfiguration", n => { BluetoothBlockConfiguration = n.GetBoolValue(); } },
                { "bluetoothBlockContactSharing", n => { BluetoothBlockContactSharing = n.GetBoolValue(); } },
                { "cameraBlocked", n => { CameraBlocked = n.GetBoolValue(); } },
                { "cellularBlockWiFiTethering", n => { CellularBlockWiFiTethering = n.GetBoolValue(); } },
                { "certificateCredentialConfigurationDisabled", n => { CertificateCredentialConfigurationDisabled = n.GetBoolValue(); } },
                { "crossProfilePoliciesAllowCopyPaste", n => { CrossProfilePoliciesAllowCopyPaste = n.GetBoolValue(); } },
                { "crossProfilePoliciesAllowDataSharing", n => { CrossProfilePoliciesAllowDataSharing = n.GetEnumValue<AndroidDeviceOwnerCrossProfileDataSharing>(); } },
                { "crossProfilePoliciesShowWorkContactsInPersonalProfile", n => { CrossProfilePoliciesShowWorkContactsInPersonalProfile = n.GetBoolValue(); } },
                { "dataRoamingBlocked", n => { DataRoamingBlocked = n.GetBoolValue(); } },
                { "dateTimeConfigurationBlocked", n => { DateTimeConfigurationBlocked = n.GetBoolValue(); } },
                { "detailedHelpText", n => { DetailedHelpText = n.GetObjectValue<AndroidDeviceOwnerUserFacingMessage>(AndroidDeviceOwnerUserFacingMessage.CreateFromDiscriminatorValue); } },
                { "deviceLocationMode", n => { DeviceLocationMode = n.GetEnumValue<AndroidDeviceOwnerLocationMode>(); } },
                { "deviceOwnerLockScreenMessage", n => { DeviceOwnerLockScreenMessage = n.GetObjectValue<AndroidDeviceOwnerUserFacingMessage>(AndroidDeviceOwnerUserFacingMessage.CreateFromDiscriminatorValue); } },
                { "enrollmentProfile", n => { EnrollmentProfile = n.GetEnumValue<AndroidDeviceOwnerEnrollmentProfileType>(); } },
                { "factoryResetBlocked", n => { FactoryResetBlocked = n.GetBoolValue(); } },
                { "factoryResetDeviceAdministratorEmails", n => { FactoryResetDeviceAdministratorEmails = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "globalProxy", n => { GlobalProxy = n.GetObjectValue<AndroidDeviceOwnerGlobalProxy>(AndroidDeviceOwnerGlobalProxy.CreateFromDiscriminatorValue); } },
                { "googleAccountsBlocked", n => { GoogleAccountsBlocked = n.GetBoolValue(); } },
                { "kioskCustomizationDeviceSettingsBlocked", n => { KioskCustomizationDeviceSettingsBlocked = n.GetBoolValue(); } },
                { "kioskCustomizationPowerButtonActionsBlocked", n => { KioskCustomizationPowerButtonActionsBlocked = n.GetBoolValue(); } },
                { "kioskCustomizationStatusBar", n => { KioskCustomizationStatusBar = n.GetEnumValue<AndroidDeviceOwnerKioskCustomizationStatusBar>(); } },
                { "kioskCustomizationSystemErrorWarnings", n => { KioskCustomizationSystemErrorWarnings = n.GetBoolValue(); } },
                { "kioskCustomizationSystemNavigation", n => { KioskCustomizationSystemNavigation = n.GetEnumValue<AndroidDeviceOwnerKioskCustomizationSystemNavigation>(); } },
                { "kioskModeAppOrderEnabled", n => { KioskModeAppOrderEnabled = n.GetBoolValue(); } },
                { "kioskModeAppPositions", n => { KioskModeAppPositions = n.GetCollectionOfObjectValues<AndroidDeviceOwnerKioskModeAppPositionItem>(AndroidDeviceOwnerKioskModeAppPositionItem.CreateFromDiscriminatorValue)?.ToList(); } },
                { "kioskModeApps", n => { KioskModeApps = n.GetCollectionOfObjectValues<AppListItem>(AppListItem.CreateFromDiscriminatorValue)?.ToList(); } },
                { "kioskModeAppsInFolderOrderedByName", n => { KioskModeAppsInFolderOrderedByName = n.GetBoolValue(); } },
                { "kioskModeBluetoothConfigurationEnabled", n => { KioskModeBluetoothConfigurationEnabled = n.GetBoolValue(); } },
                { "kioskModeDebugMenuEasyAccessEnabled", n => { KioskModeDebugMenuEasyAccessEnabled = n.GetBoolValue(); } },
                { "kioskModeExitCode", n => { KioskModeExitCode = n.GetStringValue(); } },
                { "kioskModeFlashlightConfigurationEnabled", n => { KioskModeFlashlightConfigurationEnabled = n.GetBoolValue(); } },
                { "kioskModeFolderIcon", n => { KioskModeFolderIcon = n.GetEnumValue<AndroidDeviceOwnerKioskModeFolderIcon>(); } },
                { "kioskModeGridHeight", n => { KioskModeGridHeight = n.GetIntValue(); } },
                { "kioskModeGridWidth", n => { KioskModeGridWidth = n.GetIntValue(); } },
                { "kioskModeIconSize", n => { KioskModeIconSize = n.GetEnumValue<AndroidDeviceOwnerKioskModeIconSize>(); } },
                { "kioskModeLockHomeScreen", n => { KioskModeLockHomeScreen = n.GetBoolValue(); } },
                { "kioskModeManagedFolders", n => { KioskModeManagedFolders = n.GetCollectionOfObjectValues<AndroidDeviceOwnerKioskModeManagedFolder>(AndroidDeviceOwnerKioskModeManagedFolder.CreateFromDiscriminatorValue)?.ToList(); } },
                { "kioskModeManagedHomeScreenAutoSignout", n => { KioskModeManagedHomeScreenAutoSignout = n.GetBoolValue(); } },
                { "kioskModeManagedHomeScreenInactiveSignOutDelayInSeconds", n => { KioskModeManagedHomeScreenInactiveSignOutDelayInSeconds = n.GetIntValue(); } },
                { "kioskModeManagedHomeScreenInactiveSignOutNoticeInSeconds", n => { KioskModeManagedHomeScreenInactiveSignOutNoticeInSeconds = n.GetIntValue(); } },
                { "kioskModeManagedHomeScreenPinComplexity", n => { KioskModeManagedHomeScreenPinComplexity = n.GetEnumValue<KioskModeManagedHomeScreenPinComplexity>(); } },
                { "kioskModeManagedHomeScreenPinRequired", n => { KioskModeManagedHomeScreenPinRequired = n.GetBoolValue(); } },
                { "kioskModeManagedHomeScreenPinRequiredToResume", n => { KioskModeManagedHomeScreenPinRequiredToResume = n.GetBoolValue(); } },
                { "kioskModeManagedHomeScreenSignInBackground", n => { KioskModeManagedHomeScreenSignInBackground = n.GetStringValue(); } },
                { "kioskModeManagedHomeScreenSignInBrandingLogo", n => { KioskModeManagedHomeScreenSignInBrandingLogo = n.GetStringValue(); } },
                { "kioskModeManagedHomeScreenSignInEnabled", n => { KioskModeManagedHomeScreenSignInEnabled = n.GetBoolValue(); } },
                { "kioskModeManagedSettingsEntryDisabled", n => { KioskModeManagedSettingsEntryDisabled = n.GetBoolValue(); } },
                { "kioskModeMediaVolumeConfigurationEnabled", n => { KioskModeMediaVolumeConfigurationEnabled = n.GetBoolValue(); } },
                { "kioskModeScreenOrientation", n => { KioskModeScreenOrientation = n.GetEnumValue<AndroidDeviceOwnerKioskModeScreenOrientation>(); } },
                { "kioskModeScreenSaverConfigurationEnabled", n => { KioskModeScreenSaverConfigurationEnabled = n.GetBoolValue(); } },
                { "kioskModeScreenSaverDetectMediaDisabled", n => { KioskModeScreenSaverDetectMediaDisabled = n.GetBoolValue(); } },
                { "kioskModeScreenSaverDisplayTimeInSeconds", n => { KioskModeScreenSaverDisplayTimeInSeconds = n.GetIntValue(); } },
                { "kioskModeScreenSaverImageUrl", n => { KioskModeScreenSaverImageUrl = n.GetStringValue(); } },
                { "kioskModeScreenSaverStartDelayInSeconds", n => { KioskModeScreenSaverStartDelayInSeconds = n.GetIntValue(); } },
                { "kioskModeShowAppNotificationBadge", n => { KioskModeShowAppNotificationBadge = n.GetBoolValue(); } },
                { "kioskModeShowDeviceInfo", n => { KioskModeShowDeviceInfo = n.GetBoolValue(); } },
                { "kioskModeUseManagedHomeScreenApp", n => { KioskModeUseManagedHomeScreenApp = n.GetEnumValue<KioskModeType>(); } },
                { "kioskModeVirtualHomeButtonEnabled", n => { KioskModeVirtualHomeButtonEnabled = n.GetBoolValue(); } },
                { "kioskModeVirtualHomeButtonType", n => { KioskModeVirtualHomeButtonType = n.GetEnumValue<AndroidDeviceOwnerVirtualHomeButtonType>(); } },
                { "kioskModeWallpaperUrl", n => { KioskModeWallpaperUrl = n.GetStringValue(); } },
                { "kioskModeWiFiConfigurationEnabled", n => { KioskModeWiFiConfigurationEnabled = n.GetBoolValue(); } },
                { "kioskModeWifiAllowedSsids", n => { KioskModeWifiAllowedSsids = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "locateDeviceLostModeEnabled", n => { LocateDeviceLostModeEnabled = n.GetBoolValue(); } },
                { "locateDeviceUserlessDisabled", n => { LocateDeviceUserlessDisabled = n.GetBoolValue(); } },
                { "microphoneForceMute", n => { MicrophoneForceMute = n.GetBoolValue(); } },
                { "microsoftLauncherConfigurationEnabled", n => { MicrosoftLauncherConfigurationEnabled = n.GetBoolValue(); } },
                { "microsoftLauncherCustomWallpaperAllowUserModification", n => { MicrosoftLauncherCustomWallpaperAllowUserModification = n.GetBoolValue(); } },
                { "microsoftLauncherCustomWallpaperEnabled", n => { MicrosoftLauncherCustomWallpaperEnabled = n.GetBoolValue(); } },
                { "microsoftLauncherCustomWallpaperImageUrl", n => { MicrosoftLauncherCustomWallpaperImageUrl = n.GetStringValue(); } },
                { "microsoftLauncherDockPresenceAllowUserModification", n => { MicrosoftLauncherDockPresenceAllowUserModification = n.GetBoolValue(); } },
                { "microsoftLauncherDockPresenceConfiguration", n => { MicrosoftLauncherDockPresenceConfiguration = n.GetEnumValue<MicrosoftLauncherDockPresence>(); } },
                { "microsoftLauncherFeedAllowUserModification", n => { MicrosoftLauncherFeedAllowUserModification = n.GetBoolValue(); } },
                { "microsoftLauncherFeedEnabled", n => { MicrosoftLauncherFeedEnabled = n.GetBoolValue(); } },
                { "microsoftLauncherSearchBarPlacementConfiguration", n => { MicrosoftLauncherSearchBarPlacementConfiguration = n.GetEnumValue<MicrosoftLauncherSearchBarPlacement>(); } },
                { "networkEscapeHatchAllowed", n => { NetworkEscapeHatchAllowed = n.GetBoolValue(); } },
                { "nfcBlockOutgoingBeam", n => { NfcBlockOutgoingBeam = n.GetBoolValue(); } },
                { "passwordBlockKeyguard", n => { PasswordBlockKeyguard = n.GetBoolValue(); } },
                { "passwordBlockKeyguardFeatures", n => { PasswordBlockKeyguardFeatures = n.GetCollectionOfEnumValues<AndroidKeyguardFeature>()?.ToList(); } },
                { "passwordExpirationDays", n => { PasswordExpirationDays = n.GetIntValue(); } },
                { "passwordMinimumLength", n => { PasswordMinimumLength = n.GetIntValue(); } },
                { "passwordMinimumLetterCharacters", n => { PasswordMinimumLetterCharacters = n.GetIntValue(); } },
                { "passwordMinimumLowerCaseCharacters", n => { PasswordMinimumLowerCaseCharacters = n.GetIntValue(); } },
                { "passwordMinimumNonLetterCharacters", n => { PasswordMinimumNonLetterCharacters = n.GetIntValue(); } },
                { "passwordMinimumNumericCharacters", n => { PasswordMinimumNumericCharacters = n.GetIntValue(); } },
                { "passwordMinimumSymbolCharacters", n => { PasswordMinimumSymbolCharacters = n.GetIntValue(); } },
                { "passwordMinimumUpperCaseCharacters", n => { PasswordMinimumUpperCaseCharacters = n.GetIntValue(); } },
                { "passwordMinutesOfInactivityBeforeScreenTimeout", n => { PasswordMinutesOfInactivityBeforeScreenTimeout = n.GetIntValue(); } },
                { "passwordPreviousPasswordCountToBlock", n => { PasswordPreviousPasswordCountToBlock = n.GetIntValue(); } },
                { "passwordRequireUnlock", n => { PasswordRequireUnlock = n.GetEnumValue<AndroidDeviceOwnerRequiredPasswordUnlock>(); } },
                { "passwordRequiredType", n => { PasswordRequiredType = n.GetEnumValue<AndroidDeviceOwnerRequiredPasswordType>(); } },
                { "passwordSignInFailureCountBeforeFactoryReset", n => { PasswordSignInFailureCountBeforeFactoryReset = n.GetIntValue(); } },
                { "personalProfileAppsAllowInstallFromUnknownSources", n => { PersonalProfileAppsAllowInstallFromUnknownSources = n.GetBoolValue(); } },
                { "personalProfileCameraBlocked", n => { PersonalProfileCameraBlocked = n.GetBoolValue(); } },
                { "personalProfilePersonalApplications", n => { PersonalProfilePersonalApplications = n.GetCollectionOfObjectValues<AppListItem>(AppListItem.CreateFromDiscriminatorValue)?.ToList(); } },
                { "personalProfilePlayStoreMode", n => { PersonalProfilePlayStoreMode = n.GetEnumValue<PersonalProfilePersonalPlayStoreMode>(); } },
                { "personalProfileScreenCaptureBlocked", n => { PersonalProfileScreenCaptureBlocked = n.GetBoolValue(); } },
                { "playStoreMode", n => { PlayStoreMode = n.GetEnumValue<AndroidDeviceOwnerPlayStoreMode>(); } },
                { "screenCaptureBlocked", n => { ScreenCaptureBlocked = n.GetBoolValue(); } },
                { "securityCommonCriteriaModeEnabled", n => { SecurityCommonCriteriaModeEnabled = n.GetBoolValue(); } },
                { "securityDeveloperSettingsEnabled", n => { SecurityDeveloperSettingsEnabled = n.GetBoolValue(); } },
                { "securityRequireVerifyApps", n => { SecurityRequireVerifyApps = n.GetBoolValue(); } },
                { "shareDeviceLocationDisabled", n => { ShareDeviceLocationDisabled = n.GetBoolValue(); } },
                { "shortHelpText", n => { ShortHelpText = n.GetObjectValue<AndroidDeviceOwnerUserFacingMessage>(AndroidDeviceOwnerUserFacingMessage.CreateFromDiscriminatorValue); } },
                { "statusBarBlocked", n => { StatusBarBlocked = n.GetBoolValue(); } },
                { "stayOnModes", n => { StayOnModes = n.GetCollectionOfEnumValues<AndroidDeviceOwnerBatteryPluggedMode>()?.ToList(); } },
                { "storageAllowUsb", n => { StorageAllowUsb = n.GetBoolValue(); } },
                { "storageBlockExternalMedia", n => { StorageBlockExternalMedia = n.GetBoolValue(); } },
                { "storageBlockUsbFileTransfer", n => { StorageBlockUsbFileTransfer = n.GetBoolValue(); } },
                { "systemUpdateFreezePeriods", n => { SystemUpdateFreezePeriods = n.GetCollectionOfObjectValues<AndroidDeviceOwnerSystemUpdateFreezePeriod>(AndroidDeviceOwnerSystemUpdateFreezePeriod.CreateFromDiscriminatorValue)?.ToList(); } },
                { "systemUpdateInstallType", n => { SystemUpdateInstallType = n.GetEnumValue<AndroidDeviceOwnerSystemUpdateInstallType>(); } },
                { "systemUpdateWindowEndMinutesAfterMidnight", n => { SystemUpdateWindowEndMinutesAfterMidnight = n.GetIntValue(); } },
                { "systemUpdateWindowStartMinutesAfterMidnight", n => { SystemUpdateWindowStartMinutesAfterMidnight = n.GetIntValue(); } },
                { "systemWindowsBlocked", n => { SystemWindowsBlocked = n.GetBoolValue(); } },
                { "usersBlockAdd", n => { UsersBlockAdd = n.GetBoolValue(); } },
                { "usersBlockRemove", n => { UsersBlockRemove = n.GetBoolValue(); } },
                { "volumeBlockAdjustment", n => { VolumeBlockAdjustment = n.GetBoolValue(); } },
                { "vpnAlwaysOnLockdownMode", n => { VpnAlwaysOnLockdownMode = n.GetBoolValue(); } },
                { "vpnAlwaysOnPackageIdentifier", n => { VpnAlwaysOnPackageIdentifier = n.GetStringValue(); } },
                { "wifiBlockEditConfigurations", n => { WifiBlockEditConfigurations = n.GetBoolValue(); } },
                { "wifiBlockEditPolicyDefinedConfigurations", n => { WifiBlockEditPolicyDefinedConfigurations = n.GetBoolValue(); } },
                { "workProfilePasswordExpirationDays", n => { WorkProfilePasswordExpirationDays = n.GetIntValue(); } },
                { "workProfilePasswordMinimumLength", n => { WorkProfilePasswordMinimumLength = n.GetIntValue(); } },
                { "workProfilePasswordMinimumLetterCharacters", n => { WorkProfilePasswordMinimumLetterCharacters = n.GetIntValue(); } },
                { "workProfilePasswordMinimumLowerCaseCharacters", n => { WorkProfilePasswordMinimumLowerCaseCharacters = n.GetIntValue(); } },
                { "workProfilePasswordMinimumNonLetterCharacters", n => { WorkProfilePasswordMinimumNonLetterCharacters = n.GetIntValue(); } },
                { "workProfilePasswordMinimumNumericCharacters", n => { WorkProfilePasswordMinimumNumericCharacters = n.GetIntValue(); } },
                { "workProfilePasswordMinimumSymbolCharacters", n => { WorkProfilePasswordMinimumSymbolCharacters = n.GetIntValue(); } },
                { "workProfilePasswordMinimumUpperCaseCharacters", n => { WorkProfilePasswordMinimumUpperCaseCharacters = n.GetIntValue(); } },
                { "workProfilePasswordPreviousPasswordCountToBlock", n => { WorkProfilePasswordPreviousPasswordCountToBlock = n.GetIntValue(); } },
                { "workProfilePasswordRequireUnlock", n => { WorkProfilePasswordRequireUnlock = n.GetEnumValue<AndroidDeviceOwnerRequiredPasswordUnlock>(); } },
                { "workProfilePasswordRequiredType", n => { WorkProfilePasswordRequiredType = n.GetEnumValue<AndroidDeviceOwnerRequiredPasswordType>(); } },
                { "workProfilePasswordSignInFailureCountBeforeFactoryReset", n => { WorkProfilePasswordSignInFailureCountBeforeFactoryReset = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("accountsBlockModification", AccountsBlockModification);
            writer.WriteCollectionOfObjectValues<AndroidDeviceOwnerDelegatedScopeAppSetting>("androidDeviceOwnerDelegatedScopeAppSettings", AndroidDeviceOwnerDelegatedScopeAppSettings);
            writer.WriteBoolValue("appsAllowInstallFromUnknownSources", AppsAllowInstallFromUnknownSources);
            writer.WriteEnumValue<AndroidDeviceOwnerAppAutoUpdatePolicyType>("appsAutoUpdatePolicy", AppsAutoUpdatePolicy);
            writer.WriteEnumValue<AndroidDeviceOwnerDefaultAppPermissionPolicyType>("appsDefaultPermissionPolicy", AppsDefaultPermissionPolicy);
            writer.WriteBoolValue("appsRecommendSkippingFirstUseHints", AppsRecommendSkippingFirstUseHints);
            writer.WriteCollectionOfObjectValues<AppListItem>("azureAdSharedDeviceDataClearApps", AzureAdSharedDeviceDataClearApps);
            writer.WriteBoolValue("bluetoothBlockConfiguration", BluetoothBlockConfiguration);
            writer.WriteBoolValue("bluetoothBlockContactSharing", BluetoothBlockContactSharing);
            writer.WriteBoolValue("cameraBlocked", CameraBlocked);
            writer.WriteBoolValue("cellularBlockWiFiTethering", CellularBlockWiFiTethering);
            writer.WriteBoolValue("certificateCredentialConfigurationDisabled", CertificateCredentialConfigurationDisabled);
            writer.WriteBoolValue("crossProfilePoliciesAllowCopyPaste", CrossProfilePoliciesAllowCopyPaste);
            writer.WriteEnumValue<AndroidDeviceOwnerCrossProfileDataSharing>("crossProfilePoliciesAllowDataSharing", CrossProfilePoliciesAllowDataSharing);
            writer.WriteBoolValue("crossProfilePoliciesShowWorkContactsInPersonalProfile", CrossProfilePoliciesShowWorkContactsInPersonalProfile);
            writer.WriteBoolValue("dataRoamingBlocked", DataRoamingBlocked);
            writer.WriteBoolValue("dateTimeConfigurationBlocked", DateTimeConfigurationBlocked);
            writer.WriteObjectValue<AndroidDeviceOwnerUserFacingMessage>("detailedHelpText", DetailedHelpText);
            writer.WriteEnumValue<AndroidDeviceOwnerLocationMode>("deviceLocationMode", DeviceLocationMode);
            writer.WriteObjectValue<AndroidDeviceOwnerUserFacingMessage>("deviceOwnerLockScreenMessage", DeviceOwnerLockScreenMessage);
            writer.WriteEnumValue<AndroidDeviceOwnerEnrollmentProfileType>("enrollmentProfile", EnrollmentProfile);
            writer.WriteBoolValue("factoryResetBlocked", FactoryResetBlocked);
            writer.WriteCollectionOfPrimitiveValues<string>("factoryResetDeviceAdministratorEmails", FactoryResetDeviceAdministratorEmails);
            writer.WriteObjectValue<AndroidDeviceOwnerGlobalProxy>("globalProxy", GlobalProxy);
            writer.WriteBoolValue("googleAccountsBlocked", GoogleAccountsBlocked);
            writer.WriteBoolValue("kioskCustomizationDeviceSettingsBlocked", KioskCustomizationDeviceSettingsBlocked);
            writer.WriteBoolValue("kioskCustomizationPowerButtonActionsBlocked", KioskCustomizationPowerButtonActionsBlocked);
            writer.WriteEnumValue<AndroidDeviceOwnerKioskCustomizationStatusBar>("kioskCustomizationStatusBar", KioskCustomizationStatusBar);
            writer.WriteBoolValue("kioskCustomizationSystemErrorWarnings", KioskCustomizationSystemErrorWarnings);
            writer.WriteEnumValue<AndroidDeviceOwnerKioskCustomizationSystemNavigation>("kioskCustomizationSystemNavigation", KioskCustomizationSystemNavigation);
            writer.WriteBoolValue("kioskModeAppOrderEnabled", KioskModeAppOrderEnabled);
            writer.WriteCollectionOfObjectValues<AndroidDeviceOwnerKioskModeAppPositionItem>("kioskModeAppPositions", KioskModeAppPositions);
            writer.WriteCollectionOfObjectValues<AppListItem>("kioskModeApps", KioskModeApps);
            writer.WriteBoolValue("kioskModeAppsInFolderOrderedByName", KioskModeAppsInFolderOrderedByName);
            writer.WriteBoolValue("kioskModeBluetoothConfigurationEnabled", KioskModeBluetoothConfigurationEnabled);
            writer.WriteBoolValue("kioskModeDebugMenuEasyAccessEnabled", KioskModeDebugMenuEasyAccessEnabled);
            writer.WriteStringValue("kioskModeExitCode", KioskModeExitCode);
            writer.WriteBoolValue("kioskModeFlashlightConfigurationEnabled", KioskModeFlashlightConfigurationEnabled);
            writer.WriteEnumValue<AndroidDeviceOwnerKioskModeFolderIcon>("kioskModeFolderIcon", KioskModeFolderIcon);
            writer.WriteIntValue("kioskModeGridHeight", KioskModeGridHeight);
            writer.WriteIntValue("kioskModeGridWidth", KioskModeGridWidth);
            writer.WriteEnumValue<AndroidDeviceOwnerKioskModeIconSize>("kioskModeIconSize", KioskModeIconSize);
            writer.WriteBoolValue("kioskModeLockHomeScreen", KioskModeLockHomeScreen);
            writer.WriteCollectionOfObjectValues<AndroidDeviceOwnerKioskModeManagedFolder>("kioskModeManagedFolders", KioskModeManagedFolders);
            writer.WriteBoolValue("kioskModeManagedHomeScreenAutoSignout", KioskModeManagedHomeScreenAutoSignout);
            writer.WriteIntValue("kioskModeManagedHomeScreenInactiveSignOutDelayInSeconds", KioskModeManagedHomeScreenInactiveSignOutDelayInSeconds);
            writer.WriteIntValue("kioskModeManagedHomeScreenInactiveSignOutNoticeInSeconds", KioskModeManagedHomeScreenInactiveSignOutNoticeInSeconds);
            writer.WriteEnumValue<KioskModeManagedHomeScreenPinComplexity>("kioskModeManagedHomeScreenPinComplexity", KioskModeManagedHomeScreenPinComplexity);
            writer.WriteBoolValue("kioskModeManagedHomeScreenPinRequired", KioskModeManagedHomeScreenPinRequired);
            writer.WriteBoolValue("kioskModeManagedHomeScreenPinRequiredToResume", KioskModeManagedHomeScreenPinRequiredToResume);
            writer.WriteStringValue("kioskModeManagedHomeScreenSignInBackground", KioskModeManagedHomeScreenSignInBackground);
            writer.WriteStringValue("kioskModeManagedHomeScreenSignInBrandingLogo", KioskModeManagedHomeScreenSignInBrandingLogo);
            writer.WriteBoolValue("kioskModeManagedHomeScreenSignInEnabled", KioskModeManagedHomeScreenSignInEnabled);
            writer.WriteBoolValue("kioskModeManagedSettingsEntryDisabled", KioskModeManagedSettingsEntryDisabled);
            writer.WriteBoolValue("kioskModeMediaVolumeConfigurationEnabled", KioskModeMediaVolumeConfigurationEnabled);
            writer.WriteEnumValue<AndroidDeviceOwnerKioskModeScreenOrientation>("kioskModeScreenOrientation", KioskModeScreenOrientation);
            writer.WriteBoolValue("kioskModeScreenSaverConfigurationEnabled", KioskModeScreenSaverConfigurationEnabled);
            writer.WriteBoolValue("kioskModeScreenSaverDetectMediaDisabled", KioskModeScreenSaverDetectMediaDisabled);
            writer.WriteIntValue("kioskModeScreenSaverDisplayTimeInSeconds", KioskModeScreenSaverDisplayTimeInSeconds);
            writer.WriteStringValue("kioskModeScreenSaverImageUrl", KioskModeScreenSaverImageUrl);
            writer.WriteIntValue("kioskModeScreenSaverStartDelayInSeconds", KioskModeScreenSaverStartDelayInSeconds);
            writer.WriteBoolValue("kioskModeShowAppNotificationBadge", KioskModeShowAppNotificationBadge);
            writer.WriteBoolValue("kioskModeShowDeviceInfo", KioskModeShowDeviceInfo);
            writer.WriteEnumValue<KioskModeType>("kioskModeUseManagedHomeScreenApp", KioskModeUseManagedHomeScreenApp);
            writer.WriteBoolValue("kioskModeVirtualHomeButtonEnabled", KioskModeVirtualHomeButtonEnabled);
            writer.WriteEnumValue<AndroidDeviceOwnerVirtualHomeButtonType>("kioskModeVirtualHomeButtonType", KioskModeVirtualHomeButtonType);
            writer.WriteStringValue("kioskModeWallpaperUrl", KioskModeWallpaperUrl);
            writer.WriteCollectionOfPrimitiveValues<string>("kioskModeWifiAllowedSsids", KioskModeWifiAllowedSsids);
            writer.WriteBoolValue("kioskModeWiFiConfigurationEnabled", KioskModeWiFiConfigurationEnabled);
            writer.WriteBoolValue("locateDeviceLostModeEnabled", LocateDeviceLostModeEnabled);
            writer.WriteBoolValue("locateDeviceUserlessDisabled", LocateDeviceUserlessDisabled);
            writer.WriteBoolValue("microphoneForceMute", MicrophoneForceMute);
            writer.WriteBoolValue("microsoftLauncherConfigurationEnabled", MicrosoftLauncherConfigurationEnabled);
            writer.WriteBoolValue("microsoftLauncherCustomWallpaperAllowUserModification", MicrosoftLauncherCustomWallpaperAllowUserModification);
            writer.WriteBoolValue("microsoftLauncherCustomWallpaperEnabled", MicrosoftLauncherCustomWallpaperEnabled);
            writer.WriteStringValue("microsoftLauncherCustomWallpaperImageUrl", MicrosoftLauncherCustomWallpaperImageUrl);
            writer.WriteBoolValue("microsoftLauncherDockPresenceAllowUserModification", MicrosoftLauncherDockPresenceAllowUserModification);
            writer.WriteEnumValue<MicrosoftLauncherDockPresence>("microsoftLauncherDockPresenceConfiguration", MicrosoftLauncherDockPresenceConfiguration);
            writer.WriteBoolValue("microsoftLauncherFeedAllowUserModification", MicrosoftLauncherFeedAllowUserModification);
            writer.WriteBoolValue("microsoftLauncherFeedEnabled", MicrosoftLauncherFeedEnabled);
            writer.WriteEnumValue<MicrosoftLauncherSearchBarPlacement>("microsoftLauncherSearchBarPlacementConfiguration", MicrosoftLauncherSearchBarPlacementConfiguration);
            writer.WriteBoolValue("networkEscapeHatchAllowed", NetworkEscapeHatchAllowed);
            writer.WriteBoolValue("nfcBlockOutgoingBeam", NfcBlockOutgoingBeam);
            writer.WriteBoolValue("passwordBlockKeyguard", PasswordBlockKeyguard);
            writer.WriteCollectionOfEnumValues<AndroidKeyguardFeature>("passwordBlockKeyguardFeatures", PasswordBlockKeyguardFeatures);
            writer.WriteIntValue("passwordExpirationDays", PasswordExpirationDays);
            writer.WriteIntValue("passwordMinimumLength", PasswordMinimumLength);
            writer.WriteIntValue("passwordMinimumLetterCharacters", PasswordMinimumLetterCharacters);
            writer.WriteIntValue("passwordMinimumLowerCaseCharacters", PasswordMinimumLowerCaseCharacters);
            writer.WriteIntValue("passwordMinimumNonLetterCharacters", PasswordMinimumNonLetterCharacters);
            writer.WriteIntValue("passwordMinimumNumericCharacters", PasswordMinimumNumericCharacters);
            writer.WriteIntValue("passwordMinimumSymbolCharacters", PasswordMinimumSymbolCharacters);
            writer.WriteIntValue("passwordMinimumUpperCaseCharacters", PasswordMinimumUpperCaseCharacters);
            writer.WriteIntValue("passwordMinutesOfInactivityBeforeScreenTimeout", PasswordMinutesOfInactivityBeforeScreenTimeout);
            writer.WriteIntValue("passwordPreviousPasswordCountToBlock", PasswordPreviousPasswordCountToBlock);
            writer.WriteEnumValue<AndroidDeviceOwnerRequiredPasswordType>("passwordRequiredType", PasswordRequiredType);
            writer.WriteEnumValue<AndroidDeviceOwnerRequiredPasswordUnlock>("passwordRequireUnlock", PasswordRequireUnlock);
            writer.WriteIntValue("passwordSignInFailureCountBeforeFactoryReset", PasswordSignInFailureCountBeforeFactoryReset);
            writer.WriteBoolValue("personalProfileAppsAllowInstallFromUnknownSources", PersonalProfileAppsAllowInstallFromUnknownSources);
            writer.WriteBoolValue("personalProfileCameraBlocked", PersonalProfileCameraBlocked);
            writer.WriteCollectionOfObjectValues<AppListItem>("personalProfilePersonalApplications", PersonalProfilePersonalApplications);
            writer.WriteEnumValue<PersonalProfilePersonalPlayStoreMode>("personalProfilePlayStoreMode", PersonalProfilePlayStoreMode);
            writer.WriteBoolValue("personalProfileScreenCaptureBlocked", PersonalProfileScreenCaptureBlocked);
            writer.WriteEnumValue<AndroidDeviceOwnerPlayStoreMode>("playStoreMode", PlayStoreMode);
            writer.WriteBoolValue("screenCaptureBlocked", ScreenCaptureBlocked);
            writer.WriteBoolValue("securityCommonCriteriaModeEnabled", SecurityCommonCriteriaModeEnabled);
            writer.WriteBoolValue("securityDeveloperSettingsEnabled", SecurityDeveloperSettingsEnabled);
            writer.WriteBoolValue("securityRequireVerifyApps", SecurityRequireVerifyApps);
            writer.WriteBoolValue("shareDeviceLocationDisabled", ShareDeviceLocationDisabled);
            writer.WriteObjectValue<AndroidDeviceOwnerUserFacingMessage>("shortHelpText", ShortHelpText);
            writer.WriteBoolValue("statusBarBlocked", StatusBarBlocked);
            writer.WriteCollectionOfEnumValues<AndroidDeviceOwnerBatteryPluggedMode>("stayOnModes", StayOnModes);
            writer.WriteBoolValue("storageAllowUsb", StorageAllowUsb);
            writer.WriteBoolValue("storageBlockExternalMedia", StorageBlockExternalMedia);
            writer.WriteBoolValue("storageBlockUsbFileTransfer", StorageBlockUsbFileTransfer);
            writer.WriteCollectionOfObjectValues<AndroidDeviceOwnerSystemUpdateFreezePeriod>("systemUpdateFreezePeriods", SystemUpdateFreezePeriods);
            writer.WriteEnumValue<AndroidDeviceOwnerSystemUpdateInstallType>("systemUpdateInstallType", SystemUpdateInstallType);
            writer.WriteIntValue("systemUpdateWindowEndMinutesAfterMidnight", SystemUpdateWindowEndMinutesAfterMidnight);
            writer.WriteIntValue("systemUpdateWindowStartMinutesAfterMidnight", SystemUpdateWindowStartMinutesAfterMidnight);
            writer.WriteBoolValue("systemWindowsBlocked", SystemWindowsBlocked);
            writer.WriteBoolValue("usersBlockAdd", UsersBlockAdd);
            writer.WriteBoolValue("usersBlockRemove", UsersBlockRemove);
            writer.WriteBoolValue("volumeBlockAdjustment", VolumeBlockAdjustment);
            writer.WriteBoolValue("vpnAlwaysOnLockdownMode", VpnAlwaysOnLockdownMode);
            writer.WriteStringValue("vpnAlwaysOnPackageIdentifier", VpnAlwaysOnPackageIdentifier);
            writer.WriteBoolValue("wifiBlockEditConfigurations", WifiBlockEditConfigurations);
            writer.WriteBoolValue("wifiBlockEditPolicyDefinedConfigurations", WifiBlockEditPolicyDefinedConfigurations);
            writer.WriteIntValue("workProfilePasswordExpirationDays", WorkProfilePasswordExpirationDays);
            writer.WriteIntValue("workProfilePasswordMinimumLength", WorkProfilePasswordMinimumLength);
            writer.WriteIntValue("workProfilePasswordMinimumLetterCharacters", WorkProfilePasswordMinimumLetterCharacters);
            writer.WriteIntValue("workProfilePasswordMinimumLowerCaseCharacters", WorkProfilePasswordMinimumLowerCaseCharacters);
            writer.WriteIntValue("workProfilePasswordMinimumNonLetterCharacters", WorkProfilePasswordMinimumNonLetterCharacters);
            writer.WriteIntValue("workProfilePasswordMinimumNumericCharacters", WorkProfilePasswordMinimumNumericCharacters);
            writer.WriteIntValue("workProfilePasswordMinimumSymbolCharacters", WorkProfilePasswordMinimumSymbolCharacters);
            writer.WriteIntValue("workProfilePasswordMinimumUpperCaseCharacters", WorkProfilePasswordMinimumUpperCaseCharacters);
            writer.WriteIntValue("workProfilePasswordPreviousPasswordCountToBlock", WorkProfilePasswordPreviousPasswordCountToBlock);
            writer.WriteEnumValue<AndroidDeviceOwnerRequiredPasswordType>("workProfilePasswordRequiredType", WorkProfilePasswordRequiredType);
            writer.WriteEnumValue<AndroidDeviceOwnerRequiredPasswordUnlock>("workProfilePasswordRequireUnlock", WorkProfilePasswordRequireUnlock);
            writer.WriteIntValue("workProfilePasswordSignInFailureCountBeforeFactoryReset", WorkProfilePasswordSignInFailureCountBeforeFactoryReset);
        }
    }
}
