// <auto-generated/>
using ApiSdk.DeviceManagement.AdvancedThreatProtectionOnboardingStateSummary;
using ApiSdk.DeviceManagement.AndroidDeviceOwnerEnrollmentProfiles;
using ApiSdk.DeviceManagement.AndroidForWorkAppConfigurationSchemas;
using ApiSdk.DeviceManagement.AndroidForWorkEnrollmentProfiles;
using ApiSdk.DeviceManagement.AndroidForWorkSettings;
using ApiSdk.DeviceManagement.AndroidManagedStoreAccountEnterpriseSettings;
using ApiSdk.DeviceManagement.AndroidManagedStoreAppConfigurationSchemas;
using ApiSdk.DeviceManagement.ApplePushNotificationCertificate;
using ApiSdk.DeviceManagement.AppleUserInitiatedEnrollmentProfiles;
using ApiSdk.DeviceManagement.AssignmentFilters;
using ApiSdk.DeviceManagement.AuditEvents;
using ApiSdk.DeviceManagement.AutopilotEvents;
using ApiSdk.DeviceManagement.CartToClassAssociations;
using ApiSdk.DeviceManagement.Categories;
using ApiSdk.DeviceManagement.CertificateConnectorDetails;
using ApiSdk.DeviceManagement.ChromeOSOnboardingSettings;
using ApiSdk.DeviceManagement.CloudPCConnectivityIssues;
using ApiSdk.DeviceManagement.ComanagedDevices;
using ApiSdk.DeviceManagement.ComanagementEligibleDevices;
using ApiSdk.DeviceManagement.ComplianceCategories;
using ApiSdk.DeviceManagement.ComplianceManagementPartners;
using ApiSdk.DeviceManagement.CompliancePolicies;
using ApiSdk.DeviceManagement.ComplianceSettings;
using ApiSdk.DeviceManagement.ConditionalAccessSettings;
using ApiSdk.DeviceManagement.ConfigManagerCollections;
using ApiSdk.DeviceManagement.ConfigurationCategories;
using ApiSdk.DeviceManagement.ConfigurationPolicies;
using ApiSdk.DeviceManagement.ConfigurationPolicyTemplates;
using ApiSdk.DeviceManagement.ConfigurationSettings;
using ApiSdk.DeviceManagement.DataSharingConsents;
using ApiSdk.DeviceManagement.DepOnboardingSettings;
using ApiSdk.DeviceManagement.DerivedCredentials;
using ApiSdk.DeviceManagement.DetectedApps;
using ApiSdk.DeviceManagement.DeviceCategories;
using ApiSdk.DeviceManagement.DeviceCompliancePolicies;
using ApiSdk.DeviceManagement.DeviceCompliancePolicyDeviceStateSummary;
using ApiSdk.DeviceManagement.DeviceCompliancePolicySettingStateSummaries;
using ApiSdk.DeviceManagement.DeviceComplianceScripts;
using ApiSdk.DeviceManagement.DeviceConfigurationConflictSummary;
using ApiSdk.DeviceManagement.DeviceConfigurationDeviceStateSummaries;
using ApiSdk.DeviceManagement.DeviceConfigurationProfiles;
using ApiSdk.DeviceManagement.DeviceConfigurationRestrictedAppsViolations;
using ApiSdk.DeviceManagement.DeviceConfigurationUserStateSummaries;
using ApiSdk.DeviceManagement.DeviceConfigurations;
using ApiSdk.DeviceManagement.DeviceConfigurationsAllManagedDeviceCertificateStates;
using ApiSdk.DeviceManagement.DeviceCustomAttributeShellScripts;
using ApiSdk.DeviceManagement.DeviceEnrollmentConfigurations;
using ApiSdk.DeviceManagement.DeviceHealthScripts;
using ApiSdk.DeviceManagement.DeviceManagementPartners;
using ApiSdk.DeviceManagement.DeviceManagementScripts;
using ApiSdk.DeviceManagement.DeviceShellScripts;
using ApiSdk.DeviceManagement.DomainJoinConnectors;
using ApiSdk.DeviceManagement.ElevationRequests;
using ApiSdk.DeviceManagement.EmbeddedSIMActivationCodePools;
using ApiSdk.DeviceManagement.EnableAndroidDeviceAdministratorEnrollment;
using ApiSdk.DeviceManagement.EnableLegacyPcManagement;
using ApiSdk.DeviceManagement.EnableUnlicensedAdminstrators;
using ApiSdk.DeviceManagement.EvaluateAssignmentFilter;
using ApiSdk.DeviceManagement.ExchangeConnectors;
using ApiSdk.DeviceManagement.ExchangeOnPremisesPolicies;
using ApiSdk.DeviceManagement.ExchangeOnPremisesPolicy;
using ApiSdk.DeviceManagement.GetAssignedRoleDetails;
using ApiSdk.DeviceManagement.GetAssignmentFiltersStatusDetails;
using ApiSdk.DeviceManagement.GetComanagedDevicesSummary;
using ApiSdk.DeviceManagement.GetComanagementEligibleDevicesSummary;
using ApiSdk.DeviceManagement.GetEffectivePermissions;
using ApiSdk.DeviceManagement.GetEffectivePermissionsWithScope;
using ApiSdk.DeviceManagement.GetRoleScopeTagsByIdsWithIds;
using ApiSdk.DeviceManagement.GetRoleScopeTagsByResourceWithResource;
using ApiSdk.DeviceManagement.GetSuggestedEnrollmentLimitWithEnrollmentType;
using ApiSdk.DeviceManagement.GroupPolicyCategories;
using ApiSdk.DeviceManagement.GroupPolicyConfigurations;
using ApiSdk.DeviceManagement.GroupPolicyDefinitionFiles;
using ApiSdk.DeviceManagement.GroupPolicyDefinitions;
using ApiSdk.DeviceManagement.GroupPolicyMigrationReports;
using ApiSdk.DeviceManagement.GroupPolicyObjectFiles;
using ApiSdk.DeviceManagement.GroupPolicyUploadedDefinitionFiles;
using ApiSdk.DeviceManagement.HardwareConfigurations;
using ApiSdk.DeviceManagement.HardwarePasswordInfo;
using ApiSdk.DeviceManagement.ImportedDeviceIdentities;
using ApiSdk.DeviceManagement.ImportedWindowsAutopilotDeviceIdentities;
using ApiSdk.DeviceManagement.Intents;
using ApiSdk.DeviceManagement.IntuneBrandingProfiles;
using ApiSdk.DeviceManagement.IosUpdateStatuses;
using ApiSdk.DeviceManagement.MacOSSoftwareUpdateAccountSummaries;
using ApiSdk.DeviceManagement.ManagedDeviceCleanupRules;
using ApiSdk.DeviceManagement.ManagedDeviceEncryptionStates;
using ApiSdk.DeviceManagement.ManagedDeviceOverview;
using ApiSdk.DeviceManagement.ManagedDevices;
using ApiSdk.DeviceManagement.MicrosoftTunnelConfigurations;
using ApiSdk.DeviceManagement.MicrosoftTunnelHealthThresholds;
using ApiSdk.DeviceManagement.MicrosoftTunnelServerLogCollectionResponses;
using ApiSdk.DeviceManagement.MicrosoftTunnelSites;
using ApiSdk.DeviceManagement.MobileAppTroubleshootingEvents;
using ApiSdk.DeviceManagement.MobileThreatDefenseConnectors;
using ApiSdk.DeviceManagement.Monitoring;
using ApiSdk.DeviceManagement.NdesConnectors;
using ApiSdk.DeviceManagement.NotificationMessageTemplates;
using ApiSdk.DeviceManagement.OperationApprovalPolicies;
using ApiSdk.DeviceManagement.OperationApprovalRequests;
using ApiSdk.DeviceManagement.PrivilegeManagementElevations;
using ApiSdk.DeviceManagement.RemoteActionAudits;
using ApiSdk.DeviceManagement.RemoteAssistancePartners;
using ApiSdk.DeviceManagement.RemoteAssistanceSettings;
using ApiSdk.DeviceManagement.Reports;
using ApiSdk.DeviceManagement.ResourceAccessProfiles;
using ApiSdk.DeviceManagement.ResourceOperations;
using ApiSdk.DeviceManagement.ReusablePolicySettings;
using ApiSdk.DeviceManagement.ReusableSettings;
using ApiSdk.DeviceManagement.RoleAssignments;
using ApiSdk.DeviceManagement.RoleDefinitions;
using ApiSdk.DeviceManagement.RoleScopeTags;
using ApiSdk.DeviceManagement.ScopedForResourceWithResource;
using ApiSdk.DeviceManagement.SendCustomNotificationToCompanyPortal;
using ApiSdk.DeviceManagement.ServiceNowConnections;
using ApiSdk.DeviceManagement.SettingDefinitions;
using ApiSdk.DeviceManagement.SoftwareUpdateStatusSummary;
using ApiSdk.DeviceManagement.TelecomExpenseManagementPartners;
using ApiSdk.DeviceManagement.TemplateInsights;
using ApiSdk.DeviceManagement.TemplateSettings;
using ApiSdk.DeviceManagement.Templates;
using ApiSdk.DeviceManagement.TenantAttachRBAC;
using ApiSdk.DeviceManagement.TermsAndConditions;
using ApiSdk.DeviceManagement.TroubleshootingEvents;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsAnomaly;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsAnomalyCorrelationGroupOverview;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsAnomalyDevice;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformance;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersion;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsAppHealthDeviceModelPerformance;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsAppHealthDevicePerformance;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsAppHealthDevicePerformanceDetails;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsAppHealthOSVersionPerformance;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsAppHealthOverview;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsBaselines;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsBatteryHealthAppImpact;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsBatteryHealthCapacityDetails;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsBatteryHealthDeviceAppImpact;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsBatteryHealthDevicePerformance;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsBatteryHealthModelPerformance;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsBatteryHealthOsPerformance;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsBatteryHealthRuntimeDetails;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsCategories;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsDeviceMetricHistory;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsDevicePerformance;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsDeviceScope;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsDeviceScopes;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsDeviceScores;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsDeviceStartupHistory;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsDeviceStartupProcessPerformance;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsDeviceStartupProcesses;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsDeviceTimelineEvent;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsDevicesWithoutCloudIdentity;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsImpactingProcess;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsMetricHistory;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsModelScores;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsNotAutopilotReadyDevice;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsOverview;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsRemoteConnection;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsResourcePerformance;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsScoreHistory;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsSummarizeWorkFromAnywhereDevices;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsSummarizedDeviceScopes;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsWorkFromAnywhereMetrics;
using ApiSdk.DeviceManagement.UserExperienceAnalyticsWorkFromAnywhereModelPerformance;
using ApiSdk.DeviceManagement.UserPfxCertificates;
using ApiSdk.DeviceManagement.VerifyWindowsEnrollmentAutoDiscoveryWithDomainName;
using ApiSdk.DeviceManagement.VirtualEndpoint;
using ApiSdk.DeviceManagement.WindowsAutopilotDeploymentProfiles;
using ApiSdk.DeviceManagement.WindowsAutopilotDeviceIdentities;
using ApiSdk.DeviceManagement.WindowsAutopilotSettings;
using ApiSdk.DeviceManagement.WindowsDriverUpdateProfiles;
using ApiSdk.DeviceManagement.WindowsFeatureUpdateProfiles;
using ApiSdk.DeviceManagement.WindowsInformationProtectionAppLearningSummaries;
using ApiSdk.DeviceManagement.WindowsInformationProtectionNetworkLearningSummaries;
using ApiSdk.DeviceManagement.WindowsMalwareInformation;
using ApiSdk.DeviceManagement.WindowsQualityUpdateProfiles;
using ApiSdk.DeviceManagement.WindowsUpdateCatalogItems;
using ApiSdk.DeviceManagement.ZebraFotaArtifacts;
using ApiSdk.DeviceManagement.ZebraFotaConnector;
using ApiSdk.DeviceManagement.ZebraFotaDeployments;
using ApiSdk.Models.DeviceManagement;
using ApiSdk.Models.ODataErrors;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.DeviceManagement {
    /// <summary>
    /// Provides operations to manage the deviceManagement singleton.
    /// </summary>
    public class DeviceManagementRequestBuilder : BaseCliRequestBuilder 
    {
        /// <summary>
        /// Provides operations to manage the advancedThreatProtectionOnboardingStateSummary property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAdvancedThreatProtectionOnboardingStateSummaryNavCommand()
        {
            var command = new Command("advanced-threat-protection-onboarding-state-summary");
            command.Description = "Provides operations to manage the advancedThreatProtectionOnboardingStateSummary property of the microsoft.graph.deviceManagement entity.";
            var builder = new AdvancedThreatProtectionOnboardingStateSummaryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAdvancedThreatProtectionOnboardingDeviceSettingStatesNavCommand());
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the androidDeviceOwnerEnrollmentProfiles property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAndroidDeviceOwnerEnrollmentProfilesNavCommand()
        {
            var command = new Command("android-device-owner-enrollment-profiles");
            command.Description = "Provides operations to manage the androidDeviceOwnerEnrollmentProfiles property of the microsoft.graph.deviceManagement entity.";
            var builder = new AndroidDeviceOwnerEnrollmentProfilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the androidForWorkAppConfigurationSchemas property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAndroidForWorkAppConfigurationSchemasNavCommand()
        {
            var command = new Command("android-for-work-app-configuration-schemas");
            command.Description = "Provides operations to manage the androidForWorkAppConfigurationSchemas property of the microsoft.graph.deviceManagement entity.";
            var builder = new AndroidForWorkAppConfigurationSchemasRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the androidForWorkEnrollmentProfiles property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAndroidForWorkEnrollmentProfilesNavCommand()
        {
            var command = new Command("android-for-work-enrollment-profiles");
            command.Description = "Provides operations to manage the androidForWorkEnrollmentProfiles property of the microsoft.graph.deviceManagement entity.";
            var builder = new AndroidForWorkEnrollmentProfilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the androidForWorkSettings property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAndroidForWorkSettingsNavCommand()
        {
            var command = new Command("android-for-work-settings");
            command.Description = "Provides operations to manage the androidForWorkSettings property of the microsoft.graph.deviceManagement entity.";
            var builder = new AndroidForWorkSettingsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCompleteSignupNavCommand());
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildRequestSignupUrlNavCommand());
            nonExecCommands.Add(builder.BuildSyncAppsNavCommand());
            nonExecCommands.Add(builder.BuildUnbindNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the androidManagedStoreAccountEnterpriseSettings property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAndroidManagedStoreAccountEnterpriseSettingsNavCommand()
        {
            var command = new Command("android-managed-store-account-enterprise-settings");
            command.Description = "Provides operations to manage the androidManagedStoreAccountEnterpriseSettings property of the microsoft.graph.deviceManagement entity.";
            var builder = new AndroidManagedStoreAccountEnterpriseSettingsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAddAppsNavCommand());
            nonExecCommands.Add(builder.BuildApproveAppsNavCommand());
            nonExecCommands.Add(builder.BuildCompleteSignupNavCommand());
            nonExecCommands.Add(builder.BuildCreateGooglePlayWebTokenNavCommand());
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildRequestSignupUrlNavCommand());
            nonExecCommands.Add(builder.BuildSetAndroidDeviceOwnerFullyManagedEnrollmentStateNavCommand());
            nonExecCommands.Add(builder.BuildSyncAppsNavCommand());
            nonExecCommands.Add(builder.BuildUnbindNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the androidManagedStoreAppConfigurationSchemas property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAndroidManagedStoreAppConfigurationSchemasNavCommand()
        {
            var command = new Command("android-managed-store-app-configuration-schemas");
            command.Description = "Provides operations to manage the androidManagedStoreAppConfigurationSchemas property of the microsoft.graph.deviceManagement entity.";
            var builder = new AndroidManagedStoreAppConfigurationSchemasRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the applePushNotificationCertificate property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildApplePushNotificationCertificateNavCommand()
        {
            var command = new Command("apple-push-notification-certificate");
            command.Description = "Provides operations to manage the applePushNotificationCertificate property of the microsoft.graph.deviceManagement entity.";
            var builder = new ApplePushNotificationCertificateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            nonExecCommands.Add(builder.BuildDownloadApplePushNotificationCertificateSigningRequestNavCommand());
            nonExecCommands.Add(builder.BuildGenerateApplePushNotificationCertificateSigningRequestNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the appleUserInitiatedEnrollmentProfiles property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAppleUserInitiatedEnrollmentProfilesNavCommand()
        {
            var command = new Command("apple-user-initiated-enrollment-profiles");
            command.Description = "Provides operations to manage the appleUserInitiatedEnrollmentProfiles property of the microsoft.graph.deviceManagement entity.";
            var builder = new AppleUserInitiatedEnrollmentProfilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the assignmentFilters property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAssignmentFiltersNavCommand()
        {
            var command = new Command("assignment-filters");
            command.Description = "Provides operations to manage the assignmentFilters property of the microsoft.graph.deviceManagement entity.";
            var builder = new AssignmentFiltersRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildEnableNavCommand());
            nonExecCommands.Add(builder.BuildGetPlatformSupportedPropertiesWithPlatformRbCommand());
            nonExecCommands.Add(builder.BuildGetStateNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildValidateFilterNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the auditEvents property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAuditEventsNavCommand()
        {
            var command = new Command("audit-events");
            command.Description = "Provides operations to manage the auditEvents property of the microsoft.graph.deviceManagement entity.";
            var builder = new AuditEventsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildGetAuditActivityTypesWithCategoryRbCommand());
            nonExecCommands.Add(builder.BuildGetAuditCategoriesNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the autopilotEvents property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAutopilotEventsNavCommand()
        {
            var command = new Command("autopilot-events");
            command.Description = "Provides operations to manage the autopilotEvents property of the microsoft.graph.deviceManagement entity.";
            var builder = new AutopilotEventsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the cartToClassAssociations property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCartToClassAssociationsNavCommand()
        {
            var command = new Command("cart-to-class-associations");
            command.Description = "Provides operations to manage the cartToClassAssociations property of the microsoft.graph.deviceManagement entity.";
            var builder = new CartToClassAssociationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the categories property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCategoriesNavCommand()
        {
            var command = new Command("categories");
            command.Description = "Provides operations to manage the categories property of the microsoft.graph.deviceManagement entity.";
            var builder = new CategoriesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the certificateConnectorDetails property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCertificateConnectorDetailsNavCommand()
        {
            var command = new Command("certificate-connector-details");
            command.Description = "Provides operations to manage the certificateConnectorDetails property of the microsoft.graph.deviceManagement entity.";
            var builder = new CertificateConnectorDetailsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the chromeOSOnboardingSettings property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildChromeOSOnboardingSettingsNavCommand()
        {
            var command = new Command("chrome-o-s-onboarding-settings");
            command.Description = "Provides operations to manage the chromeOSOnboardingSettings property of the microsoft.graph.deviceManagement entity.";
            var builder = new ChromeOSOnboardingSettingsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildConnectNavCommand());
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDisconnectNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the cloudPCConnectivityIssues property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCloudPCConnectivityIssuesNavCommand()
        {
            var command = new Command("cloud-p-c-connectivity-issues");
            command.Description = "Provides operations to manage the cloudPCConnectivityIssues property of the microsoft.graph.deviceManagement entity.";
            var builder = new CloudPCConnectivityIssuesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the comanagedDevices property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildComanagedDevicesNavCommand()
        {
            var command = new Command("comanaged-devices");
            command.Description = "Provides operations to manage the comanagedDevices property of the microsoft.graph.deviceManagement entity.";
            var builder = new ComanagedDevicesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAppDiagnosticsWithUpnRbCommand());
            nonExecCommands.Add(builder.BuildBulkReprovisionCloudPcNavCommand());
            nonExecCommands.Add(builder.BuildBulkRestoreCloudPcNavCommand());
            nonExecCommands.Add(builder.BuildBulkSetCloudPcReviewStatusNavCommand());
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDownloadAppDiagnosticsNavCommand());
            nonExecCommands.Add(builder.BuildExecuteActionNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildMoveDevicesToOUNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the comanagementEligibleDevices property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildComanagementEligibleDevicesNavCommand()
        {
            var command = new Command("comanagement-eligible-devices");
            command.Description = "Provides operations to manage the comanagementEligibleDevices property of the microsoft.graph.deviceManagement entity.";
            var builder = new ComanagementEligibleDevicesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the complianceCategories property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildComplianceCategoriesNavCommand()
        {
            var command = new Command("compliance-categories");
            command.Description = "Provides operations to manage the complianceCategories property of the microsoft.graph.deviceManagement entity.";
            var builder = new ComplianceCategoriesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the complianceManagementPartners property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildComplianceManagementPartnersNavCommand()
        {
            var command = new Command("compliance-management-partners");
            command.Description = "Provides operations to manage the complianceManagementPartners property of the microsoft.graph.deviceManagement entity.";
            var builder = new ComplianceManagementPartnersRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the compliancePolicies property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCompliancePoliciesNavCommand()
        {
            var command = new Command("compliance-policies");
            command.Description = "Provides operations to manage the compliancePolicies property of the microsoft.graph.deviceManagement entity.";
            var builder = new CompliancePoliciesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the complianceSettings property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildComplianceSettingsNavCommand()
        {
            var command = new Command("compliance-settings");
            command.Description = "Provides operations to manage the complianceSettings property of the microsoft.graph.deviceManagement entity.";
            var builder = new ComplianceSettingsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the conditionalAccessSettings property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildConditionalAccessSettingsNavCommand()
        {
            var command = new Command("conditional-access-settings");
            command.Description = "Provides operations to manage the conditionalAccessSettings property of the microsoft.graph.deviceManagement entity.";
            var builder = new ConditionalAccessSettingsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the configManagerCollections property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildConfigManagerCollectionsNavCommand()
        {
            var command = new Command("config-manager-collections");
            command.Description = "Provides operations to manage the configManagerCollections property of the microsoft.graph.deviceManagement entity.";
            var builder = new ConfigManagerCollectionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildGetPolicySummaryWithPolicyIdRbCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the configurationCategories property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildConfigurationCategoriesNavCommand()
        {
            var command = new Command("configuration-categories");
            command.Description = "Provides operations to manage the configurationCategories property of the microsoft.graph.deviceManagement entity.";
            var builder = new ConfigurationCategoriesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the configurationPolicies property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildConfigurationPoliciesNavCommand()
        {
            var command = new Command("configuration-policies");
            command.Description = "Provides operations to manage the configurationPolicies property of the microsoft.graph.deviceManagement entity.";
            var builder = new ConfigurationPoliciesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the configurationPolicyTemplates property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildConfigurationPolicyTemplatesNavCommand()
        {
            var command = new Command("configuration-policy-templates");
            command.Description = "Provides operations to manage the configurationPolicyTemplates property of the microsoft.graph.deviceManagement entity.";
            var builder = new ConfigurationPolicyTemplatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the configurationSettings property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildConfigurationSettingsNavCommand()
        {
            var command = new Command("configuration-settings");
            command.Description = "Provides operations to manage the configurationSettings property of the microsoft.graph.deviceManagement entity.";
            var builder = new ConfigurationSettingsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the dataSharingConsents property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDataSharingConsentsNavCommand()
        {
            var command = new Command("data-sharing-consents");
            command.Description = "Provides operations to manage the dataSharingConsents property of the microsoft.graph.deviceManagement entity.";
            var builder = new DataSharingConsentsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the depOnboardingSettings property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDepOnboardingSettingsNavCommand()
        {
            var command = new Command("dep-onboarding-settings");
            command.Description = "Provides operations to manage the depOnboardingSettings property of the microsoft.graph.deviceManagement entity.";
            var builder = new DepOnboardingSettingsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildGetExpiringVppTokenCountWithExpiringBeforeDateTimeRbCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the derivedCredentials property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDerivedCredentialsNavCommand()
        {
            var command = new Command("derived-credentials");
            command.Description = "Provides operations to manage the derivedCredentials property of the microsoft.graph.deviceManagement entity.";
            var builder = new DerivedCredentialsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the detectedApps property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDetectedAppsNavCommand()
        {
            var command = new Command("detected-apps");
            command.Description = "Provides operations to manage the detectedApps property of the microsoft.graph.deviceManagement entity.";
            var builder = new DetectedAppsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceCategories property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceCategoriesNavCommand()
        {
            var command = new Command("device-categories");
            command.Description = "Provides operations to manage the deviceCategories property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceCategoriesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceCompliancePolicies property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceCompliancePoliciesNavCommand()
        {
            var command = new Command("device-compliance-policies");
            command.Description = "Provides operations to manage the deviceCompliancePolicies property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceCompliancePoliciesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildGetDevicesScheduledToRetireNavCommand());
            nonExecCommands.Add(builder.BuildGetNoncompliantDevicesToRetireNavCommand());
            nonExecCommands.Add(builder.BuildHasPayloadLinksNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildRefreshDeviceComplianceReportSummarizationNavCommand());
            nonExecCommands.Add(builder.BuildSetScheduledRetireStateNavCommand());
            nonExecCommands.Add(builder.BuildValidateComplianceScriptNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceCompliancePolicyDeviceStateSummary property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceCompliancePolicyDeviceStateSummaryNavCommand()
        {
            var command = new Command("device-compliance-policy-device-state-summary");
            command.Description = "Provides operations to manage the deviceCompliancePolicyDeviceStateSummary property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceCompliancePolicyDeviceStateSummaryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceCompliancePolicySettingStateSummaries property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceCompliancePolicySettingStateSummariesNavCommand()
        {
            var command = new Command("device-compliance-policy-setting-state-summaries");
            command.Description = "Provides operations to manage the deviceCompliancePolicySettingStateSummaries property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceCompliancePolicySettingStateSummariesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceComplianceScripts property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceComplianceScriptsNavCommand()
        {
            var command = new Command("device-compliance-scripts");
            command.Description = "Provides operations to manage the deviceComplianceScripts property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceComplianceScriptsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceConfigurationConflictSummary property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceConfigurationConflictSummaryNavCommand()
        {
            var command = new Command("device-configuration-conflict-summary");
            command.Description = "Provides operations to manage the deviceConfigurationConflictSummary property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceConfigurationConflictSummaryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceConfigurationDeviceStateSummaries property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceConfigurationDeviceStateSummariesNavCommand()
        {
            var command = new Command("device-configuration-device-state-summaries");
            command.Description = "Provides operations to manage the deviceConfigurationDeviceStateSummaries property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceConfigurationDeviceStateSummariesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceConfigurationProfiles property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceConfigurationProfilesNavCommand()
        {
            var command = new Command("device-configuration-profiles");
            command.Description = "Provides operations to manage the deviceConfigurationProfiles property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceConfigurationProfilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceConfigurationRestrictedAppsViolations property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceConfigurationRestrictedAppsViolationsNavCommand()
        {
            var command = new Command("device-configuration-restricted-apps-violations");
            command.Description = "Provides operations to manage the deviceConfigurationRestrictedAppsViolations property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceConfigurationRestrictedAppsViolationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceConfigurationsAllManagedDeviceCertificateStates property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceConfigurationsAllManagedDeviceCertificateStatesNavCommand()
        {
            var command = new Command("device-configurations-all-managed-device-certificate-states");
            command.Description = "Provides operations to manage the deviceConfigurationsAllManagedDeviceCertificateStates property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceConfigurationsAllManagedDeviceCertificateStatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceConfigurations property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceConfigurationsNavCommand()
        {
            var command = new Command("device-configurations");
            command.Description = "Provides operations to manage the deviceConfigurations property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceConfigurationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildGetIosAvailableUpdateVersionsNavCommand());
            nonExecCommands.Add(builder.BuildGetTargetedUsersAndDevicesNavCommand());
            nonExecCommands.Add(builder.BuildHasPayloadLinksNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceConfigurationUserStateSummaries property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceConfigurationUserStateSummariesNavCommand()
        {
            var command = new Command("device-configuration-user-state-summaries");
            command.Description = "Provides operations to manage the deviceConfigurationUserStateSummaries property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceConfigurationUserStateSummariesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceCustomAttributeShellScripts property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceCustomAttributeShellScriptsNavCommand()
        {
            var command = new Command("device-custom-attribute-shell-scripts");
            command.Description = "Provides operations to manage the deviceCustomAttributeShellScripts property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceCustomAttributeShellScriptsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceEnrollmentConfigurations property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceEnrollmentConfigurationsNavCommand()
        {
            var command = new Command("device-enrollment-configurations");
            command.Description = "Provides operations to manage the deviceEnrollmentConfigurations property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceEnrollmentConfigurationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildCreateEnrollmentNotificationConfigurationNavCommand());
            nonExecCommands.Add(builder.BuildHasPayloadLinksNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceHealthScripts property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceHealthScriptsNavCommand()
        {
            var command = new Command("device-health-scripts");
            command.Description = "Provides operations to manage the deviceHealthScripts property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceHealthScriptsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAreGlobalScriptsAvailableNavCommand());
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildEnableGlobalScriptsNavCommand());
            nonExecCommands.Add(builder.BuildGetRemediationSummaryNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceManagementPartners property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceManagementPartnersNavCommand()
        {
            var command = new Command("device-management-partners");
            command.Description = "Provides operations to manage the deviceManagementPartners property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceManagementPartnersRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceManagementScripts property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceManagementScriptsNavCommand()
        {
            var command = new Command("device-management-scripts");
            command.Description = "Provides operations to manage the deviceManagementScripts property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceManagementScriptsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildHasPayloadLinksNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the deviceShellScripts property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeviceShellScriptsNavCommand()
        {
            var command = new Command("device-shell-scripts");
            command.Description = "Provides operations to manage the deviceShellScripts property of the microsoft.graph.deviceManagement entity.";
            var builder = new DeviceShellScriptsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the domainJoinConnectors property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDomainJoinConnectorsNavCommand()
        {
            var command = new Command("domain-join-connectors");
            command.Description = "Provides operations to manage the domainJoinConnectors property of the microsoft.graph.deviceManagement entity.";
            var builder = new DomainJoinConnectorsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the elevationRequests property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildElevationRequestsNavCommand()
        {
            var command = new Command("elevation-requests");
            command.Description = "Provides operations to manage the elevationRequests property of the microsoft.graph.deviceManagement entity.";
            var builder = new ElevationRequestsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the embeddedSIMActivationCodePools property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEmbeddedSIMActivationCodePoolsNavCommand()
        {
            var command = new Command("embedded-s-i-m-activation-code-pools");
            command.Description = "Provides operations to manage the embeddedSIMActivationCodePools property of the microsoft.graph.deviceManagement entity.";
            var builder = new EmbeddedSIMActivationCodePoolsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the enableAndroidDeviceAdministratorEnrollment method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEnableAndroidDeviceAdministratorEnrollmentNavCommand()
        {
            var command = new Command("enable-android-device-administrator-enrollment");
            command.Description = "Provides operations to call the enableAndroidDeviceAdministratorEnrollment method.";
            var builder = new EnableAndroidDeviceAdministratorEnrollmentRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the enableLegacyPcManagement method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEnableLegacyPcManagementNavCommand()
        {
            var command = new Command("enable-legacy-pc-management");
            command.Description = "Provides operations to call the enableLegacyPcManagement method.";
            var builder = new EnableLegacyPcManagementRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the enableUnlicensedAdminstrators method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEnableUnlicensedAdminstratorsNavCommand()
        {
            var command = new Command("enable-unlicensed-adminstrators");
            command.Description = "Provides operations to call the enableUnlicensedAdminstrators method.";
            var builder = new EnableUnlicensedAdminstratorsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the evaluateAssignmentFilter method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEvaluateAssignmentFilterNavCommand()
        {
            var command = new Command("evaluate-assignment-filter");
            command.Description = "Provides operations to call the evaluateAssignmentFilter method.";
            var builder = new EvaluateAssignmentFilterRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the exchangeConnectors property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildExchangeConnectorsNavCommand()
        {
            var command = new Command("exchange-connectors");
            command.Description = "Provides operations to manage the exchangeConnectors property of the microsoft.graph.deviceManagement entity.";
            var builder = new ExchangeConnectorsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the exchangeOnPremisesPolicies property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildExchangeOnPremisesPoliciesNavCommand()
        {
            var command = new Command("exchange-on-premises-policies");
            command.Description = "Provides operations to manage the exchangeOnPremisesPolicies property of the microsoft.graph.deviceManagement entity.";
            var builder = new ExchangeOnPremisesPoliciesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the exchangeOnPremisesPolicy property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildExchangeOnPremisesPolicyNavCommand()
        {
            var command = new Command("exchange-on-premises-policy");
            command.Description = "Provides operations to manage the exchangeOnPremisesPolicy property of the microsoft.graph.deviceManagement entity.";
            var builder = new ExchangeOnPremisesPolicyRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildConditionalAccessSettingsNavCommand());
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getAssignedRoleDetails method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetAssignedRoleDetailsNavCommand()
        {
            var command = new Command("get-assigned-role-details");
            command.Description = "Provides operations to call the getAssignedRoleDetails method.";
            var builder = new GetAssignedRoleDetailsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getAssignmentFiltersStatusDetails method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetAssignmentFiltersStatusDetailsNavCommand()
        {
            var command = new Command("get-assignment-filters-status-details");
            command.Description = "Provides operations to call the getAssignmentFiltersStatusDetails method.";
            var builder = new GetAssignmentFiltersStatusDetailsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getComanagedDevicesSummary method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetComanagedDevicesSummaryNavCommand()
        {
            var command = new Command("get-comanaged-devices-summary");
            command.Description = "Provides operations to call the getComanagedDevicesSummary method.";
            var builder = new GetComanagedDevicesSummaryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getComanagementEligibleDevicesSummary method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetComanagementEligibleDevicesSummaryNavCommand()
        {
            var command = new Command("get-comanagement-eligible-devices-summary");
            command.Description = "Provides operations to call the getComanagementEligibleDevicesSummary method.";
            var builder = new GetComanagementEligibleDevicesSummaryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Get deviceManagement
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCommand()
        {
            var command = new Command("get");
            command.Description = "Get deviceManagement";
            var selectOption = new Option<string[]>("--select", description: "Select properties to be returned") {
                Arity = ArgumentArity.ZeroOrMore
            };
            selectOption.IsRequired = false;
            command.AddOption(selectOption);
            var expandOption = new Option<string[]>("--expand", description: "Expand related entities") {
                Arity = ArgumentArity.ZeroOrMore
            };
            expandOption.IsRequired = false;
            command.AddOption(expandOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var select = invocationContext.ParseResult.GetValueForOption(selectOption);
                var expand = invocationContext.ParseResult.GetValueForOption(expandOption);
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                    q.QueryParameters.Select = select;
                    q.QueryParameters.Expand = expand;
                });
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Provides operations to call the getEffectivePermissions method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetEffectivePermissionsNavCommand()
        {
            var command = new Command("get-effective-permissions");
            command.Description = "Provides operations to call the getEffectivePermissions method.";
            var builder = new GetEffectivePermissionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getEffectivePermissions method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetEffectivePermissionsWithScopeRbCommand()
        {
            var command = new Command("get-effective-permissions-with-scope");
            command.Description = "Provides operations to call the getEffectivePermissions method.";
            var builder = new GetEffectivePermissionsWithScopeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getRoleScopeTagsByIds method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetRoleScopeTagsByIdsWithIdsRbCommand()
        {
            var command = new Command("get-role-scope-tags-by-ids-with-ids");
            command.Description = "Provides operations to call the getRoleScopeTagsByIds method.";
            var builder = new GetRoleScopeTagsByIdsWithIdsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getRoleScopeTagsByResource method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetRoleScopeTagsByResourceWithResourceRbCommand()
        {
            var command = new Command("get-role-scope-tags-by-resource-with-resource");
            command.Description = "Provides operations to call the getRoleScopeTagsByResource method.";
            var builder = new GetRoleScopeTagsByResourceWithResourceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the getSuggestedEnrollmentLimit method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetSuggestedEnrollmentLimitWithEnrollmentTypeRbCommand()
        {
            var command = new Command("get-suggested-enrollment-limit-with-enrollment-type");
            command.Description = "Provides operations to call the getSuggestedEnrollmentLimit method.";
            var builder = new GetSuggestedEnrollmentLimitWithEnrollmentTypeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the groupPolicyCategories property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGroupPolicyCategoriesNavCommand()
        {
            var command = new Command("group-policy-categories");
            command.Description = "Provides operations to manage the groupPolicyCategories property of the microsoft.graph.deviceManagement entity.";
            var builder = new GroupPolicyCategoriesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the groupPolicyConfigurations property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGroupPolicyConfigurationsNavCommand()
        {
            var command = new Command("group-policy-configurations");
            command.Description = "Provides operations to manage the groupPolicyConfigurations property of the microsoft.graph.deviceManagement entity.";
            var builder = new GroupPolicyConfigurationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the groupPolicyDefinitionFiles property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGroupPolicyDefinitionFilesNavCommand()
        {
            var command = new Command("group-policy-definition-files");
            command.Description = "Provides operations to manage the groupPolicyDefinitionFiles property of the microsoft.graph.deviceManagement entity.";
            var builder = new GroupPolicyDefinitionFilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the groupPolicyDefinitions property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGroupPolicyDefinitionsNavCommand()
        {
            var command = new Command("group-policy-definitions");
            command.Description = "Provides operations to manage the groupPolicyDefinitions property of the microsoft.graph.deviceManagement entity.";
            var builder = new GroupPolicyDefinitionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the groupPolicyMigrationReports property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGroupPolicyMigrationReportsNavCommand()
        {
            var command = new Command("group-policy-migration-reports");
            command.Description = "Provides operations to manage the groupPolicyMigrationReports property of the microsoft.graph.deviceManagement entity.";
            var builder = new GroupPolicyMigrationReportsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildCreateMigrationReportNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the groupPolicyObjectFiles property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGroupPolicyObjectFilesNavCommand()
        {
            var command = new Command("group-policy-object-files");
            command.Description = "Provides operations to manage the groupPolicyObjectFiles property of the microsoft.graph.deviceManagement entity.";
            var builder = new GroupPolicyObjectFilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the groupPolicyUploadedDefinitionFiles property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGroupPolicyUploadedDefinitionFilesNavCommand()
        {
            var command = new Command("group-policy-uploaded-definition-files");
            command.Description = "Provides operations to manage the groupPolicyUploadedDefinitionFiles property of the microsoft.graph.deviceManagement entity.";
            var builder = new GroupPolicyUploadedDefinitionFilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the hardwareConfigurations property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildHardwareConfigurationsNavCommand()
        {
            var command = new Command("hardware-configurations");
            command.Description = "Provides operations to manage the hardwareConfigurations property of the microsoft.graph.deviceManagement entity.";
            var builder = new HardwareConfigurationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the hardwarePasswordInfo property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildHardwarePasswordInfoNavCommand()
        {
            var command = new Command("hardware-password-info");
            command.Description = "Provides operations to manage the hardwarePasswordInfo property of the microsoft.graph.deviceManagement entity.";
            var builder = new HardwarePasswordInfoRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the importedDeviceIdentities property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImportedDeviceIdentitiesNavCommand()
        {
            var command = new Command("imported-device-identities");
            command.Description = "Provides operations to manage the importedDeviceIdentities property of the microsoft.graph.deviceManagement entity.";
            var builder = new ImportedDeviceIdentitiesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildImportDeviceIdentityListNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildSearchExistingIdentitiesNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the importedWindowsAutopilotDeviceIdentities property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImportedWindowsAutopilotDeviceIdentitiesNavCommand()
        {
            var command = new Command("imported-windows-autopilot-device-identities");
            command.Description = "Provides operations to manage the importedWindowsAutopilotDeviceIdentities property of the microsoft.graph.deviceManagement entity.";
            var builder = new ImportedWindowsAutopilotDeviceIdentitiesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildImportNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the intents property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIntentsNavCommand()
        {
            var command = new Command("intents");
            command.Description = "Provides operations to manage the intents property of the microsoft.graph.deviceManagement entity.";
            var builder = new IntentsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the intuneBrandingProfiles property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIntuneBrandingProfilesNavCommand()
        {
            var command = new Command("intune-branding-profiles");
            command.Description = "Provides operations to manage the intuneBrandingProfiles property of the microsoft.graph.deviceManagement entity.";
            var builder = new IntuneBrandingProfilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the iosUpdateStatuses property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIosUpdateStatusesNavCommand()
        {
            var command = new Command("ios-update-statuses");
            command.Description = "Provides operations to manage the iosUpdateStatuses property of the microsoft.graph.deviceManagement entity.";
            var builder = new IosUpdateStatusesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the macOSSoftwareUpdateAccountSummaries property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMacOSSoftwareUpdateAccountSummariesNavCommand()
        {
            var command = new Command("mac-o-s-software-update-account-summaries");
            command.Description = "Provides operations to manage the macOSSoftwareUpdateAccountSummaries property of the microsoft.graph.deviceManagement entity.";
            var builder = new MacOSSoftwareUpdateAccountSummariesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the managedDeviceCleanupRules property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildManagedDeviceCleanupRulesNavCommand()
        {
            var command = new Command("managed-device-cleanup-rules");
            command.Description = "Provides operations to manage the managedDeviceCleanupRules property of the microsoft.graph.deviceManagement entity.";
            var builder = new ManagedDeviceCleanupRulesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the managedDeviceEncryptionStates property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildManagedDeviceEncryptionStatesNavCommand()
        {
            var command = new Command("managed-device-encryption-states");
            command.Description = "Provides operations to manage the managedDeviceEncryptionStates property of the microsoft.graph.deviceManagement entity.";
            var builder = new ManagedDeviceEncryptionStatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the managedDeviceOverview property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildManagedDeviceOverviewNavCommand()
        {
            var command = new Command("managed-device-overview");
            command.Description = "Provides operations to manage the managedDeviceOverview property of the microsoft.graph.deviceManagement entity.";
            var builder = new ManagedDeviceOverviewRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the managedDevices property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildManagedDevicesNavCommand()
        {
            var command = new Command("managed-devices");
            command.Description = "Provides operations to manage the managedDevices property of the microsoft.graph.deviceManagement entity.";
            var builder = new ManagedDevicesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAppDiagnosticsWithUpnRbCommand());
            nonExecCommands.Add(builder.BuildBulkReprovisionCloudPcNavCommand());
            nonExecCommands.Add(builder.BuildBulkRestoreCloudPcNavCommand());
            nonExecCommands.Add(builder.BuildBulkSetCloudPcReviewStatusNavCommand());
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildDownloadAppDiagnosticsNavCommand());
            nonExecCommands.Add(builder.BuildExecuteActionNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildMoveDevicesToOUNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the microsoftTunnelConfigurations property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMicrosoftTunnelConfigurationsNavCommand()
        {
            var command = new Command("microsoft-tunnel-configurations");
            command.Description = "Provides operations to manage the microsoftTunnelConfigurations property of the microsoft.graph.deviceManagement entity.";
            var builder = new MicrosoftTunnelConfigurationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the microsoftTunnelHealthThresholds property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMicrosoftTunnelHealthThresholdsNavCommand()
        {
            var command = new Command("microsoft-tunnel-health-thresholds");
            command.Description = "Provides operations to manage the microsoftTunnelHealthThresholds property of the microsoft.graph.deviceManagement entity.";
            var builder = new MicrosoftTunnelHealthThresholdsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the microsoftTunnelServerLogCollectionResponses property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMicrosoftTunnelServerLogCollectionResponsesNavCommand()
        {
            var command = new Command("microsoft-tunnel-server-log-collection-responses");
            command.Description = "Provides operations to manage the microsoftTunnelServerLogCollectionResponses property of the microsoft.graph.deviceManagement entity.";
            var builder = new MicrosoftTunnelServerLogCollectionResponsesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the microsoftTunnelSites property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMicrosoftTunnelSitesNavCommand()
        {
            var command = new Command("microsoft-tunnel-sites");
            command.Description = "Provides operations to manage the microsoftTunnelSites property of the microsoft.graph.deviceManagement entity.";
            var builder = new MicrosoftTunnelSitesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the mobileAppTroubleshootingEvents property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMobileAppTroubleshootingEventsNavCommand()
        {
            var command = new Command("mobile-app-troubleshooting-events");
            command.Description = "Provides operations to manage the mobileAppTroubleshootingEvents property of the microsoft.graph.deviceManagement entity.";
            var builder = new MobileAppTroubleshootingEventsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the mobileThreatDefenseConnectors property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMobileThreatDefenseConnectorsNavCommand()
        {
            var command = new Command("mobile-threat-defense-connectors");
            command.Description = "Provides operations to manage the mobileThreatDefenseConnectors property of the microsoft.graph.deviceManagement entity.";
            var builder = new MobileThreatDefenseConnectorsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the monitoring property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMonitoringNavCommand()
        {
            var command = new Command("monitoring");
            command.Description = "Provides operations to manage the monitoring property of the microsoft.graph.deviceManagement entity.";
            var builder = new MonitoringRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAlertRecordsNavCommand());
            nonExecCommands.Add(builder.BuildAlertRulesNavCommand());
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the ndesConnectors property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNdesConnectorsNavCommand()
        {
            var command = new Command("ndes-connectors");
            command.Description = "Provides operations to manage the ndesConnectors property of the microsoft.graph.deviceManagement entity.";
            var builder = new NdesConnectorsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the notificationMessageTemplates property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNotificationMessageTemplatesNavCommand()
        {
            var command = new Command("notification-message-templates");
            command.Description = "Provides operations to manage the notificationMessageTemplates property of the microsoft.graph.deviceManagement entity.";
            var builder = new NotificationMessageTemplatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the operationApprovalPolicies property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOperationApprovalPoliciesNavCommand()
        {
            var command = new Command("operation-approval-policies");
            command.Description = "Provides operations to manage the operationApprovalPolicies property of the microsoft.graph.deviceManagement entity.";
            var builder = new OperationApprovalPoliciesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildGetApprovableOperationsNavCommand());
            nonExecCommands.Add(builder.BuildGetOperationsRequiringApprovalNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildRetrieveApprovableOperationsNavCommand());
            nonExecCommands.Add(builder.BuildRetrieveOperationsRequiringApprovalNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the operationApprovalRequests property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOperationApprovalRequestsNavCommand()
        {
            var command = new Command("operation-approval-requests");
            command.Description = "Provides operations to manage the operationApprovalRequests property of the microsoft.graph.deviceManagement entity.";
            var builder = new OperationApprovalRequestsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCancelMyRequestNavCommand());
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildRetrieveMyRequestByIdWithIdRbCommand());
            nonExecCommands.Add(builder.BuildRetrieveMyRequestsNavCommand());
            nonExecCommands.Add(builder.BuildRetrieveRequestStatusNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Update deviceManagement
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPatchCommand()
        {
            var command = new Command("patch");
            command.Description = "Update deviceManagement";
            var bodyOption = new Option<string>("--body", description: "The request body") {
            };
            bodyOption.IsRequired = true;
            command.AddOption(bodyOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var body = invocationContext.ParseResult.GetValueForOption(bodyOption) ?? string.Empty;
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                using var stream = new MemoryStream(Encoding.UTF8.GetBytes(body));
                var parseNode = ParseNodeFactoryRegistry.DefaultInstance.GetRootParseNode("application/json", stream);
                var model = parseNode.GetObjectValue<ApiSdk.Models.DeviceManagement.DeviceManagement>(ApiSdk.Models.DeviceManagement.DeviceManagement.CreateFromDiscriminatorValue);
                if (model is null) {
                    Console.Error.WriteLine("No model data to send.");
                    return;
                }
                var requestInfo = ToPatchRequestInformation(model, q => {
                });
                requestInfo.SetContentFromParsable(reqAdapter, "application/json", model);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Provides operations to manage the privilegeManagementElevations property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPrivilegeManagementElevationsNavCommand()
        {
            var command = new Command("privilege-management-elevations");
            command.Description = "Provides operations to manage the privilegeManagementElevations property of the microsoft.graph.deviceManagement entity.";
            var builder = new PrivilegeManagementElevationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the remoteActionAudits property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRemoteActionAuditsNavCommand()
        {
            var command = new Command("remote-action-audits");
            command.Description = "Provides operations to manage the remoteActionAudits property of the microsoft.graph.deviceManagement entity.";
            var builder = new RemoteActionAuditsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the remoteAssistancePartners property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRemoteAssistancePartnersNavCommand()
        {
            var command = new Command("remote-assistance-partners");
            command.Description = "Provides operations to manage the remoteAssistancePartners property of the microsoft.graph.deviceManagement entity.";
            var builder = new RemoteAssistancePartnersRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the remoteAssistanceSettings property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRemoteAssistanceSettingsNavCommand()
        {
            var command = new Command("remote-assistance-settings");
            command.Description = "Provides operations to manage the remoteAssistanceSettings property of the microsoft.graph.deviceManagement entity.";
            var builder = new RemoteAssistanceSettingsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the reports property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildReportsNavCommand()
        {
            var command = new Command("reports");
            command.Description = "Provides operations to manage the reports property of the microsoft.graph.deviceManagement entity.";
            var builder = new ReportsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCachedReportConfigurationsNavCommand());
            execCommands.Add(builder.BuildDeleteCommand());
            nonExecCommands.Add(builder.BuildExportJobsNavCommand());
            nonExecCommands.Add(builder.BuildGetActiveMalwareReportNavCommand());
            nonExecCommands.Add(builder.BuildGetActiveMalwareSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetAllCertificatesReportNavCommand());
            nonExecCommands.Add(builder.BuildGetAppsInstallSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetAppStatusOverviewReportNavCommand());
            nonExecCommands.Add(builder.BuildGetCachedReportNavCommand());
            nonExecCommands.Add(builder.BuildGetCertificatesReportNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildGetCompliancePoliciesReportForDeviceNavCommand());
            nonExecCommands.Add(builder.BuildGetCompliancePolicyDevicesReportNavCommand());
            nonExecCommands.Add(builder.BuildGetCompliancePolicyDeviceSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetCompliancePolicyNonComplianceReportNavCommand());
            nonExecCommands.Add(builder.BuildGetCompliancePolicyNonComplianceSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetComplianceSettingDetailsReportNavCommand());
            nonExecCommands.Add(builder.BuildGetComplianceSettingNonComplianceReportNavCommand());
            nonExecCommands.Add(builder.BuildGetComplianceSettingsReportNavCommand());
            nonExecCommands.Add(builder.BuildGetConfigManagerDevicePolicyStatusReportNavCommand());
            nonExecCommands.Add(builder.BuildGetConfigurationPoliciesReportForDeviceNavCommand());
            nonExecCommands.Add(builder.BuildGetConfigurationPolicyDevicesReportNavCommand());
            nonExecCommands.Add(builder.BuildGetConfigurationPolicyDeviceSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetConfigurationPolicyNonComplianceReportNavCommand());
            nonExecCommands.Add(builder.BuildGetConfigurationPolicyNonComplianceSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetConfigurationPolicySettingsDeviceSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetConfigurationSettingDetailsReportNavCommand());
            nonExecCommands.Add(builder.BuildGetConfigurationSettingNonComplianceReportNavCommand());
            nonExecCommands.Add(builder.BuildGetConfigurationSettingsReportNavCommand());
            nonExecCommands.Add(builder.BuildGetDeviceConfigurationPolicySettingsSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetDeviceConfigurationPolicyStatusSummaryNavCommand());
            nonExecCommands.Add(builder.BuildGetDeviceInstallStatusReportNavCommand());
            nonExecCommands.Add(builder.BuildGetDeviceManagementIntentPerSettingContributingProfilesNavCommand());
            nonExecCommands.Add(builder.BuildGetDeviceManagementIntentSettingsReportNavCommand());
            nonExecCommands.Add(builder.BuildGetDeviceNonComplianceReportNavCommand());
            nonExecCommands.Add(builder.BuildGetDevicePoliciesComplianceReportNavCommand());
            nonExecCommands.Add(builder.BuildGetDevicePolicySettingsComplianceReportNavCommand());
            nonExecCommands.Add(builder.BuildGetDevicesStatusByPolicyPlatformComplianceReportNavCommand());
            nonExecCommands.Add(builder.BuildGetDevicesStatusBySettingReportNavCommand());
            nonExecCommands.Add(builder.BuildGetDeviceStatusByCompliacePolicyReportNavCommand());
            nonExecCommands.Add(builder.BuildGetDeviceStatusByCompliancePolicySettingReportNavCommand());
            nonExecCommands.Add(builder.BuildGetDeviceStatusSummaryByCompliacePolicyReportNavCommand());
            nonExecCommands.Add(builder.BuildGetDeviceStatusSummaryByCompliancePolicySettingsReportNavCommand());
            nonExecCommands.Add(builder.BuildGetDevicesWithoutCompliancePolicyReportNavCommand());
            nonExecCommands.Add(builder.BuildGetEncryptionReportForDevicesNavCommand());
            nonExecCommands.Add(builder.BuildGetEnrollmentConfigurationPoliciesByDeviceNavCommand());
            nonExecCommands.Add(builder.BuildGetFailedMobileAppsReportNavCommand());
            nonExecCommands.Add(builder.BuildGetFailedMobileAppsSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetGroupPolicySettingsDeviceSettingsReportNavCommand());
            nonExecCommands.Add(builder.BuildGetHistoricalReportNavCommand());
            nonExecCommands.Add(builder.BuildGetMalwareSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetMobileApplicationManagementAppConfigurationReportNavCommand());
            nonExecCommands.Add(builder.BuildGetMobileApplicationManagementAppRegistrationSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetNoncompliantDevicesAndSettingsReportNavCommand());
            nonExecCommands.Add(builder.BuildGetPolicyNonComplianceMetadataNavCommand());
            nonExecCommands.Add(builder.BuildGetPolicyNonComplianceReportNavCommand());
            nonExecCommands.Add(builder.BuildGetPolicyNonComplianceSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetQuietTimePolicyUsersReportNavCommand());
            nonExecCommands.Add(builder.BuildGetQuietTimePolicyUserSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetRelatedAppsStatusReportNavCommand());
            nonExecCommands.Add(builder.BuildGetRemoteAssistanceSessionsReportNavCommand());
            nonExecCommands.Add(builder.BuildGetReportFiltersNavCommand());
            nonExecCommands.Add(builder.BuildGetSettingNonComplianceReportNavCommand());
            nonExecCommands.Add(builder.BuildGetUnhealthyDefenderAgentsReportNavCommand());
            nonExecCommands.Add(builder.BuildGetUnhealthyFirewallReportNavCommand());
            nonExecCommands.Add(builder.BuildGetUnhealthyFirewallSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetUserInstallStatusReportNavCommand());
            nonExecCommands.Add(builder.BuildGetWindowsDriverUpdateAlertsPerPolicyPerDeviceReportNavCommand());
            nonExecCommands.Add(builder.BuildGetWindowsDriverUpdateAlertSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetWindowsQualityUpdateAlertsPerPolicyPerDeviceReportNavCommand());
            nonExecCommands.Add(builder.BuildGetWindowsQualityUpdateAlertSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetWindowsUpdateAlertsPerPolicyPerDeviceReportNavCommand());
            nonExecCommands.Add(builder.BuildGetWindowsUpdateAlertSummaryReportNavCommand());
            nonExecCommands.Add(builder.BuildGetZebraFotaDeploymentReportNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the resourceAccessProfiles property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildResourceAccessProfilesNavCommand()
        {
            var command = new Command("resource-access-profiles");
            command.Description = "Provides operations to manage the resourceAccessProfiles property of the microsoft.graph.deviceManagement entity.";
            var builder = new ResourceAccessProfilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildQueryByPlatformTypeNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the resourceOperations property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildResourceOperationsNavCommand()
        {
            var command = new Command("resource-operations");
            command.Description = "Provides operations to manage the resourceOperations property of the microsoft.graph.deviceManagement entity.";
            var builder = new ResourceOperationsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the reusablePolicySettings property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildReusablePolicySettingsNavCommand()
        {
            var command = new Command("reusable-policy-settings");
            command.Description = "Provides operations to manage the reusablePolicySettings property of the microsoft.graph.deviceManagement entity.";
            var builder = new ReusablePolicySettingsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the reusableSettings property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildReusableSettingsNavCommand()
        {
            var command = new Command("reusable-settings");
            command.Description = "Provides operations to manage the reusableSettings property of the microsoft.graph.deviceManagement entity.";
            var builder = new ReusableSettingsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the roleAssignments property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRoleAssignmentsNavCommand()
        {
            var command = new Command("role-assignments");
            command.Description = "Provides operations to manage the roleAssignments property of the microsoft.graph.deviceManagement entity.";
            var builder = new RoleAssignmentsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the roleDefinitions property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRoleDefinitionsNavCommand()
        {
            var command = new Command("role-definitions");
            command.Description = "Provides operations to manage the roleDefinitions property of the microsoft.graph.deviceManagement entity.";
            var builder = new RoleDefinitionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the roleScopeTags property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRoleScopeTagsNavCommand()
        {
            var command = new Command("role-scope-tags");
            command.Description = "Provides operations to manage the roleScopeTags property of the microsoft.graph.deviceManagement entity.";
            var builder = new RoleScopeTagsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildGetRoleScopeTagsByIdNavCommand());
            nonExecCommands.Add(builder.BuildHasCustomRoleScopeTagNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the scopedForResource method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildScopedForResourceWithResourceRbCommand()
        {
            var command = new Command("scoped-for-resource-with-resource");
            command.Description = "Provides operations to call the scopedForResource method.";
            var builder = new ScopedForResourceWithResourceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sendCustomNotificationToCompanyPortal method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSendCustomNotificationToCompanyPortalNavCommand()
        {
            var command = new Command("send-custom-notification-to-company-portal");
            command.Description = "Provides operations to call the sendCustomNotificationToCompanyPortal method.";
            var builder = new SendCustomNotificationToCompanyPortalRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the serviceNowConnections property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildServiceNowConnectionsNavCommand()
        {
            var command = new Command("service-now-connections");
            command.Description = "Provides operations to manage the serviceNowConnections property of the microsoft.graph.deviceManagement entity.";
            var builder = new ServiceNowConnectionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the settingDefinitions property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSettingDefinitionsNavCommand()
        {
            var command = new Command("setting-definitions");
            command.Description = "Provides operations to manage the settingDefinitions property of the microsoft.graph.deviceManagement entity.";
            var builder = new SettingDefinitionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the softwareUpdateStatusSummary property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSoftwareUpdateStatusSummaryNavCommand()
        {
            var command = new Command("software-update-status-summary");
            command.Description = "Provides operations to manage the softwareUpdateStatusSummary property of the microsoft.graph.deviceManagement entity.";
            var builder = new SoftwareUpdateStatusSummaryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the telecomExpenseManagementPartners property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTelecomExpenseManagementPartnersNavCommand()
        {
            var command = new Command("telecom-expense-management-partners");
            command.Description = "Provides operations to manage the telecomExpenseManagementPartners property of the microsoft.graph.deviceManagement entity.";
            var builder = new TelecomExpenseManagementPartnersRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the templateInsights property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTemplateInsightsNavCommand()
        {
            var command = new Command("template-insights");
            command.Description = "Provides operations to manage the templateInsights property of the microsoft.graph.deviceManagement entity.";
            var builder = new TemplateInsightsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the templateSettings property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTemplateSettingsNavCommand()
        {
            var command = new Command("template-settings");
            command.Description = "Provides operations to manage the templateSettings property of the microsoft.graph.deviceManagement entity.";
            var builder = new TemplateSettingsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the templates property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTemplatesNavCommand()
        {
            var command = new Command("templates");
            command.Description = "Provides operations to manage the templates property of the microsoft.graph.deviceManagement entity.";
            var builder = new TemplatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildImportOffice365DeviceConfigurationPoliciesNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the tenantAttachRBAC property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTenantAttachRBACNavCommand()
        {
            var command = new Command("tenant-attach-r-b-a-c");
            command.Description = "Provides operations to manage the tenantAttachRBAC property of the microsoft.graph.deviceManagement entity.";
            var builder = new TenantAttachRBACRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            nonExecCommands.Add(builder.BuildEnableNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildGetStateNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the termsAndConditions property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTermsAndConditionsNavCommand()
        {
            var command = new Command("terms-and-conditions");
            command.Description = "Provides operations to manage the termsAndConditions property of the microsoft.graph.deviceManagement entity.";
            var builder = new TermsAndConditionsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the troubleshootingEvents property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTroubleshootingEventsNavCommand()
        {
            var command = new Command("troubleshooting-events");
            command.Description = "Provides operations to manage the troubleshootingEvents property of the microsoft.graph.deviceManagement entity.";
            var builder = new TroubleshootingEventsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsAnomalyCorrelationGroupOverview property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsAnomalyCorrelationGroupOverviewNavCommand()
        {
            var command = new Command("user-experience-analytics-anomaly-correlation-group-overview");
            command.Description = "Provides operations to manage the userExperienceAnalyticsAnomalyCorrelationGroupOverview property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsAnomalyCorrelationGroupOverviewRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsAnomalyDevice property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsAnomalyDeviceNavCommand()
        {
            var command = new Command("user-experience-analytics-anomaly-device");
            command.Description = "Provides operations to manage the userExperienceAnalyticsAnomalyDevice property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsAnomalyDeviceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsAnomaly property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsAnomalyNavCommand()
        {
            var command = new Command("user-experience-analytics-anomaly");
            command.Description = "Provides operations to manage the userExperienceAnalyticsAnomaly property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsAnomalyRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsNavCommand()
        {
            var command = new Command("user-experience-analytics-app-health-application-performance-by-app-version-details");
            command.Description = "Provides operations to manage the userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIdNavCommand()
        {
            var command = new Command("user-experience-analytics-app-health-application-performance-by-app-version-device-id");
            command.Description = "Provides operations to manage the userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIdRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersion property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionNavCommand()
        {
            var command = new Command("user-experience-analytics-app-health-application-performance-by-app-version");
            command.Description = "Provides operations to manage the userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersion property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionNavCommand()
        {
            var command = new Command("user-experience-analytics-app-health-application-performance-by-o-s-version");
            command.Description = "Provides operations to manage the userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsAppHealthApplicationPerformance property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsAppHealthApplicationPerformanceNavCommand()
        {
            var command = new Command("user-experience-analytics-app-health-application-performance");
            command.Description = "Provides operations to manage the userExperienceAnalyticsAppHealthApplicationPerformance property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsAppHealthApplicationPerformanceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsAppHealthDeviceModelPerformance property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsAppHealthDeviceModelPerformanceNavCommand()
        {
            var command = new Command("user-experience-analytics-app-health-device-model-performance");
            command.Description = "Provides operations to manage the userExperienceAnalyticsAppHealthDeviceModelPerformance property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsAppHealthDeviceModelPerformanceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsAppHealthDevicePerformanceDetails property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsAppHealthDevicePerformanceDetailsNavCommand()
        {
            var command = new Command("user-experience-analytics-app-health-device-performance-details");
            command.Description = "Provides operations to manage the userExperienceAnalyticsAppHealthDevicePerformanceDetails property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsAppHealthDevicePerformanceDetailsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsAppHealthDevicePerformance property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsAppHealthDevicePerformanceNavCommand()
        {
            var command = new Command("user-experience-analytics-app-health-device-performance");
            command.Description = "Provides operations to manage the userExperienceAnalyticsAppHealthDevicePerformance property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsAppHealthDevicePerformanceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsAppHealthOSVersionPerformance property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsAppHealthOSVersionPerformanceNavCommand()
        {
            var command = new Command("user-experience-analytics-app-health-o-s-version-performance");
            command.Description = "Provides operations to manage the userExperienceAnalyticsAppHealthOSVersionPerformance property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsAppHealthOSVersionPerformanceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsAppHealthOverview property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsAppHealthOverviewNavCommand()
        {
            var command = new Command("user-experience-analytics-app-health-overview");
            command.Description = "Provides operations to manage the userExperienceAnalyticsAppHealthOverview property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsAppHealthOverviewRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildMetricValuesNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsBaselines property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsBaselinesNavCommand()
        {
            var command = new Command("user-experience-analytics-baselines");
            command.Description = "Provides operations to manage the userExperienceAnalyticsBaselines property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsBaselinesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsBatteryHealthAppImpact property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsBatteryHealthAppImpactNavCommand()
        {
            var command = new Command("user-experience-analytics-battery-health-app-impact");
            command.Description = "Provides operations to manage the userExperienceAnalyticsBatteryHealthAppImpact property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsBatteryHealthAppImpactRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsBatteryHealthCapacityDetails property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsBatteryHealthCapacityDetailsNavCommand()
        {
            var command = new Command("user-experience-analytics-battery-health-capacity-details");
            command.Description = "Provides operations to manage the userExperienceAnalyticsBatteryHealthCapacityDetails property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsBatteryHealthCapacityDetailsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsBatteryHealthDeviceAppImpact property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsBatteryHealthDeviceAppImpactNavCommand()
        {
            var command = new Command("user-experience-analytics-battery-health-device-app-impact");
            command.Description = "Provides operations to manage the userExperienceAnalyticsBatteryHealthDeviceAppImpact property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsBatteryHealthDeviceAppImpactRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsBatteryHealthDevicePerformance property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsBatteryHealthDevicePerformanceNavCommand()
        {
            var command = new Command("user-experience-analytics-battery-health-device-performance");
            command.Description = "Provides operations to manage the userExperienceAnalyticsBatteryHealthDevicePerformance property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsBatteryHealthDevicePerformanceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsBatteryHealthDeviceRuntimeHistory property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryNavCommand()
        {
            var command = new Command("user-experience-analytics-battery-health-device-runtime-history");
            command.Description = "Provides operations to manage the userExperienceAnalyticsBatteryHealthDeviceRuntimeHistory property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsBatteryHealthModelPerformance property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsBatteryHealthModelPerformanceNavCommand()
        {
            var command = new Command("user-experience-analytics-battery-health-model-performance");
            command.Description = "Provides operations to manage the userExperienceAnalyticsBatteryHealthModelPerformance property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsBatteryHealthModelPerformanceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsBatteryHealthOsPerformance property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsBatteryHealthOsPerformanceNavCommand()
        {
            var command = new Command("user-experience-analytics-battery-health-os-performance");
            command.Description = "Provides operations to manage the userExperienceAnalyticsBatteryHealthOsPerformance property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsBatteryHealthOsPerformanceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsBatteryHealthRuntimeDetails property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsBatteryHealthRuntimeDetailsNavCommand()
        {
            var command = new Command("user-experience-analytics-battery-health-runtime-details");
            command.Description = "Provides operations to manage the userExperienceAnalyticsBatteryHealthRuntimeDetails property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsBatteryHealthRuntimeDetailsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsCategories property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsCategoriesNavCommand()
        {
            var command = new Command("user-experience-analytics-categories");
            command.Description = "Provides operations to manage the userExperienceAnalyticsCategories property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsCategoriesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsDeviceMetricHistory property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsDeviceMetricHistoryNavCommand()
        {
            var command = new Command("user-experience-analytics-device-metric-history");
            command.Description = "Provides operations to manage the userExperienceAnalyticsDeviceMetricHistory property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsDeviceMetricHistoryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsDevicePerformance property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsDevicePerformanceNavCommand()
        {
            var command = new Command("user-experience-analytics-device-performance");
            command.Description = "Provides operations to manage the userExperienceAnalyticsDevicePerformance property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsDevicePerformanceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildSummarizeDevicePerformanceDevicesWithSummarizeByRbCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsDeviceScope property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsDeviceScopeNavCommand()
        {
            var command = new Command("user-experience-analytics-device-scope");
            command.Description = "Provides operations to manage the userExperienceAnalyticsDeviceScope property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsDeviceScopeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildTriggerDeviceScopeActionNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsDeviceScopes property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsDeviceScopesNavCommand()
        {
            var command = new Command("user-experience-analytics-device-scopes");
            command.Description = "Provides operations to manage the userExperienceAnalyticsDeviceScopes property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsDeviceScopesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsDeviceScores property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsDeviceScoresNavCommand()
        {
            var command = new Command("user-experience-analytics-device-scores");
            command.Description = "Provides operations to manage the userExperienceAnalyticsDeviceScores property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsDeviceScoresRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsDeviceStartupHistory property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsDeviceStartupHistoryNavCommand()
        {
            var command = new Command("user-experience-analytics-device-startup-history");
            command.Description = "Provides operations to manage the userExperienceAnalyticsDeviceStartupHistory property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsDeviceStartupHistoryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsDeviceStartupProcesses property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsDeviceStartupProcessesNavCommand()
        {
            var command = new Command("user-experience-analytics-device-startup-processes");
            command.Description = "Provides operations to manage the userExperienceAnalyticsDeviceStartupProcesses property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsDeviceStartupProcessesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsDeviceStartupProcessPerformance property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsDeviceStartupProcessPerformanceNavCommand()
        {
            var command = new Command("user-experience-analytics-device-startup-process-performance");
            command.Description = "Provides operations to manage the userExperienceAnalyticsDeviceStartupProcessPerformance property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsDeviceStartupProcessPerformanceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsDevicesWithoutCloudIdentity property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsDevicesWithoutCloudIdentityNavCommand()
        {
            var command = new Command("user-experience-analytics-devices-without-cloud-identity");
            command.Description = "Provides operations to manage the userExperienceAnalyticsDevicesWithoutCloudIdentity property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsDevicesWithoutCloudIdentityRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsDeviceTimelineEvent property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsDeviceTimelineEventNavCommand()
        {
            var command = new Command("user-experience-analytics-device-timeline-event");
            command.Description = "Provides operations to manage the userExperienceAnalyticsDeviceTimelineEvent property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsDeviceTimelineEventRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsImpactingProcess property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsImpactingProcessNavCommand()
        {
            var command = new Command("user-experience-analytics-impacting-process");
            command.Description = "Provides operations to manage the userExperienceAnalyticsImpactingProcess property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsImpactingProcessRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsMetricHistory property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsMetricHistoryNavCommand()
        {
            var command = new Command("user-experience-analytics-metric-history");
            command.Description = "Provides operations to manage the userExperienceAnalyticsMetricHistory property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsMetricHistoryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsModelScores property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsModelScoresNavCommand()
        {
            var command = new Command("user-experience-analytics-model-scores");
            command.Description = "Provides operations to manage the userExperienceAnalyticsModelScores property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsModelScoresRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsNotAutopilotReadyDevice property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsNotAutopilotReadyDeviceNavCommand()
        {
            var command = new Command("user-experience-analytics-not-autopilot-ready-device");
            command.Description = "Provides operations to manage the userExperienceAnalyticsNotAutopilotReadyDevice property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsNotAutopilotReadyDeviceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsOverview property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsOverviewNavCommand()
        {
            var command = new Command("user-experience-analytics-overview");
            command.Description = "Provides operations to manage the userExperienceAnalyticsOverview property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsOverviewRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsRemoteConnection property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsRemoteConnectionNavCommand()
        {
            var command = new Command("user-experience-analytics-remote-connection");
            command.Description = "Provides operations to manage the userExperienceAnalyticsRemoteConnection property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsRemoteConnectionRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildSummarizeDeviceRemoteConnectionWithSummarizeByRbCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsResourcePerformance property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsResourcePerformanceNavCommand()
        {
            var command = new Command("user-experience-analytics-resource-performance");
            command.Description = "Provides operations to manage the userExperienceAnalyticsResourcePerformance property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsResourcePerformanceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildSummarizeDeviceResourcePerformanceWithSummarizeByRbCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsScoreHistory property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsScoreHistoryNavCommand()
        {
            var command = new Command("user-experience-analytics-score-history");
            command.Description = "Provides operations to manage the userExperienceAnalyticsScoreHistory property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsScoreHistoryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the userExperienceAnalyticsSummarizedDeviceScopes method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsSummarizedDeviceScopesNavCommand()
        {
            var command = new Command("user-experience-analytics-summarized-device-scopes");
            command.Description = "Provides operations to call the userExperienceAnalyticsSummarizedDeviceScopes method.";
            var builder = new UserExperienceAnalyticsSummarizedDeviceScopesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the userExperienceAnalyticsSummarizeWorkFromAnywhereDevices method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsSummarizeWorkFromAnywhereDevicesNavCommand()
        {
            var command = new Command("user-experience-analytics-summarize-work-from-anywhere-devices");
            command.Description = "Provides operations to call the userExperienceAnalyticsSummarizeWorkFromAnywhereDevices method.";
            var builder = new UserExperienceAnalyticsSummarizeWorkFromAnywhereDevicesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricNavCommand()
        {
            var command = new Command("user-experience-analytics-work-from-anywhere-hardware-readiness-metric");
            command.Description = "Provides operations to manage the userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsWorkFromAnywhereMetrics property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsWorkFromAnywhereMetricsNavCommand()
        {
            var command = new Command("user-experience-analytics-work-from-anywhere-metrics");
            command.Description = "Provides operations to manage the userExperienceAnalyticsWorkFromAnywhereMetrics property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsWorkFromAnywhereMetricsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userExperienceAnalyticsWorkFromAnywhereModelPerformance property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserExperienceAnalyticsWorkFromAnywhereModelPerformanceNavCommand()
        {
            var command = new Command("user-experience-analytics-work-from-anywhere-model-performance");
            command.Description = "Provides operations to manage the userExperienceAnalyticsWorkFromAnywhereModelPerformance property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserExperienceAnalyticsWorkFromAnywhereModelPerformanceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the userPfxCertificates property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserPfxCertificatesNavCommand()
        {
            var command = new Command("user-pfx-certificates");
            command.Description = "Provides operations to manage the userPfxCertificates property of the microsoft.graph.deviceManagement entity.";
            var builder = new UserPfxCertificatesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the verifyWindowsEnrollmentAutoDiscovery method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildVerifyWindowsEnrollmentAutoDiscoveryWithDomainNameRbCommand()
        {
            var command = new Command("verify-windows-enrollment-auto-discovery-with-domain-name");
            command.Description = "Provides operations to call the verifyWindowsEnrollmentAutoDiscovery method.";
            var builder = new VerifyWindowsEnrollmentAutoDiscoveryWithDomainNameRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the virtualEndpoint property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildVirtualEndpointNavCommand()
        {
            var command = new Command("virtual-endpoint");
            command.Description = "Provides operations to manage the virtualEndpoint property of the microsoft.graph.deviceManagement entity.";
            var builder = new VirtualEndpointRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAuditEventsNavCommand());
            nonExecCommands.Add(builder.BuildBulkActionsNavCommand());
            nonExecCommands.Add(builder.BuildCloudPCsNavCommand());
            nonExecCommands.Add(builder.BuildCrossCloudGovernmentOrganizationMappingNavCommand());
            execCommands.Add(builder.BuildDeleteCommand());
            nonExecCommands.Add(builder.BuildDeviceImagesNavCommand());
            nonExecCommands.Add(builder.BuildExternalPartnerSettingsNavCommand());
            nonExecCommands.Add(builder.BuildFrontLineServicePlansNavCommand());
            nonExecCommands.Add(builder.BuildGalleryImagesNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildGetEffectivePermissionsNavCommand());
            nonExecCommands.Add(builder.BuildOnPremisesConnectionsNavCommand());
            nonExecCommands.Add(builder.BuildOrganizationSettingsNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildProvisioningPoliciesNavCommand());
            nonExecCommands.Add(builder.BuildReportsNavCommand());
            nonExecCommands.Add(builder.BuildRetrieveScopedPermissionsNavCommand());
            nonExecCommands.Add(builder.BuildRetrieveTenantEncryptionSettingNavCommand());
            nonExecCommands.Add(builder.BuildServicePlansNavCommand());
            nonExecCommands.Add(builder.BuildSharedUseServicePlansNavCommand());
            nonExecCommands.Add(builder.BuildSnapshotsNavCommand());
            nonExecCommands.Add(builder.BuildSupportedRegionsNavCommand());
            nonExecCommands.Add(builder.BuildUserSettingsNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the windowsAutopilotDeploymentProfiles property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWindowsAutopilotDeploymentProfilesNavCommand()
        {
            var command = new Command("windows-autopilot-deployment-profiles");
            command.Description = "Provides operations to manage the windowsAutopilotDeploymentProfiles property of the microsoft.graph.deviceManagement entity.";
            var builder = new WindowsAutopilotDeploymentProfilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildHasPayloadLinksNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the windowsAutopilotDeviceIdentities property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWindowsAutopilotDeviceIdentitiesNavCommand()
        {
            var command = new Command("windows-autopilot-device-identities");
            command.Description = "Provides operations to manage the windowsAutopilotDeviceIdentities property of the microsoft.graph.deviceManagement entity.";
            var builder = new WindowsAutopilotDeviceIdentitiesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the windowsAutopilotSettings property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWindowsAutopilotSettingsNavCommand()
        {
            var command = new Command("windows-autopilot-settings");
            command.Description = "Provides operations to manage the windowsAutopilotSettings property of the microsoft.graph.deviceManagement entity.";
            var builder = new WindowsAutopilotSettingsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPatchCommand());
            nonExecCommands.Add(builder.BuildSyncNavCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the windowsDriverUpdateProfiles property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWindowsDriverUpdateProfilesNavCommand()
        {
            var command = new Command("windows-driver-update-profiles");
            command.Description = "Provides operations to manage the windowsDriverUpdateProfiles property of the microsoft.graph.deviceManagement entity.";
            var builder = new WindowsDriverUpdateProfilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the windowsFeatureUpdateProfiles property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWindowsFeatureUpdateProfilesNavCommand()
        {
            var command = new Command("windows-feature-update-profiles");
            command.Description = "Provides operations to manage the windowsFeatureUpdateProfiles property of the microsoft.graph.deviceManagement entity.";
            var builder = new WindowsFeatureUpdateProfilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the windowsInformationProtectionAppLearningSummaries property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWindowsInformationProtectionAppLearningSummariesNavCommand()
        {
            var command = new Command("windows-information-protection-app-learning-summaries");
            command.Description = "Provides operations to manage the windowsInformationProtectionAppLearningSummaries property of the microsoft.graph.deviceManagement entity.";
            var builder = new WindowsInformationProtectionAppLearningSummariesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the windowsInformationProtectionNetworkLearningSummaries property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWindowsInformationProtectionNetworkLearningSummariesNavCommand()
        {
            var command = new Command("windows-information-protection-network-learning-summaries");
            command.Description = "Provides operations to manage the windowsInformationProtectionNetworkLearningSummaries property of the microsoft.graph.deviceManagement entity.";
            var builder = new WindowsInformationProtectionNetworkLearningSummariesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the windowsMalwareInformation property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWindowsMalwareInformationNavCommand()
        {
            var command = new Command("windows-malware-information");
            command.Description = "Provides operations to manage the windowsMalwareInformation property of the microsoft.graph.deviceManagement entity.";
            var builder = new WindowsMalwareInformationRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the windowsQualityUpdateProfiles property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWindowsQualityUpdateProfilesNavCommand()
        {
            var command = new Command("windows-quality-update-profiles");
            command.Description = "Provides operations to manage the windowsQualityUpdateProfiles property of the microsoft.graph.deviceManagement entity.";
            var builder = new WindowsQualityUpdateProfilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the windowsUpdateCatalogItems property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWindowsUpdateCatalogItemsNavCommand()
        {
            var command = new Command("windows-update-catalog-items");
            command.Description = "Provides operations to manage the windowsUpdateCatalogItems property of the microsoft.graph.deviceManagement entity.";
            var builder = new WindowsUpdateCatalogItemsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the zebraFotaArtifacts property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildZebraFotaArtifactsNavCommand()
        {
            var command = new Command("zebra-fota-artifacts");
            command.Description = "Provides operations to manage the zebraFotaArtifacts property of the microsoft.graph.deviceManagement entity.";
            var builder = new ZebraFotaArtifactsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the zebraFotaConnector property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildZebraFotaConnectorNavCommand()
        {
            var command = new Command("zebra-fota-connector");
            command.Description = "Provides operations to manage the zebraFotaConnector property of the microsoft.graph.deviceManagement entity.";
            var builder = new ZebraFotaConnectorRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildApproveFotaAppsNavCommand());
            nonExecCommands.Add(builder.BuildConnectNavCommand());
            execCommands.Add(builder.BuildDeleteCommand());
            nonExecCommands.Add(builder.BuildDisconnectNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            nonExecCommands.Add(builder.BuildHasActiveDeploymentsNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the zebraFotaDeployments property of the microsoft.graph.deviceManagement entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildZebraFotaDeploymentsNavCommand()
        {
            var command = new Command("zebra-fota-deployments");
            command.Description = "Provides operations to manage the zebraFotaDeployments property of the microsoft.graph.deviceManagement entity.";
            var builder = new ZebraFotaDeploymentsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="DeviceManagementRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public DeviceManagementRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/deviceManagement{?%24expand,%24select}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="DeviceManagementRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public DeviceManagementRequestBuilder(string rawUrl) : base("{+baseurl}/deviceManagement{?%24expand,%24select}", rawUrl)
        {
        }
        /// <summary>
        /// Get deviceManagement
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DeviceManagementRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DeviceManagementRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update deviceManagement
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(ApiSdk.Models.DeviceManagement.DeviceManagement body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(ApiSdk.Models.DeviceManagement.DeviceManagement body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Get deviceManagement
        /// </summary>
        public class DeviceManagementRequestBuilderGetQueryParameters 
        {
            /// <summary>Expand related entities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("%24expand")]
            public string[] Expand { get; set; }
#endif
            /// <summary>Select properties to be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24select")]
            public string[]? Select { get; set; }
#nullable restore
#else
            [QueryParameter("%24select")]
            public string[] Select { get; set; }
#endif
        }
    }
}
