// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DeviceManagementConfigurationSettingApplicability : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>description of the setting</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Describes applicability for the mode the device is in</summary>
        public global::ApiSdk.Models.DeviceManagementConfigurationDeviceMode? DeviceMode { get; set; }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType { get; set; }
#nullable restore
#else
        public string OdataType { get; set; }
#endif
        /// <summary>Supported platform types.</summary>
        public global::ApiSdk.Models.DeviceManagementConfigurationPlatforms? Platform { get; set; }
        /// <summary>Describes which technology this setting can be deployed with</summary>
        public global::ApiSdk.Models.DeviceManagementConfigurationTechnologies? Technologies { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.DeviceManagementConfigurationSettingApplicability"/> and sets the default values.
        /// </summary>
        public DeviceManagementConfigurationSettingApplicability()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.DeviceManagementConfigurationSettingApplicability"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ApiSdk.Models.DeviceManagementConfigurationSettingApplicability CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.deviceManagementConfigurationApplicationSettingApplicability" => new global::ApiSdk.Models.DeviceManagementConfigurationApplicationSettingApplicability(),
                "#microsoft.graph.deviceManagementConfigurationExchangeOnlineSettingApplicability" => new global::ApiSdk.Models.DeviceManagementConfigurationExchangeOnlineSettingApplicability(),
                "#microsoft.graph.deviceManagementConfigurationWindowsSettingApplicability" => new global::ApiSdk.Models.DeviceManagementConfigurationWindowsSettingApplicability(),
                _ => new global::ApiSdk.Models.DeviceManagementConfigurationSettingApplicability(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "description", n => { Description = n.GetStringValue(); } },
                { "deviceMode", n => { DeviceMode = n.GetEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationDeviceMode>(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "platform", n => { Platform = n.GetEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationPlatforms>(); } },
                { "technologies", n => { Technologies = n.GetEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationTechnologies>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
            writer.WriteEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationDeviceMode>("deviceMode", DeviceMode);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationPlatforms>("platform", Platform);
            writer.WriteEnumValue<global::ApiSdk.Models.DeviceManagementConfigurationTechnologies>("technologies", Technologies);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
