// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CloudPcPolicyScheduledApplyActionDetail : global::ApiSdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>An expression that specifies the cron schedule. (For example, &apos;0 0 0 20  &apos; means schedules a job to run at midnight on the 20th of every month) Administrators can set a cron expression to define the scheduling rules for automatic regular application. When auto provision is disabled, cronScheduleExpression is set to null, stopping the automatic task scheduling. Read-Only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CronScheduleExpression { get; set; }
#nullable restore
#else
        public string CronScheduleExpression { get; set; }
#endif
        /// <summary>Indicates IT Admins can set an end date to define the last scheduler run before this time. If not set, the scheduler runs continuously. There is no time zone information at this time; it needs to be coordinated with timezone, for example, &apos;2025-02-01 00:00:00&apos; with &apos;China Standard Time&apos; means the scheduling rule takes effect before Feb 01 2025 00:00:00 GMT+0800 (China Standard Time).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndDateTime { get; set; }
#nullable restore
#else
        public string EndDateTime { get; set; }
#endif
        /// <summary>Indicates IT Admins can see when the next automatic regular apply is executed. It needs to be coordinated with timezone, for example, &apos;2025-01-01 00:00:00&apos; with &apos;China Standard Time&apos; means the next task executes at Jan 01 2025 00:00:00 GMT+0800 (China Standard Time). Read-Only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextRunDateTime { get; set; }
#nullable restore
#else
        public string NextRunDateTime { get; set; }
#endif
        /// <summary>The percentage of Cloud PCs to keep available. Administrators can set this property to a value from 0 to 99. Cloud PCs are reprovisioned only when there are no active and connected Cloud PC users. Frontline shared only.</summary>
        public int? ReservePercentage { get; set; }
        /// <summary>Indicates IT Admins can set a start date to define the first scheduler run after this time. If not set, the default is the current time. There is no time zone information at this time, it needs to be coordinated with timezone, for example, &apos;2025-01-01 00:00:00&apos; with &apos;China Standard Time&apos; means the scheduling rule takes effect after Jan 01 2025 00:00:00 GMT+0800 (China Standard Time).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartDateTime { get; set; }
#nullable restore
#else
        public string StartDateTime { get; set; }
#endif
        /// <summary>The timezone property</summary>
        public global::ApiSdk.Models.CloudPcPolicyTimezone? Timezone { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.CloudPcPolicyScheduledApplyActionDetail"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.CloudPcPolicyScheduledApplyActionDetail CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.CloudPcPolicyScheduledApplyActionDetail();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "cronScheduleExpression", n => { CronScheduleExpression = n.GetStringValue(); } },
                { "endDateTime", n => { EndDateTime = n.GetStringValue(); } },
                { "nextRunDateTime", n => { NextRunDateTime = n.GetStringValue(); } },
                { "reservePercentage", n => { ReservePercentage = n.GetIntValue(); } },
                { "startDateTime", n => { StartDateTime = n.GetStringValue(); } },
                { "timezone", n => { Timezone = n.GetEnumValue<global::ApiSdk.Models.CloudPcPolicyTimezone>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("cronScheduleExpression", CronScheduleExpression);
            writer.WriteStringValue("endDateTime", EndDateTime);
            writer.WriteStringValue("nextRunDateTime", NextRunDateTime);
            writer.WriteIntValue("reservePercentage", ReservePercentage);
            writer.WriteStringValue("startDateTime", StartDateTime);
            writer.WriteEnumValue<global::ApiSdk.Models.CloudPcPolicyTimezone>("timezone", Timezone);
        }
    }
}
#pragma warning restore CS0618
