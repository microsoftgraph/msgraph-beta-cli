// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Windows X SCEP Certificate configuration profile
    /// </summary>
    public class Windows10XSCEPCertificateProfile : Windows10XCertificateProfile, IParsable
    {
        /// <summary>CertificateStore types</summary>
        public ApiSdk.Models.CertificateStore? CertificateStore { get; set; }
        /// <summary>Certificate Validity Period Options.</summary>
        public ApiSdk.Models.CertificateValidityPeriodScale? CertificateValidityPeriodScale { get; set; }
        /// <summary>Value for the Certificate Validity Period</summary>
        public int? CertificateValidityPeriodValue { get; set; }
        /// <summary>Extended Key Usage (EKU) settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ExtendedKeyUsage>? ExtendedKeyUsages { get; set; }
#nullable restore
#else
        public List<ExtendedKeyUsage> ExtendedKeyUsages { get; set; }
#endif
        /// <summary>SCEP Hash Algorithm.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<HashAlgorithms?>? HashAlgorithm { get; set; }
#nullable restore
#else
        public List<HashAlgorithms?> HashAlgorithm { get; set; }
#endif
        /// <summary>Key Size Options.</summary>
        public ApiSdk.Models.KeySize? KeySize { get; set; }
        /// <summary>Key Storage Provider (KSP) Import Options.</summary>
        public KeyStorageProviderOption? KeyStorageProvider { get; set; }
        /// <summary>Key Usage Options.</summary>
        public KeyUsages? KeyUsage { get; set; }
        /// <summary>Certificate renewal threshold percentage</summary>
        public int? RenewalThresholdPercentage { get; set; }
        /// <summary>Trusted Root Certificate ID</summary>
        public Guid? RootCertificateId { get; set; }
        /// <summary>SCEP Server Url(s).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ScepServerUrls { get; set; }
#nullable restore
#else
        public List<string> ScepServerUrls { get; set; }
#endif
        /// <summary>Custom AAD Attributes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Windows10XCustomSubjectAlternativeName>? SubjectAlternativeNameFormats { get; set; }
#nullable restore
#else
        public List<Windows10XCustomSubjectAlternativeName> SubjectAlternativeNameFormats { get; set; }
#endif
        /// <summary>Custom format to use with SubjectNameFormat = Custom. Example: CN={{EmailAddress}},E={{EmailAddress}},OU=Enterprise Users,O=Contoso Corporation,L=Redmond,ST=WA,C=US</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubjectNameFormatString { get; set; }
#nullable restore
#else
        public string SubjectNameFormatString { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Windows10XSCEPCertificateProfile"/> and sets the default values.
        /// </summary>
        public Windows10XSCEPCertificateProfile() : base()
        {
            OdataType = "#microsoft.graph.windows10XSCEPCertificateProfile";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Windows10XSCEPCertificateProfile"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Windows10XSCEPCertificateProfile CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Windows10XSCEPCertificateProfile();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "certificateStore", n => { CertificateStore = n.GetEnumValue<CertificateStore>(); } },
                { "certificateValidityPeriodScale", n => { CertificateValidityPeriodScale = n.GetEnumValue<CertificateValidityPeriodScale>(); } },
                { "certificateValidityPeriodValue", n => { CertificateValidityPeriodValue = n.GetIntValue(); } },
                { "extendedKeyUsages", n => { ExtendedKeyUsages = n.GetCollectionOfObjectValues<ExtendedKeyUsage>(ExtendedKeyUsage.CreateFromDiscriminatorValue)?.ToList(); } },
                { "hashAlgorithm", n => { HashAlgorithm = n.GetCollectionOfEnumValues<HashAlgorithms>()?.ToList(); } },
                { "keySize", n => { KeySize = n.GetEnumValue<KeySize>(); } },
                { "keyStorageProvider", n => { KeyStorageProvider = n.GetEnumValue<KeyStorageProviderOption>(); } },
                { "keyUsage", n => { KeyUsage = n.GetEnumValue<KeyUsages>(); } },
                { "renewalThresholdPercentage", n => { RenewalThresholdPercentage = n.GetIntValue(); } },
                { "rootCertificateId", n => { RootCertificateId = n.GetGuidValue(); } },
                { "scepServerUrls", n => { ScepServerUrls = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "subjectAlternativeNameFormats", n => { SubjectAlternativeNameFormats = n.GetCollectionOfObjectValues<Windows10XCustomSubjectAlternativeName>(Windows10XCustomSubjectAlternativeName.CreateFromDiscriminatorValue)?.ToList(); } },
                { "subjectNameFormatString", n => { SubjectNameFormatString = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<CertificateStore>("certificateStore", CertificateStore);
            writer.WriteEnumValue<CertificateValidityPeriodScale>("certificateValidityPeriodScale", CertificateValidityPeriodScale);
            writer.WriteIntValue("certificateValidityPeriodValue", CertificateValidityPeriodValue);
            writer.WriteCollectionOfObjectValues<ExtendedKeyUsage>("extendedKeyUsages", ExtendedKeyUsages);
            writer.WriteCollectionOfEnumValues<HashAlgorithms>("hashAlgorithm", HashAlgorithm);
            writer.WriteEnumValue<KeySize>("keySize", KeySize);
            writer.WriteEnumValue<KeyStorageProviderOption>("keyStorageProvider", KeyStorageProvider);
            writer.WriteEnumValue<KeyUsages>("keyUsage", KeyUsage);
            writer.WriteIntValue("renewalThresholdPercentage", RenewalThresholdPercentage);
            writer.WriteGuidValue("rootCertificateId", RootCertificateId);
            writer.WriteCollectionOfPrimitiveValues<string>("scepServerUrls", ScepServerUrls);
            writer.WriteCollectionOfObjectValues<Windows10XCustomSubjectAlternativeName>("subjectAlternativeNameFormats", SubjectAlternativeNameFormats);
            writer.WriteStringValue("subjectNameFormatString", SubjectNameFormatString);
        }
    }
}
