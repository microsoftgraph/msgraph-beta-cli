// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models {
    #pragma warning disable CS1591
    public class PrivilegedRoleSettings : Entity, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>The approvalOnElevation property</summary>
        public bool? ApprovalOnElevation { get; set; }
        /// <summary>The approverIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ApproverIds { get; set; }
#nullable restore
#else
        public List<string> ApproverIds { get; set; }
#endif
        /// <summary>The elevationDuration property</summary>
        public TimeSpan? ElevationDuration { get; set; }
        /// <summary>The isMfaOnElevationConfigurable property</summary>
        public bool? IsMfaOnElevationConfigurable { get; set; }
        /// <summary>The lastGlobalAdmin property</summary>
        public bool? LastGlobalAdmin { get; set; }
        /// <summary>The maxElavationDuration property</summary>
        public TimeSpan? MaxElavationDuration { get; set; }
        /// <summary>The mfaOnElevation property</summary>
        public bool? MfaOnElevation { get; set; }
        /// <summary>The minElevationDuration property</summary>
        public TimeSpan? MinElevationDuration { get; set; }
        /// <summary>The notificationToUserOnElevation property</summary>
        public bool? NotificationToUserOnElevation { get; set; }
        /// <summary>The ticketingInfoOnElevation property</summary>
        public bool? TicketingInfoOnElevation { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PrivilegedRoleSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new PrivilegedRoleSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PrivilegedRoleSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"approvalOnElevation", n => { ApprovalOnElevation = n.GetBoolValue(); } },
                {"approverIds", n => { ApproverIds = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"elevationDuration", n => { ElevationDuration = n.GetTimeSpanValue(); } },
                {"isMfaOnElevationConfigurable", n => { IsMfaOnElevationConfigurable = n.GetBoolValue(); } },
                {"lastGlobalAdmin", n => { LastGlobalAdmin = n.GetBoolValue(); } },
                {"maxElavationDuration", n => { MaxElavationDuration = n.GetTimeSpanValue(); } },
                {"mfaOnElevation", n => { MfaOnElevation = n.GetBoolValue(); } },
                {"minElevationDuration", n => { MinElevationDuration = n.GetTimeSpanValue(); } },
                {"notificationToUserOnElevation", n => { NotificationToUserOnElevation = n.GetBoolValue(); } },
                {"ticketingInfoOnElevation", n => { TicketingInfoOnElevation = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("approvalOnElevation", ApprovalOnElevation);
            writer.WriteCollectionOfPrimitiveValues<string>("approverIds", ApproverIds);
            writer.WriteTimeSpanValue("elevationDuration", ElevationDuration);
            writer.WriteBoolValue("isMfaOnElevationConfigurable", IsMfaOnElevationConfigurable);
            writer.WriteBoolValue("lastGlobalAdmin", LastGlobalAdmin);
            writer.WriteTimeSpanValue("maxElavationDuration", MaxElavationDuration);
            writer.WriteBoolValue("mfaOnElevation", MfaOnElevation);
            writer.WriteTimeSpanValue("minElevationDuration", MinElevationDuration);
            writer.WriteBoolValue("notificationToUserOnElevation", NotificationToUserOnElevation);
            writer.WriteBoolValue("ticketingInfoOnElevation", TicketingInfoOnElevation);
        }
    }
}
