// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models {
    /// <summary>
    /// Hardware information of a given device.
    /// </summary>
    public class HardwareInformation : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The number of charge cycles the device’s current battery has gone through. Valid values 0 to 2147483647</summary>
        public int? BatteryChargeCycles { get; set; }
        /// <summary>The device’s current battery’s health percentage. Valid values 0 to 100</summary>
        public int? BatteryHealthPercentage { get; set; }
        /// <summary>The battery level, between 0.0 and 100, or null if the battery level cannot be determined. The update frequency of this property is per-checkin. Note this property is currently supported only on devices running iOS 5.0 and later, and is available only when Device Information access right is obtained. Valid values 0 to 100</summary>
        public double? BatteryLevelPercentage { get; set; }
        /// <summary>The serial number of the device’s current battery</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BatterySerialNumber { get; set; }
#nullable restore
#else
        public string BatterySerialNumber { get; set; }
#endif
        /// <summary>Cellular technology of the device</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CellularTechnology { get; set; }
#nullable restore
#else
        public string CellularTechnology { get; set; }
#endif
        /// <summary>Returns the fully qualified domain name of the device (if any). If the device is not domain-joined, it returns an empty string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceFullQualifiedDomainName { get; set; }
#nullable restore
#else
        public string DeviceFullQualifiedDomainName { get; set; }
#endif
        /// <summary>The deviceGuardLocalSystemAuthorityCredentialGuardState property</summary>
        public ApiSdk.Models.DeviceGuardLocalSystemAuthorityCredentialGuardState? DeviceGuardLocalSystemAuthorityCredentialGuardState { get; set; }
        /// <summary>The deviceGuardVirtualizationBasedSecurityHardwareRequirementState property</summary>
        public ApiSdk.Models.DeviceGuardVirtualizationBasedSecurityHardwareRequirementState? DeviceGuardVirtualizationBasedSecurityHardwareRequirementState { get; set; }
        /// <summary>The deviceGuardVirtualizationBasedSecurityState property</summary>
        public ApiSdk.Models.DeviceGuardVirtualizationBasedSecurityState? DeviceGuardVirtualizationBasedSecurityState { get; set; }
        /// <summary>A standard error code indicating the last error, or 0 indicating no error (default). The update frequency of this property is daily. Note this property is currently supported only for Windows based Device based subscription licensing. Valid values 0 to 2147483647</summary>
        public int? DeviceLicensingLastErrorCode { get; set; }
        /// <summary>Error text message as a descripition for deviceLicensingLastErrorCode. The update frequency of this property is daily. Note this property is currently supported only for Windows based Device based subscription licensing.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceLicensingLastErrorDescription { get; set; }
#nullable restore
#else
        public string DeviceLicensingLastErrorDescription { get; set; }
#endif
        /// <summary>Indicates the device licensing status after Windows device based subscription has been enabled.</summary>
        public ApiSdk.Models.DeviceLicensingStatus? DeviceLicensingStatus { get; set; }
        /// <summary>eSIM identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EsimIdentifier { get; set; }
#nullable restore
#else
        public string EsimIdentifier { get; set; }
#endif
        /// <summary>Free storage space of the device.</summary>
        public long? FreeStorageSpace { get; set; }
        /// <summary>IMEI</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Imei { get; set; }
#nullable restore
#else
        public string Imei { get; set; }
#endif
        /// <summary>IPAddressV4</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddressV4 { get; set; }
#nullable restore
#else
        public string IpAddressV4 { get; set; }
#endif
        /// <summary>Encryption status of the device</summary>
        public bool? IsEncrypted { get; set; }
        /// <summary>Shared iPad</summary>
        public bool? IsSharedDevice { get; set; }
        /// <summary>Supervised mode of the device</summary>
        public bool? IsSupervised { get; set; }
        /// <summary>Manufacturer of the device</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Manufacturer { get; set; }
#nullable restore
#else
        public string Manufacturer { get; set; }
#endif
        /// <summary>MEID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Meid { get; set; }
#nullable restore
#else
        public string Meid { get; set; }
#endif
        /// <summary>Model of the device</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Model { get; set; }
#nullable restore
#else
        public string Model { get; set; }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType { get; set; }
#nullable restore
#else
        public string OdataType { get; set; }
#endif
        /// <summary>String that specifies the OS edition.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OperatingSystemEdition { get; set; }
#nullable restore
#else
        public string OperatingSystemEdition { get; set; }
#endif
        /// <summary>Operating system language of the device</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OperatingSystemLanguage { get; set; }
#nullable restore
#else
        public string OperatingSystemLanguage { get; set; }
#endif
        /// <summary>Int that specifies the Windows Operating System ProductType. More details here https://go.microsoft.com/fwlink/?linkid=2126950. Valid values 0 to 2147483647</summary>
        public int? OperatingSystemProductType { get; set; }
        /// <summary>Operating System Build Number on Android device</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OsBuildNumber { get; set; }
#nullable restore
#else
        public string OsBuildNumber { get; set; }
#endif
        /// <summary>Phone number of the device</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PhoneNumber { get; set; }
#nullable restore
#else
        public string PhoneNumber { get; set; }
#endif
        /// <summary>The product name, e.g. iPad8,12 etc. The update frequency of this property is weekly. Note this property is currently supported only on iOS/MacOS devices, and is available only when Device Information access right is obtained.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductName { get; set; }
#nullable restore
#else
        public string ProductName { get; set; }
#endif
        /// <summary>The number of users currently on this device, or null (default) if the value of this property cannot be determined. The update frequency of this property is per-checkin. Note this property is currently supported only on devices running iOS 13.4 and later, and is available only when Device Information access right is obtained. Valid values 0 to 2147483647</summary>
        public int? ResidentUsersCount { get; set; }
        /// <summary>Serial number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SerialNumber { get; set; }
#nullable restore
#else
        public string SerialNumber { get; set; }
#endif
        /// <summary>All users on the shared Apple device</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<SharedAppleDeviceUser>? SharedDeviceCachedUsers { get; set; }
#nullable restore
#else
        public List<SharedAppleDeviceUser> SharedDeviceCachedUsers { get; set; }
#endif
        /// <summary>SubnetAddress</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubnetAddress { get; set; }
#nullable restore
#else
        public string SubnetAddress { get; set; }
#endif
        /// <summary>Subscriber carrier of the device</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubscriberCarrier { get; set; }
#nullable restore
#else
        public string SubscriberCarrier { get; set; }
#endif
        /// <summary>BIOS version as reported by SMBIOS</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SystemManagementBIOSVersion { get; set; }
#nullable restore
#else
        public string SystemManagementBIOSVersion { get; set; }
#endif
        /// <summary>Total storage space of the device.</summary>
        public long? TotalStorageSpace { get; set; }
        /// <summary>The identifying information that uniquely names the TPM manufacturer</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TpmManufacturer { get; set; }
#nullable restore
#else
        public string TpmManufacturer { get; set; }
#endif
        /// <summary>String that specifies the specification version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TpmSpecificationVersion { get; set; }
#nullable restore
#else
        public string TpmSpecificationVersion { get; set; }
#endif
        /// <summary>The version of the TPM, as specified by the manufacturer</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TpmVersion { get; set; }
#nullable restore
#else
        public string TpmVersion { get; set; }
#endif
        /// <summary>WiFi MAC address of the device</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WifiMac { get; set; }
#nullable restore
#else
        public string WifiMac { get; set; }
#endif
        /// <summary>A list of wired IPv4 addresses. The update frequency (the maximum delay for the change of property value to be synchronized from the device to the cloud storage) of this property is daily. Note this property is currently supported only on devices running on Windows.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? WiredIPv4Addresses { get; set; }
#nullable restore
#else
        public List<string> WiredIPv4Addresses { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="HardwareInformation"/> and sets the default values.
        /// </summary>
        public HardwareInformation()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="HardwareInformation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static HardwareInformation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new HardwareInformation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"batteryChargeCycles", n => { BatteryChargeCycles = n.GetIntValue(); } },
                {"batteryHealthPercentage", n => { BatteryHealthPercentage = n.GetIntValue(); } },
                {"batteryLevelPercentage", n => { BatteryLevelPercentage = n.GetDoubleValue(); } },
                {"batterySerialNumber", n => { BatterySerialNumber = n.GetStringValue(); } },
                {"cellularTechnology", n => { CellularTechnology = n.GetStringValue(); } },
                {"deviceFullQualifiedDomainName", n => { DeviceFullQualifiedDomainName = n.GetStringValue(); } },
                {"deviceGuardLocalSystemAuthorityCredentialGuardState", n => { DeviceGuardLocalSystemAuthorityCredentialGuardState = n.GetEnumValue<DeviceGuardLocalSystemAuthorityCredentialGuardState>(); } },
                {"deviceGuardVirtualizationBasedSecurityHardwareRequirementState", n => { DeviceGuardVirtualizationBasedSecurityHardwareRequirementState = n.GetEnumValue<DeviceGuardVirtualizationBasedSecurityHardwareRequirementState>(); } },
                {"deviceGuardVirtualizationBasedSecurityState", n => { DeviceGuardVirtualizationBasedSecurityState = n.GetEnumValue<DeviceGuardVirtualizationBasedSecurityState>(); } },
                {"deviceLicensingLastErrorCode", n => { DeviceLicensingLastErrorCode = n.GetIntValue(); } },
                {"deviceLicensingLastErrorDescription", n => { DeviceLicensingLastErrorDescription = n.GetStringValue(); } },
                {"deviceLicensingStatus", n => { DeviceLicensingStatus = n.GetEnumValue<DeviceLicensingStatus>(); } },
                {"esimIdentifier", n => { EsimIdentifier = n.GetStringValue(); } },
                {"freeStorageSpace", n => { FreeStorageSpace = n.GetLongValue(); } },
                {"imei", n => { Imei = n.GetStringValue(); } },
                {"ipAddressV4", n => { IpAddressV4 = n.GetStringValue(); } },
                {"isEncrypted", n => { IsEncrypted = n.GetBoolValue(); } },
                {"isSharedDevice", n => { IsSharedDevice = n.GetBoolValue(); } },
                {"isSupervised", n => { IsSupervised = n.GetBoolValue(); } },
                {"manufacturer", n => { Manufacturer = n.GetStringValue(); } },
                {"meid", n => { Meid = n.GetStringValue(); } },
                {"model", n => { Model = n.GetStringValue(); } },
                {"@odata.type", n => { OdataType = n.GetStringValue(); } },
                {"operatingSystemEdition", n => { OperatingSystemEdition = n.GetStringValue(); } },
                {"operatingSystemLanguage", n => { OperatingSystemLanguage = n.GetStringValue(); } },
                {"operatingSystemProductType", n => { OperatingSystemProductType = n.GetIntValue(); } },
                {"osBuildNumber", n => { OsBuildNumber = n.GetStringValue(); } },
                {"phoneNumber", n => { PhoneNumber = n.GetStringValue(); } },
                {"productName", n => { ProductName = n.GetStringValue(); } },
                {"residentUsersCount", n => { ResidentUsersCount = n.GetIntValue(); } },
                {"serialNumber", n => { SerialNumber = n.GetStringValue(); } },
                {"sharedDeviceCachedUsers", n => { SharedDeviceCachedUsers = n.GetCollectionOfObjectValues<SharedAppleDeviceUser>(SharedAppleDeviceUser.CreateFromDiscriminatorValue)?.ToList(); } },
                {"subnetAddress", n => { SubnetAddress = n.GetStringValue(); } },
                {"subscriberCarrier", n => { SubscriberCarrier = n.GetStringValue(); } },
                {"systemManagementBIOSVersion", n => { SystemManagementBIOSVersion = n.GetStringValue(); } },
                {"totalStorageSpace", n => { TotalStorageSpace = n.GetLongValue(); } },
                {"tpmManufacturer", n => { TpmManufacturer = n.GetStringValue(); } },
                {"tpmSpecificationVersion", n => { TpmSpecificationVersion = n.GetStringValue(); } },
                {"tpmVersion", n => { TpmVersion = n.GetStringValue(); } },
                {"wifiMac", n => { WifiMac = n.GetStringValue(); } },
                {"wiredIPv4Addresses", n => { WiredIPv4Addresses = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("batteryChargeCycles", BatteryChargeCycles);
            writer.WriteIntValue("batteryHealthPercentage", BatteryHealthPercentage);
            writer.WriteDoubleValue("batteryLevelPercentage", BatteryLevelPercentage);
            writer.WriteStringValue("batterySerialNumber", BatterySerialNumber);
            writer.WriteStringValue("cellularTechnology", CellularTechnology);
            writer.WriteStringValue("deviceFullQualifiedDomainName", DeviceFullQualifiedDomainName);
            writer.WriteEnumValue<DeviceGuardLocalSystemAuthorityCredentialGuardState>("deviceGuardLocalSystemAuthorityCredentialGuardState", DeviceGuardLocalSystemAuthorityCredentialGuardState);
            writer.WriteEnumValue<DeviceGuardVirtualizationBasedSecurityHardwareRequirementState>("deviceGuardVirtualizationBasedSecurityHardwareRequirementState", DeviceGuardVirtualizationBasedSecurityHardwareRequirementState);
            writer.WriteEnumValue<DeviceGuardVirtualizationBasedSecurityState>("deviceGuardVirtualizationBasedSecurityState", DeviceGuardVirtualizationBasedSecurityState);
            writer.WriteIntValue("deviceLicensingLastErrorCode", DeviceLicensingLastErrorCode);
            writer.WriteStringValue("deviceLicensingLastErrorDescription", DeviceLicensingLastErrorDescription);
            writer.WriteEnumValue<DeviceLicensingStatus>("deviceLicensingStatus", DeviceLicensingStatus);
            writer.WriteStringValue("esimIdentifier", EsimIdentifier);
            writer.WriteLongValue("freeStorageSpace", FreeStorageSpace);
            writer.WriteStringValue("imei", Imei);
            writer.WriteStringValue("ipAddressV4", IpAddressV4);
            writer.WriteBoolValue("isEncrypted", IsEncrypted);
            writer.WriteBoolValue("isSharedDevice", IsSharedDevice);
            writer.WriteBoolValue("isSupervised", IsSupervised);
            writer.WriteStringValue("manufacturer", Manufacturer);
            writer.WriteStringValue("meid", Meid);
            writer.WriteStringValue("model", Model);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteStringValue("operatingSystemEdition", OperatingSystemEdition);
            writer.WriteStringValue("operatingSystemLanguage", OperatingSystemLanguage);
            writer.WriteIntValue("operatingSystemProductType", OperatingSystemProductType);
            writer.WriteStringValue("osBuildNumber", OsBuildNumber);
            writer.WriteStringValue("phoneNumber", PhoneNumber);
            writer.WriteStringValue("productName", ProductName);
            writer.WriteIntValue("residentUsersCount", ResidentUsersCount);
            writer.WriteStringValue("serialNumber", SerialNumber);
            writer.WriteCollectionOfObjectValues<SharedAppleDeviceUser>("sharedDeviceCachedUsers", SharedDeviceCachedUsers);
            writer.WriteStringValue("subnetAddress", SubnetAddress);
            writer.WriteStringValue("subscriberCarrier", SubscriberCarrier);
            writer.WriteStringValue("systemManagementBIOSVersion", SystemManagementBIOSVersion);
            writer.WriteLongValue("totalStorageSpace", TotalStorageSpace);
            writer.WriteStringValue("tpmManufacturer", TpmManufacturer);
            writer.WriteStringValue("tpmSpecificationVersion", TpmSpecificationVersion);
            writer.WriteStringValue("tpmVersion", TpmVersion);
            writer.WriteStringValue("wifiMac", WifiMac);
            writer.WriteCollectionOfPrimitiveValues<string>("wiredIPv4Addresses", WiredIPv4Addresses);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
