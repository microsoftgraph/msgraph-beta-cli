// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models.Networkaccess
{
    #pragma warning disable CS1591
    public class CrossTenantSummary : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The total number of authentication sessions between startDateTime and endDateTime.</summary>
        public int? AuthTransactionCount { get; set; }
        /// <summary>The number of unique devices that performed cross-tenant access.</summary>
        public int? DeviceCount { get; set; }
        /// <summary>The number of unique tenants that were accessed between endDateTime and discoveryPivotDateTime, but weren&apos;t accessed between discoveryPivotDateTime and startDateTime.</summary>
        public int? NewTenantCount { get; set; }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType { get; set; }
#nullable restore
#else
        public string OdataType { get; set; }
#endif
        /// <summary>The number of tenants that are rarely used.</summary>
        public int? RarelyUsedTenantCount { get; set; }
        /// <summary>The number of unique tenants that were accessed, not including the device&apos;s tenant.</summary>
        public int? TenantCount { get; set; }
        /// <summary>The number of unique users that performed cross-tenant access.</summary>
        public int? UserCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="CrossTenantSummary"/> and sets the default values.
        /// </summary>
        public CrossTenantSummary()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="CrossTenantSummary"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CrossTenantSummary CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CrossTenantSummary();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authTransactionCount", n => { AuthTransactionCount = n.GetIntValue(); } },
                { "deviceCount", n => { DeviceCount = n.GetIntValue(); } },
                { "newTenantCount", n => { NewTenantCount = n.GetIntValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "rarelyUsedTenantCount", n => { RarelyUsedTenantCount = n.GetIntValue(); } },
                { "tenantCount", n => { TenantCount = n.GetIntValue(); } },
                { "userCount", n => { UserCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("authTransactionCount", AuthTransactionCount);
            writer.WriteIntValue("deviceCount", DeviceCount);
            writer.WriteIntValue("newTenantCount", NewTenantCount);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteIntValue("rarelyUsedTenantCount", RarelyUsedTenantCount);
            writer.WriteIntValue("tenantCount", TenantCount);
            writer.WriteIntValue("userCount", UserCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
