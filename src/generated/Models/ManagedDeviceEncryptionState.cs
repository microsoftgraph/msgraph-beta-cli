// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Encryption report per device
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ManagedDeviceEncryptionState : global::ApiSdk.Models.Entity, IParsable
    {
        /// <summary>Advanced BitLocker State. Possible values are: success, noUserConsent, osVolumeUnprotected, osVolumeTpmRequired, osVolumeTpmOnlyRequired, osVolumeTpmPinRequired, osVolumeTpmStartupKeyRequired, osVolumeTpmPinStartupKeyRequired, osVolumeEncryptionMethodMismatch, recoveryKeyBackupFailed, fixedDriveNotEncrypted, fixedDriveEncryptionMethodMismatch, loggedOnUserNonAdmin, windowsRecoveryEnvironmentNotConfigured, tpmNotAvailable, tpmNotReady, networkError.</summary>
        public global::ApiSdk.Models.AdvancedBitLockerState? AdvancedBitLockerStates { get; set; }
        /// <summary>Device name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceName { get; set; }
#nullable restore
#else
        public string DeviceName { get; set; }
#endif
        /// <summary>Device type.</summary>
        public global::ApiSdk.Models.DeviceTypes? DeviceType { get; set; }
        /// <summary>The encryptionPolicySettingState property</summary>
        public global::ApiSdk.Models.ComplianceStatus? EncryptionPolicySettingState { get; set; }
        /// <summary>Encryption readiness state</summary>
        public global::ApiSdk.Models.EncryptionReadinessState? EncryptionReadinessState { get; set; }
        /// <summary>Encryption state</summary>
        public global::ApiSdk.Models.EncryptionState? EncryptionState { get; set; }
        /// <summary>FileVault State. Possible values are: success, driveEncryptedByUser, userDeferredEncryption, escrowNotEnabled.</summary>
        public global::ApiSdk.Models.FileVaultState? FileVaultStates { get; set; }
        /// <summary>Operating system version of the device</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OsVersion { get; set; }
#nullable restore
#else
        public string OsVersion { get; set; }
#endif
        /// <summary>Policy Details</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.EncryptionReportPolicyDetails>? PolicyDetails { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.EncryptionReportPolicyDetails> PolicyDetails { get; set; }
#endif
        /// <summary>Device TPM Version</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TpmSpecificationVersion { get; set; }
#nullable restore
#else
        public string TpmSpecificationVersion { get; set; }
#endif
        /// <summary>User name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserPrincipalName { get; set; }
#nullable restore
#else
        public string UserPrincipalName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.ManagedDeviceEncryptionState"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.ManagedDeviceEncryptionState CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.ManagedDeviceEncryptionState();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "advancedBitLockerStates", n => { AdvancedBitLockerStates = n.GetEnumValue<global::ApiSdk.Models.AdvancedBitLockerState>(); } },
                { "deviceName", n => { DeviceName = n.GetStringValue(); } },
                { "deviceType", n => { DeviceType = n.GetEnumValue<global::ApiSdk.Models.DeviceTypes>(); } },
                { "encryptionPolicySettingState", n => { EncryptionPolicySettingState = n.GetEnumValue<global::ApiSdk.Models.ComplianceStatus>(); } },
                { "encryptionReadinessState", n => { EncryptionReadinessState = n.GetEnumValue<global::ApiSdk.Models.EncryptionReadinessState>(); } },
                { "encryptionState", n => { EncryptionState = n.GetEnumValue<global::ApiSdk.Models.EncryptionState>(); } },
                { "fileVaultStates", n => { FileVaultStates = n.GetEnumValue<global::ApiSdk.Models.FileVaultState>(); } },
                { "osVersion", n => { OsVersion = n.GetStringValue(); } },
                { "policyDetails", n => { PolicyDetails = n.GetCollectionOfObjectValues<global::ApiSdk.Models.EncryptionReportPolicyDetails>(global::ApiSdk.Models.EncryptionReportPolicyDetails.CreateFromDiscriminatorValue)?.AsList(); } },
                { "tpmSpecificationVersion", n => { TpmSpecificationVersion = n.GetStringValue(); } },
                { "userPrincipalName", n => { UserPrincipalName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::ApiSdk.Models.AdvancedBitLockerState>("advancedBitLockerStates", AdvancedBitLockerStates);
            writer.WriteStringValue("deviceName", DeviceName);
            writer.WriteEnumValue<global::ApiSdk.Models.DeviceTypes>("deviceType", DeviceType);
            writer.WriteEnumValue<global::ApiSdk.Models.ComplianceStatus>("encryptionPolicySettingState", EncryptionPolicySettingState);
            writer.WriteEnumValue<global::ApiSdk.Models.EncryptionReadinessState>("encryptionReadinessState", EncryptionReadinessState);
            writer.WriteEnumValue<global::ApiSdk.Models.EncryptionState>("encryptionState", EncryptionState);
            writer.WriteEnumValue<global::ApiSdk.Models.FileVaultState>("fileVaultStates", FileVaultStates);
            writer.WriteStringValue("osVersion", OsVersion);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.EncryptionReportPolicyDetails>("policyDetails", PolicyDetails);
            writer.WriteStringValue("tpmSpecificationVersion", TpmSpecificationVersion);
            writer.WriteStringValue("userPrincipalName", UserPrincipalName);
        }
    }
}
#pragma warning restore CS0618
