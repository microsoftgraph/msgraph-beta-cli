// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models.Security
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DetonationBehaviourDetails : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The status of the action performed during detonation (e.g., &apos;Successful&apos;, &apos;Failed&apos;, &apos;Blocked&apos;).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActionStatus { get; set; }
#nullable restore
#else
        public string ActionStatus { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Categorizes the capability or type of behavior observed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BehaviourCapability { get; set; }
#nullable restore
#else
        public string BehaviourCapability { get; set; }
#endif
        /// <summary>Groups related behaviors together for classification purposes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BehaviourGroup { get; set; }
#nullable restore
#else
        public string BehaviourGroup { get; set; }
#endif
        /// <summary>More contextual information about the observed behavior or action.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Details { get; set; }
#nullable restore
#else
        public string Details { get; set; }
#endif
        /// <summary>The date and time when the behavior or action was observed during detonation.</summary>
        public DateTimeOffset? EventDateTime { get; set; }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType { get; set; }
#nullable restore
#else
        public string OdataType { get; set; }
#endif
        /// <summary>The specific operation or action that was performed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Operation { get; set; }
#nullable restore
#else
        public string Operation { get; set; }
#endif
        /// <summary>The unique identifier of the process involved in the behavior.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProcessId { get; set; }
#nullable restore
#else
        public string ProcessId { get; set; }
#endif
        /// <summary>The name of the process that performed or was involved in the behavior.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProcessName { get; set; }
#nullable restore
#else
        public string ProcessName { get; set; }
#endif
        /// <summary>The target of the operation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Target { get; set; }
#nullable restore
#else
        public string Target { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.Security.DetonationBehaviourDetails"/> and sets the default values.
        /// </summary>
        public DetonationBehaviourDetails()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.Security.DetonationBehaviourDetails"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ApiSdk.Models.Security.DetonationBehaviourDetails CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.Security.DetonationBehaviourDetails();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "actionStatus", n => { ActionStatus = n.GetStringValue(); } },
                { "behaviourCapability", n => { BehaviourCapability = n.GetStringValue(); } },
                { "behaviourGroup", n => { BehaviourGroup = n.GetStringValue(); } },
                { "details", n => { Details = n.GetStringValue(); } },
                { "eventDateTime", n => { EventDateTime = n.GetDateTimeOffsetValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "operation", n => { Operation = n.GetStringValue(); } },
                { "processId", n => { ProcessId = n.GetStringValue(); } },
                { "processName", n => { ProcessName = n.GetStringValue(); } },
                { "target", n => { Target = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("actionStatus", ActionStatus);
            writer.WriteStringValue("behaviourCapability", BehaviourCapability);
            writer.WriteStringValue("behaviourGroup", BehaviourGroup);
            writer.WriteStringValue("details", Details);
            writer.WriteDateTimeOffsetValue("eventDateTime", EventDateTime);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteStringValue("operation", Operation);
            writer.WriteStringValue("processId", ProcessId);
            writer.WriteStringValue("processName", ProcessName);
            writer.WriteStringValue("target", Target);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
